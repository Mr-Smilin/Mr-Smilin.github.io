{
    "version": "https://jsonfeed.org/version/1",
    "title": "微笑工房 • All posts by \"用node.js製作後台零負擔的discordbot\" category",
    "description": "程式教學 C#/JAVA/HTML5/NODE.JS，後端開發，日常瑣記",
    "home_page_url": "https://smilin.net",
    "items": [
        {
            "id": "https://smilin.net/2020/09/30/12thDayEnd/",
            "url": "https://smilin.net/2020/09/30/12thDayEnd/",
            "title": "沉沉入睡的回憶小姐，匆匆揚帆的時間先生",
            "date_published": "2020-09-30T02:20:37.000Z",
            "content_html": "<p>最初看到鐵人賽是大學二年級的時候，距離現在也就兩年，其實還挺短的</p>\n<p>因為早早為專題做準備…需要查資料？造訪了這個地方</p>\n<p>當時想都沒想過自己會寫鐵人賽(笑</p>\n<span id=\"more\"></span>\n\n<hr>\n<p>都說大學的人生是最多采多姿的</p>\n<p>中間遇到了許多事情</p>\n<p>時常為了專題留校</p>\n<p>遇到可以一起努力的人</p>\n<p>偶而一起吃午餐</p>\n<p>每天都感到充實</p>\n<p>雖然不全是快樂的事情</p>\n<p>有許多寶貴的回憶呀</p>\n<p>想必有更多有趣的事情沒有去挖掘</p>\n<p>有更多的日子可以去揮霍</p>\n<p>不過也畢業了</p>\n<p>也有許多事是已經錯過的</p>\n<p>不會有機會再去嘗試了</p>\n<hr>\n<p>最初參加鐵人賽的契機，表面上是想分享機器人的寫法，想增加自己履歷上的談資</p>\n<p>現在想來，只是希望可以嘗試更多事情吧</p>\n<p>想著也許這樣子做，我也會有甚麼改變</p>\n<p>雖然到後來，鐵人賽真的讓我感覺蠻辛苦的</p>\n<p>時常覺得，反正也不會有人來看我的文章</p>\n<p>並不是說不努力，我花了很多時間來想要教甚麼才好</p>\n<p>但就像自暴自棄一般的寫起流水帳了</p>\n<p>十分抱歉</p>\n<hr>\n<p>那麼，時間也差不多到了</p>\n<p>有許多事情都還沒做</p>\n<p>有得必有失，想必之後也會繼續過著得一失一的日子吧</p>\n<p>儘管如此，我也會努力的</p>\n<p>因為想變得比現在更好。</p>\n",
            "tags": [
                "node.js",
                "bot",
                "discord",
                "discord.js",
                "12th鐵人賽",
                "日記"
            ]
        },
        {
            "id": "https://smilin.net/2020/09/30/12thDay30/",
            "url": "https://smilin.net/2020/09/30/12thDay30/",
            "title": "Day30 - tag控管機制(4)",
            "date_published": "2020-09-30T01:53:30.000Z",
            "content_html": "<p>今天把tag的最後一件事做完</p>\n<p>將使用者從指定權限組移除<br>將指定權限組移除</p>\n<p>在tag入口新增Delete方法</p>\n<span id=\"more\"></span>\n\n<p><img src=\"https://i.imgur.com/7Y2m2Rl.png\" alt=\"30-1\"></p>\n<p>創建實例</p>\n<p><img src=\"https://i.imgur.com/78vy8E8.png\" alt=\"30-2\"></p>\n<pre><code>//從權限組中刪除使用者 OR 刪除權限組\nfunction DeleteTag(msg) &#123;\n    try &#123;\n        if (DoUserID === &#39;&#39;) &#123;\n            tempIsAdmin = CheckID(msg, null, msg.author.id, function(msg, cmd, haveUserData) &#123;\n                if (haveUserData.IsAdmin) return true;\n                else return false;\n            &#125;);\n            if (tempIsAdmin) &#123;\n                nowDoFunction = DeleteTagNow;\n                DoUserID = msg.author.id;\n                DoData = new Array;\n                msg.channel.send(&#39;請問要編輯使用者權限還是權限組?\\n1 使用者權限 / 2 權限組&#39;);\n            &#125; else &#123;\n                msg.channel.send(&#39;此指令只有管理員可執行&#39;);\n            &#125;\n        &#125; else &#123;\n            msg.channel.send(&#39;有其他人正在使用續行中，請稍等&#39;);\n        &#125;\n    &#125; catch (err) &#123;\n        console.log(&#39;DeleteTagError&#39;, err);\n    &#125;\n&#125;\n</code></pre>\n<p>創建續行實例</p>\n<pre><code>//從權限組中刪除使用者 OR 刪除權限組(續行)\nfunction DeleteTagNow(msg) &#123;\n    try &#123;\n        switch (DoingCount) &#123;\n            case 0:\n                switch (msg.content) &#123;\n                    case &#39;1&#39;:\n                        msg.channel.send(&#39;請輸入要編輯的使用者ID&#39;);\n                        break;\n                    case &#39;2&#39;:\n                        DoingCount = 10;\n                        msg.channel.send(&#39;請輸入要編輯的權限組&#39;);\n                        break;\n                    default:\n                        DoingCount--;\n                        msg.channel.send(&#39;無法辨識訊息，請輸入1/2來選擇&#39;);\n                        break;\n                &#125;\n                break;\n            case 1:\n                if (msg.content == &#39;N&#39;) &#123;\n                    CloseAllDoingFunction();\n                    msg.channel.send(&#39;指令關閉&#39;);\n                &#125; else &#123;\n                    if (CheckID(msg, null, msg.content, (msg, cmd, haveUserData) =&gt; &#123; return haveUserData &#125;)) &#123;\n                        DoData.push(msg.content); //userID\n                        DoData.push(msg.author.id); //userName\n                        msg.channel.send(&#39;請輸入要刪除的群組權限&#39;);\n                    &#125; else &#123;\n                        DoingCount--;\n                        msg.channel.send(&#39;此用戶不存在資料，請確認，如果要關閉指令請輸入 N&#39;);\n                    &#125;\n                &#125;\n                break;\n            case 2:\n                DoData.push(msg.content); // Power\n                DoData.push(false); // IsAdmin\n                msg.channel.send(`申請資料如下:\\n申請人 &lt;@$&#123;msg.author.id&#125;&gt;\\n使用者 &lt;@$&#123;DoData[0]&#125;&gt;\\n刪除權限組 $&#123;DoData[2]&#125;\\n正確 Y / 錯誤 N`);\n                break;\n            case 3:\n                if (msg.content === &#39;Y&#39;) &#123;\n                    msg.channel.send(&#39;已確認，輸入資料中...&#39;);\n                    //與舊資料比對，已有此人資料變進行更新\n                    CheckID(msg, null, DoData[0], DeleteOldUserPower);\n                    GetGas.postUserPower(DoData, function(dataED) &#123;\n                        if (dataED) &#123;\n                            //bot內變數不會更新，手動更新\n                            UserPowerData.unshift(&#123;\n                                &#39;userID&#39;: DoData[0],\n                                &#39;userName&#39;: DoData[1],\n                                &#39;Joins&#39;: DoData[2],\n                                &#39;IsAdmin&#39;: DoData[3]\n                            &#125;);\n                            msg.channel.send(&#39;輸入完畢!&#39;);\n                        &#125; else &#123;\n                            msg.channel.send(&#39;資料輸入失敗，請重新嘗試&#39;);\n                        &#125;\n                        CloseAllDoingFunction();\n                    &#125;);\n                &#125; else if (msg.content === &#39;N&#39;) &#123;\n                    CloseAllDoingFunction();\n                    msg.channel.send(&#39;已取消行為，請重新下達指令&#39;)\n                &#125; else &#123;\n                    DoingCount--;\n                    msg.channel.send(&#39;無法辨識訊息，請輸入Y/N來選擇&#39;);\n                &#125;\n                break;\n            case 11:\n                DoData.push(msg.content); //身分組ID\n                DoData.push(&#39;2&#39;); //type 2\n                DoData.push(&#39;&#39;);\n                msg.channel.send(`申請資料如下:\\n申請人 &lt;@$&#123;msg.author.id&#125;&gt;\\n刪除權限組 $&#123;DoData[0]&#125;\\n正確 Y / 錯誤 N`);\n                break;\n            case 12:\n                if (msg.content === &#39;Y&#39;) &#123;\n                    msg.channel.send(&#39;已確認，輸入資料中...&#39;);\n                    //與舊資料比對，沒有此身分組資料清除\n                    DeleteOldPartyPower();\n                    if (DoData[0] != &#39;&#39;) &#123;\n                        GetGas.postPartyPower(DoData, function(dataED) &#123;\n                            if (dataED) &#123;\n                                //bot內變數不會更新，手動更新\n                                PartyPowerData.unshift(&#123;\n                                    &#39;ID&#39;: DoData[0],\n                                    &#39;type&#39;: DoData[1],\n                                    &#39;Power&#39;: DoData[2]\n                                &#125;);\n                                msg.channel.send(&#39;輸入完畢!&#39;);\n                            &#125; else &#123;\n                                msg.channel.send(&#39;資料輸入失敗，請重新嘗試&#39;);\n                            &#125;\n                            CloseAllDoingFunction();\n                        &#125;);\n                    &#125; else &#123;\n                        msg.channel.send(&#39;輸入完畢!&#39;);\n                        CloseAllDoingFunction();\n                    &#125;\n                &#125; else if (msg.content === &#39;N&#39;) &#123;\n                    CloseAllDoingFunction();\n                    msg.channel.send(&#39;已取消行為，請重新下達指令&#39;)\n                &#125; else &#123;\n                    DoingCount--;\n                    msg.channel.send(&#39;無法辨識訊息，請輸入Y/N來選擇&#39;);\n                &#125;\n                break;\n        &#125;\n        if (DoUserID !== &#39;&#39;) DoingCount++;\n    &#125; catch (err) &#123;\n        CloseAllDoingFunction();\n        client.channels.fetch(msg.channel.id).then(channel =&gt; channel.send(&#39;發生意外錯誤，中斷指令行為，請重新下達指令!&#39;))\n        console.log(&#39;DeleteTagNowError&#39;, err);\n    &#125;\n&#125;\n</code></pre>\n<p>創建刪除類方法</p>\n<p><img src=\"https://i.imgur.com/QZUmmzj.png\" alt=\"30-3\"></p>\n<pre><code>//用戶舊資料更新\nfunction DeleteOldUserPower(msg, cmd, haveUserData) &#123;\n    //二次確認\n    if (haveUserData) &#123;\n        if (DoData[0] == haveUserData.userID) &#123;\n            let str = haveUserData.Joins;\n            DoData[2] = str.toString().replace(DoData[2], &#39;&#39;);\n            DoData[3] = haveUserData.IsAdmin;\n            return true;\n        &#125; else return false;\n    &#125; else return false;\n&#125;\n</code></pre>\n<p><img src=\"https://i.imgur.com/6x3lpht.png\" alt=\"30-4\"></p>\n<pre><code>//權限組舊資料更新\nfunction DeleteOldPartyPower() &#123;\n    if (PartyPowerData) &#123;\n        const tempPartyData = PartyPowerData.find(element =&gt; &#123;\n            return element.ID == DoData[0];\n        &#125;)\n\n        if (tempPartyData == undefined) &#123;\n            DoData[0] = &#39;&#39;;\n            DoData[1] = &#39;&#39;;\n            DoData[2] = &#39;&#39;;\n        &#125;\n    &#125;\n&#125;\n</code></pre>\n<p>運行看看</p>\n<p><img src=\"https://i.imgur.com/QrQC5iq.png\" alt=\"30-5\"></p>\n<p><img src=\"https://i.imgur.com/vbEQ8EO.png\" alt=\"30-6\"></p>\n<p><img src=\"https://i.imgur.com/q9MDunU.png\" alt=\"30-7\"></p>\n<p><img src=\"https://i.imgur.com/RUpxxCl.png\" alt=\"30-8\"></p>\n<p>成功</p>\n<p>到此，番外的部分也說完了</p>\n<p>與基本的內容不同，多說了post的API，以及程式碼的部份相對複雜<br>且比起前面的篇幅，後續的文章大多都是直接貼了程式碼的順序，很少講解</p>\n<p>想必讀起來十分艱澀吧?能讀到這裡的你是十分了不起的，恭喜你看完了這篇文章</p>\n<p>儘管如此，這支程式仍然是不成熟的，筆者對每個功能盡量都只是點到為止，希望能把大部份的應用都帶到，後面便是要靠各位讀者<br>根據自己遇到的需求，來改善加強他吧，相信只要努力堅持，完成後的機器人一定會帶給各位程式能力上的提升的</p>\n<p>那麼，用Node.js製作後台零負擔的DiscordBot到此結束<br>祝各位中秋佳節愉快</p>\n<p>底下附上完整的bot.js，供參考</p>\n<pre><code>//#region 全域變數\nconst Discord = require(&#39;discord.js&#39;);\nconst client = new Discord.Client();\nconst ytdl = require(&#39;ytdl-core&#39;);\nconst ytpl = require(&#39;ytpl&#39;);\nconst auth = require(&#39;./JSONHome/auth.json&#39;);\nconst prefix = require(&#39;./JSONHome/prefix.json&#39;);\nconst GetGas = require(&#39;./Script/GetGas.js&#39;);\nconst shup = require(&#39;./JSONHome/shup.json&#39;);\n\n//存放BaseExcelAPI資料\nlet BaseExcelData = false;\nlet UserPowerData = false;\nlet PartyPowerData = false;\n\n//持續執行方法\nlet nowDoFunction = false;\nlet DoingCount = 0;\nlet DoUserID = &#39;&#39;;\nlet DoData = undefined;\n\n//#endregion\n\n//#region 登入\nclient.login(auth.key);\n\nclient.on(&#39;ready&#39;, () =&gt; &#123;\n    GetGas.getBaseExcel(function(dataED) &#123;\n        if (dataED) &#123;\n            BaseExcelData = dataED //有資料\n        &#125;\n        GetGas.getUserPower(function(dataED) &#123;\n            if (dataED) &#123;\n                UserPowerData = dataED;\n            &#125;\n            GetGas.getPartyPower(function(dataED) &#123;\n                if (dataED) &#123;\n                    PartyPowerData = dataED;\n                &#125;\n                console.log(`Logged in as $&#123;client.user.tag&#125;!`);\n            &#125;);\n        &#125;)\n    &#125;)\n&#125;);\n\n//#endregion\n\n//#region message事件入口\nclient.on(&#39;message&#39;, msg =&gt; &#123;\n    //前置判斷\n    try &#123;\n        if (!msg.guild || !msg.member) return; //訊息內不存在guild元素 = 非群組消息(私聊)\n        if (!msg.member.user) return; //幫bot值多拉一層，判斷上層物件是否存在\n        if (msg.member.user.bot) return; //訊息內bot值為正 = 此消息為bot發送\n    &#125; catch (err) &#123;\n        return;\n    &#125;\n\n    //續行方法\n    if (nowDoFunction &amp;&amp; msg.author.id === DoUserID) &#123;\n        nowDoFunction(msg);\n        return;\n    &#125;\n\n    //字串分析\n    try &#123;\n        let tempPrefix = &#39;-1&#39;;\n        const prefixED = Object.keys(prefix); //前綴符號定義\n        prefixED.forEach(element =&gt; &#123;\n            if (msg.content.substring(0, prefix[element].Value.length) === prefix[element].Value) &#123;\n                tempPrefix = element;\n            &#125;\n        &#125;);\n\n        //禁言系統判斷\n        if (!IsShut(msg, tempPrefix)) return;\n\n        //實作\n        switch (tempPrefix) &#123;\n            case &#39;0&#39;: //文字回應功能\n                BasicFunction(msg, tempPrefix);\n                break;\n            case &#39;1&#39;: //音樂指令 \n                MusicFunction(msg);\n                break;\n            case &#39;2&#39;: //機器人tag指令\n                TagFunction(msg, tempPrefix);\n                break;\n            default:\n                BaseExcelFunction(msg);\n                break;\n        &#125;\n    &#125; catch (err) &#123;\n        console.log(&#39;OnMessageError&#39;, err);\n    &#125;\n&#125;);\n\n//#endregion\n\n//#region 基本指令系統\nfunction BasicFunction(msg, tempPrefix) &#123;\n    const cmd = msg.content.substring(prefix[tempPrefix].Value.length).split(&#39; &#39;); //以空白分割前綴以後的字串\n    switch (cmd[0]) &#123;\n        case &#39;ping&#39;:\n            msg.channel.send(&#39;pong&#39;);\n            break;\n        case &#39;老婆&#39;:\n            msg.reply(&#39;你沒有老婆!!&#39;);\n            break;\n        case &#39;myAvatar&#39;:\n            const avatar = GetMyAvatar(msg);\n            if (avatar.files) msg.channel.send(`$&#123;msg.author&#125;`, avatar).catch(err =&gt; &#123; console.log(err) &#125;);\n            break;\n            // case &#39;test&#39;:\n            //     const testStr2 = msg.content.split(&#39; &#39;);\n            //     console.log(client.users.fetch(testStr2[1]).then(element =&gt; console.log(element.displayAvatarURL())));\n            //     break;\n    &#125;\n&#125;\n\n//#endregion\n\n//#region 音樂系統\n//歌曲控制器\nlet dispatcher = new Map();\n//歌曲清單\nlet musicList = new Map();\n\nfunction MusicFunction(msg) &#123;\n    //將訊息內的前綴字截斷，後面的字是我們要的\n    const content = msg.content.substring(prefix[1].Value.length);\n    //指定我們的間隔符號\n    const splitText = &#39; &#39;;\n    //用間隔符號隔開訊息 contents[0] = 指令,contents[1] = 參數\n    const contents = content.split(splitText);\n    //因為會持續使用到，將群組ID獨立成參數\n    const guildID = msg.guild.id;\n\n    switch (contents[0]) &#123;\n        case &#39;play&#39;:\n            //點歌&amp;播放歌曲功能\n            playMusic(guildID, msg, contents);\n            break;\n        case &#39;replay&#39;:\n            //重播當前歌曲\n            replayMusic(guildID);\n            break;\n        case &#39;np&#39;:\n            //當前歌曲資訊\n            nowPlayMusic(guildID, msg.channel.id);\n            break;\n        case &#39;queue&#39;:\n            //歌曲清單\n            queueShow(guildID, msg.channel.id);\n            break;\n        case &#39;skip&#39;:\n            //中斷歌曲\n            skipMusic(guildID);\n            break;\n        case &#39;disconnect&#39;:\n            //退出語音頻道並且清空歌曲清單\n            disconnectMusic(guildID, msg.channel.id);\n            break;\n        case &#39;playList&#39;:\n            //載入歌單\n            playListMusic(guildID, msg);\n            break;\n    &#125;\n&#125;\n\n//?play\nasync function playMusic(guildID, msg, contents) &#123;\n    //定義我們的第一個參數必需是網址\n    const urlED = contents[1];\n    try &#123;\n        //第一個參數不是連結就要篩選掉\n        if (urlED.substring(0, 4) !== &#39;http&#39;) return msg.reply(&#39;The link is not working.1&#39;);\n\n        //透過library判斷連結是否可運行\n        const validate = await ytdl.validateURL(urlED);\n        if (!validate) return msg.reply(&#39;The link is not working.2&#39;);\n\n        //獲取歌曲資訊\n        const info = await ytdl.getInfo(urlED);\n        //判斷資訊是否正常\n        if (info.videoDetails) &#123;\n            //指令下達者是否在語音頻道\n            if (msg.member.voice.channel) &#123;\n                //判斷bot是否已經連到語音頻道 是:將歌曲加入歌單 不是:進入語音頻道並且播放歌曲\n                if (!client.voice.connections.get(msg.guild.id)) &#123;\n                    //因為是第一次加入，宣告新的歌曲列表\n                    musicList.set(guildID, new Array());\n\n                    //將歌曲加入歌單\n                    musicList.get(guildID).push(urlED);\n                    //進入語音頻道\n                    msg.member.voice.channel.join()\n                        .then(connection =&gt; &#123;\n                            msg.reply(&#39;來了~&#39;);\n                            //const guildID = msg.guild.id;\n                            const channelID = msg.channel.id;\n                            //播放歌曲\n                            playMusic2(connection, guildID, channelID);\n                        &#125;)\n                        .catch(err =&gt; &#123;\n                            msg.reply(&#39;bot進入語音頻道時發生錯誤，請再試一次&#39;);\n                            console.log(err, &#39;playMusicError2&#39;);\n                        &#125;)\n                &#125; else &#123;\n                    //將歌曲加入歌單\n                    musicList.get(guildID).push(urlED);\n                    msg.reply(&#39;已將歌曲加入歌單!&#39;);\n                &#125;\n            &#125; else return msg.reply(&#39;請先進入頻道:3...&#39;);\n        &#125; else return msg.reply(&#39;The link is not working.3&#39;);\n    &#125; catch (err) &#123;\n        console.log(err, &#39;playMusicError&#39;);\n    &#125;\n&#125;\n\n//?play 遞迴函式\nasync function playMusic2(connection, guildID, channelID) &#123;\n    try &#123;\n        //播放前歌曲清單不能沒有網址\n        if (musicList.get(guildID).length &gt; 0) &#123;\n            //設定音樂相關參數\n            const streamOptions = &#123;\n                seek: 0,\n                volume: 0.5,\n                Bitrate: 192000,\n                Passes: 1,\n                highWaterMark: 1\n            &#125;;\n            //讀取清單第一位網址\n            const stream = await ytdl(musicList.get(guildID)[0], &#123;\n                filter: &#39;audioonly&#39;,\n                quality: &#39;highestaudio&#39;,\n                highWaterMark: 26214400 //25ms\n            &#125;)\n\n            //播放歌曲，並且存入dispatcher\n            dispatcher.set(guildID, connection.play(stream, streamOptions));\n            //監聽歌曲播放結束事件\n            dispatcher.get(guildID).on(&quot;finish&quot;, finish =&gt; &#123;\n                //將清單中第一首歌清除\n                if (musicList.get(guildID).length &gt; 0) musicList.get(guildID).shift();\n                //播放歌曲\n                playMusic2(connection, guildID, channelID);\n            &#125;)\n        &#125; else disconnectMusic(guildID, channelID); //清空歌單並且退出語音頻道\n    &#125; catch (err) &#123;\n        console.log(err, &#39;playMusic2Error&#39;);\n    &#125;\n&#125;\n\n//?disconnect\nfunction disconnectMusic(guildID, channelID) &#123;\n    try &#123;\n        //判斷bot是否在此群組的語音頻道\n        if (client.voice.connections.get(guildID)) &#123;\n            //清空歌曲清單\n            musicList.set(guildID, new Array());\n            //退出語音頻道\n            client.voice.connections.get(guildID).disconnect();\n\n            client.channels.fetch(channelID).then(channel =&gt; channel.send(&#39;晚安~&#39;));\n        &#125; else client.channels.fetch(channelID).then(channel =&gt; channel.send(&#39;可是..我還沒進來:3&#39;))\n    &#125; catch (err) &#123;\n        console.log(err, &#39;disconnectMusicError&#39;);\n    &#125;\n&#125;\n\n//?replay\nfunction replayMusic(guildID) &#123;\n    if (musicList.get(guildID).length &gt; 0) &#123;\n        //把當前曲目再推一個到最前面\n        musicList.get(guildID).unshift(musicList[0]);\n        //將歌曲關閉，觸發finish事件\n        //finish事件將清單第一首歌排出，然後繼續播放下一首\n        if (dispatcher.get(guildID) !== undefined) dispatcher.get(guildID).end();\n    &#125;\n&#125;\n\n//?skip\nfunction skipMusic(guildID) &#123;\n    //將歌曲關閉，觸發finish事件\n    if (dispatcher.get(guildID) !== undefined) dispatcher.get(guildID).end();\n&#125;\n\n//?np\nasync function nowPlayMusic(guildID, channelID) &#123;\n    try &#123;\n        if (dispatcher.get(guildID) !== undefined &amp;&amp; musicList.get(guildID).length &gt; 0) &#123;\n            //從連結中獲取歌曲資訊 標題 總長度等\n            const info = await ytdl.getInfo(musicList.get(guildID)[0]);\n            //歌曲標題\n            const title = info.videoDetails.title;\n            //歌曲全長(s)\n            const songLength = info.videoDetails.lengthSeconds;\n            //當前播放時間(ms)\n            const nowSongLength = Math.floor(dispatcher.get(guildID).streamTime / 1000);\n            //串字串\n            const message = `$&#123;title&#125;\\n$&#123;streamString(songLength,nowSongLength)&#125;`;\n            client.channels.fetch(channelID).then(channel =&gt; channel.send(message))\n        &#125;\n    &#125; catch (err) &#123;\n        console.log(err, &#39;nowPlayMusicError&#39;);\n    &#125;\n&#125;\n\n//▬▬▬▬▬▬▬▬▬?▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\nfunction streamString(songLength, nowSongLength) &#123;\n    let mainText = &#39;?&#39;;\n    const secondText = &#39;▬&#39;;\n    const whereMain = Math.floor((nowSongLength / songLength) * 100);\n    let message = &#39;&#39;;\n    for (i = 1; i &lt;= 30; i++) &#123;\n        if (i * 3.3 + 1 &gt;= whereMain) &#123;\n            message = message + mainText;\n            mainText = secondText;\n        &#125; else &#123;\n            message = message + secondText;\n        &#125;\n    &#125;\n    return message;\n&#125;\n\n//?queue\nasync function queueShow(guildID, channelID) &#123;\n    try &#123;\n        if (musicList.get(guildID).length &gt; 0) &#123;\n            let info;\n            let message = &#39;&#39;;\n            for (i = 0; i &lt; musicList.get(guildID).length; i++) &#123;\n                //從連結中獲取歌曲資訊 標題 總長度等\n                info = await ytdl.getInfo(musicList.get(guildID)[i]);\n                //歌曲標題\n                title = info.videoDetails.title;\n                //串字串\n                message = message + `\\n$&#123;i+1&#125;. $&#123;title&#125;`;\n            &#125;\n            //把最前面的\\n拿掉\n            message = message.substring(1, message.length);\n            if (message.length &gt; 1900) message = message.substring(0, 1900);\n            client.channels.fetch(channelID).then(channel =&gt; channel.send(message))\n        &#125;\n    &#125; catch (err) &#123;\n        console.log(err, &#39;queueShowError&#39;);\n    &#125;\n&#125;\n\n//?playList\nasync function playListMusic(guildID, msg) &#123;\n    try &#123;\n        //沒在音樂廳不能使用此功能\n        if (!client.voice.connections.get(guildID)) &#123;\n            msg.channel.send(`請先正常啟用音樂指令後，再使用歌單載入喔`);\n            return false;\n        &#125;\n        //網址\n        const valueED = msg.content.split(&#39; &#39;);\n        //先用library自帶的方式檢查一次能不能用\n        const canPlay = await ytpl.validateID(valueED[1]);\n        //讀取到幾首歌，上限默認100首\n        let a = 0;\n        //幾首成功放入歌單\n        let b = 0;\n        if (canPlay) &#123;\n            const listED = await ytpl(valueED[1]);\n            await listED.items.forEach(async function(element) &#123;\n                a = a + 1;\n                if (element.title !== &#39;[Deleted video]&#39;) &#123;\n                    canPlay2 = await ytdl.validateURL(element.url_simple);\n                    if (canPlay2) &#123;\n                        b = b + 1;\n                        musicList.get(guildID).push(element.url_simple);\n                    &#125;\n                &#125;\n            &#125;);\n            //回傳統計資訊\n            msg.channel.send(`歌單 $&#123;listED.title&#125;\\n共載入$&#123;b&#125;首歌曲\\n$&#123;a-b&#125;首載入失敗`);\n        &#125; else &#123;\n            msg.channel.send(`This Url isn&#39;t working in function.`);\n        &#125;\n    &#125; catch (err) &#123;\n        console.log(err, &#39;playListMusicError&#39;);\n    &#125;\n&#125;\n//#endregion\n\n//#region tag系統\nfunction TagFunction(msg, tempPrefix) &#123;\n    const cmd = msg.content.substring(prefix[tempPrefix].Value.length).split(&#39; &#39;); //以空白分割前綴以後的字串\n\n    switch (cmd[0]) &#123;\n        case &#39;AddUser&#39;: //將使用者加入身份組\n            addUserFunction(msg);\n            break;\n        case &#39;CreateParty&#39;: //創建身分組&amp;增加身分組可tag對象\n            CreatePartyFunction(msg);\n            break;\n        case &#39;Delete&#39;: //從權限組中刪除使用者 OR 刪除權限組\n            DeleteTag(msg);\n            break;\n        default: //身份組ID\n            tagOther(msg, cmd);\n            break;\n    &#125;\n&#125;\n\n//tag人\nfunction tagOther(msg, cmd) &#123;\n    CheckID(msg, cmd, msg.author.id, (msg, cmd, haveUserData) =&gt; &#123;\n        CheckParty(msg, cmd, haveUserData, SendTagMessage);\n    &#125;);\n&#125;\n\n//判斷此人有沒有登記資料\nfunction CheckID(msg, cmd, userID, OtherFunction) &#123;\n    const haveUserData = UserPowerData.find(element =&gt; &#123;\n        return element.userID == userID;\n    &#125;)\n\n    if (haveUserData !== undefined) &#123;\n        //有資料\n        return OtherFunction(msg, cmd, haveUserData);\n    &#125; else &#123;\n        return OtherFunction(msg, cmd, false);\n    &#125;\n&#125;\n\n//根據UserPower獲得Party\nfunction CheckParty(msg, cmd, haveUserData, OtherFunction) &#123;\n    let havePartyPower;\n    havePartyPower = PartyPowerData.filter(element =&gt; &#123;\n        if (haveUserData.Joins[i].indexOf(element.ID) != -1) &#123;\n            return element.Power.indexOf(cmd[1]) != -1\n        &#125;\n    &#125;)\n\n    if (isEmptyObject(havePartyPower)) &#123;\n        return OtherFunction(msg, cmd, haveUserData, false);\n    &#125; else &#123;\n        return OtherFunction(msg, cmd, haveUserData, havePartyPower);\n    &#125;\n&#125;\n\n//傳送訊息單獨實例\nfunction SendTagMessage(msg, cmd, haveUserData, havePartyPower) &#123;\n    if (haveUserData.IsAdmin) &#123;\n        msg.channel.send(`&lt;@&amp;$&#123;cmd[1]&#125;&gt;\\n來自管理員&lt;@$&#123;msg.author.id&#125;&gt;的指令呼叫`);\n    &#125; else if (havePartyPower) &#123;\n        msg.channel.send(`&lt;@&amp;$&#123;cmd[1]&#125;&gt;\\n來自&lt;@$&#123;msg.author.id&#125;&gt;的指令呼叫`);\n    &#125; else &#123;\n        msg.channel.send(&#39;無權限，請確認參數是否正確&#39;);\n    &#125;\n&#125;\n\n//將xxx加入身分組\nfunction addUserFunction(msg) &#123;\n    try &#123;\n        if (DoUserID === &#39;&#39;) &#123;\n            tempIsAdmin = CheckID(msg, null, msg.author.id, function(msg, cmd, haveUserData) &#123;\n                if (haveUserData.IsAdmin) return true;\n                else return false;\n            &#125;);\n            if (tempIsAdmin) &#123;\n                nowDoFunction = addUserFunctionNow;\n                DoUserID = msg.author.id;\n                DoData = new Array;\n                msg.channel.send(&#39;請輸入要加入的使用者id&#39;);\n            &#125; else &#123;\n                msg.channel.send(&#39;此指令只有管理員可執行&#39;);\n            &#125;\n        &#125; else &#123;\n            msg.channel.send(&#39;有其他人正在使用續行中，請稍等&#39;);\n        &#125;\n    &#125; catch (err) &#123;\n        console.log(&#39;addUserFunctionError&#39;, err);\n    &#125;\n&#125;\n\n//將xxx加入身份組(續行方法)\nfunction addUserFunctionNow(msg) &#123;\n    try &#123;\n        switch (DoingCount) &#123;\n            case 0:\n                DoData.push(msg.content); //加入使用者id\n                DoData.push(msg.author.username); //加入申請者名字\n                msg.channel.send(`請輸入要加入的群組`);\n                break;\n            case 1:\n                DoData.push(msg.content); //加入群組\n                DoData.push(false); //IsAdmin預設False不可修改\n                msg.channel.send(`申請資料如下:\\n申請人 &lt;@$&#123;msg.author.id&#125;&gt;\\n使用者 &lt;@$&#123;DoData[0]&#125;&gt;\\n加入權限組 $&#123;DoData[2]&#125;\\n正確 Y / 錯誤 N`);\n                break;\n            case 2:\n                if (msg.content === &#39;Y&#39;) &#123;\n                    msg.channel.send(&#39;已確認，輸入資料中...&#39;);\n                    //與舊資料比對，已有此人資料變進行更新\n                    CheckID(msg, null, DoData[0], EditOldUserPower);\n                    GetGas.postUserPower(DoData, function(dataED) &#123;\n                        if (dataED) &#123;\n                            //bot內變數不會更新，手動更新\n                            UserPowerData.unshift(&#123;\n                                &#39;userID&#39;: DoData[0],\n                                &#39;userName&#39;: DoData[1],\n                                &#39;Joins&#39;: DoData[2],\n                                &#39;IsAdmin&#39;: DoData[3]\n                            &#125;);\n                            msg.channel.send(&#39;輸入完畢!&#39;);\n                        &#125; else &#123;\n                            msg.channel.send(&#39;資料輸入失敗，請重新嘗試&#39;);\n                        &#125;\n                        CloseAllDoingFunction();\n                    &#125;);\n                &#125; else if (msg.content === &#39;N&#39;) &#123;\n                    CloseAllDoingFunction();\n                    msg.channel.send(&#39;已取消行為，請重新下達指令&#39;)\n                &#125; else &#123;\n                    DoingCount--;\n                    msg.channel.send(&#39;無法辨識訊息，請輸入Y/N來選擇&#39;);\n                &#125;\n                break;\n        &#125;\n        if (DoUserID !== &#39;&#39;) DoingCount++;\n    &#125; catch (err) &#123;\n        CloseAllDoingFunction();\n        client.channels.fetch(msg.channel.id).then(channel =&gt; channel.send(&#39;發生意外錯誤，中斷指令行為，請重新下達指令!&#39;))\n        console.log(&#39;addUserFunctionNowError&#39;, err);\n    &#125;\n&#125;\n\n//用戶舊資料更新\nfunction EditOldUserPower(msg, cmd, haveUserData) &#123;\n    //二次確認\n    if (haveUserData) &#123;\n        if (DoData[0] == haveUserData.userID) &#123;\n            DoData[2] = haveUserData.Joins + &#39;;&#39; + DoData[2];\n            DoData[3] = haveUserData.IsAdmin;\n            return true;\n        &#125; else return false;\n    &#125; else return false;\n&#125;\n\n//用戶舊資料更新\nfunction DeleteOldUserPower(msg, cmd, haveUserData) &#123;\n    //二次確認\n    if (haveUserData) &#123;\n        if (DoData[0] == haveUserData.userID) &#123;\n            let str = haveUserData.Joins;\n            DoData[2] = str.toString().replace(DoData[2], &#39;&#39;);\n            DoData[3] = haveUserData.IsAdmin;\n            return true;\n        &#125; else return false;\n    &#125; else return false;\n&#125;\n\n//創建身分組&amp;增加身分組可tag對象\nfunction CreatePartyFunction(msg) &#123;\n    try &#123;\n        if (DoUserID === &#39;&#39;) &#123;\n            tempIsAdmin = CheckID(msg, null, msg.author.id, function(msg, cmd, haveUserData) &#123;\n                if (haveUserData) &#123;\n                    if (haveUserData.IsAdmin) return true;\n                    else return false;\n                &#125; else return false;\n            &#125;);\n            if (tempIsAdmin) &#123;\n                nowDoFunction = CreatePartyFunctionNow;\n                DoUserID = msg.author.id;\n                DoData = new Array;\n                msg.channel.send(&#39;請輸入身份組名稱&#39;);\n            &#125; else &#123;\n                msg.channel.send(&#39;此指令只有管理員可執行&#39;);\n            &#125;\n        &#125; else &#123;\n            msg.channel.send(&#39;有其他人正在使用續行中，請稍等&#39;);\n        &#125;\n    &#125; catch (err) &#123;\n        console.log(&#39;CreatePartyFunctionError&#39;, err);\n    &#125;\n&#125;\n\n//創建身分組&amp;增加身分組可tag對象(續行)\nfunction CreatePartyFunctionNow(msg) &#123;\n    try &#123;\n        switch (DoingCount) &#123;\n            case 0:\n                DoData.push(msg.content); //身分組ID\n                DoData.push(&#39;2&#39;); //type 2\n                msg.channel.send(`請輸入要加入的tagID`);\n                break;\n            case 1:\n                DoData.push(msg.content); //加入tagID\n                msg.channel.send(`申請資料如下:\\n申請人 &lt;@$&#123;msg.author.id&#125;&gt;\\n權限組 $&#123;DoData[0]&#125;\\ntagID $&#123;DoData[2]&#125;\\n正確 Y / 錯誤 N`);\n                break;\n            case 2:\n                if (msg.content === &#39;Y&#39;) &#123;\n                    msg.channel.send(&#39;已確認，輸入資料中...&#39;);\n                    //與舊資料比對，已有此人資料變進行更新\n                    EditOldPartyPower();\n                    GetGas.postPartyPower(DoData, function(dataED) &#123;\n                        if (dataED) &#123;\n                            //bot內變數不會更新，手動更新\n                            PartyPowerData.unshift(&#123;\n                                &#39;ID&#39;: DoData[0],\n                                &#39;type&#39;: DoData[1],\n                                &#39;Power&#39;: DoData[2]\n                            &#125;);\n                            msg.channel.send(&#39;輸入完畢!&#39;);\n                        &#125; else &#123;\n                            msg.channel.send(&#39;資料輸入失敗，請重新嘗試&#39;);\n                        &#125;\n                        CloseAllDoingFunction();\n                    &#125;);\n                &#125; else if (msg.content === &#39;N&#39;) &#123;\n                    CloseAllDoingFunction();\n                    msg.channel.send(&#39;已取消行為，請重新下達指令&#39;)\n                &#125; else &#123;\n                    DoingCount--;\n                    msg.channel.send(&#39;無法辨識訊息，請輸入Y/N來選擇&#39;);\n                &#125;\n                break;\n        &#125;\n        if (DoUserID !== &#39;&#39;) DoingCount++;\n    &#125; catch (err) &#123;\n        CloseAllDoingFunction();\n        client.channels.fetch(msg.channel.id).then(channel =&gt; channel.send(&#39;發生意外錯誤，中斷指令行為，請重新下達指令!&#39;))\n        console.log(&#39;CreatePartyFunctionNowError&#39;, err);\n    &#125;\n&#125;\n\n//權限組舊資料更新\nfunction EditOldPartyPower() &#123;\n    if (PartyPowerData) &#123;\n        const tempPartyData = PartyPowerData.find(element =&gt; &#123;\n            return element.ID == DoData[0];\n        &#125;)\n\n        if (tempPartyData !== undefined) &#123;\n            DoData[2] = tempPartyData.Power + &#39;;&#39; + DoData[2];\n        &#125;\n    &#125;\n&#125;\n\n//權限組舊資料更新\nfunction DeleteOldPartyPower() &#123;\n    if (PartyPowerData) &#123;\n        const tempPartyData = PartyPowerData.find(element =&gt; &#123;\n            return element.ID == DoData[0];\n        &#125;)\n\n        if (tempPartyData == undefined) &#123;\n            DoData[0] = &#39;&#39;;\n            DoData[1] = &#39;&#39;;\n            DoData[2] = &#39;&#39;;\n        &#125;\n    &#125;\n&#125;\n\n//從權限組中刪除使用者 OR 刪除權限組\nfunction DeleteTag(msg) &#123;\n    try &#123;\n        if (DoUserID === &#39;&#39;) &#123;\n            tempIsAdmin = CheckID(msg, null, msg.author.id, function(msg, cmd, haveUserData) &#123;\n                if (haveUserData.IsAdmin) return true;\n                else return false;\n            &#125;);\n            if (tempIsAdmin) &#123;\n                nowDoFunction = DeleteTagNow;\n                DoUserID = msg.author.id;\n                DoData = new Array;\n                msg.channel.send(&#39;請問要編輯使用者權限還是權限組?\\n1 使用者權限 / 2 權限組&#39;);\n            &#125; else &#123;\n                msg.channel.send(&#39;此指令只有管理員可執行&#39;);\n            &#125;\n        &#125; else &#123;\n            msg.channel.send(&#39;有其他人正在使用續行中，請稍等&#39;);\n        &#125;\n    &#125; catch (err) &#123;\n        console.log(&#39;DeleteTagError&#39;, err);\n    &#125;\n&#125;\n\n//從權限組中刪除使用者 OR 刪除權限組(續行)\nfunction DeleteTagNow(msg) &#123;\n    try &#123;\n        switch (DoingCount) &#123;\n            case 0:\n                switch (msg.content) &#123;\n                    case &#39;1&#39;:\n                        msg.channel.send(&#39;請輸入要編輯的使用者ID&#39;);\n                        break;\n                    case &#39;2&#39;:\n                        DoingCount = 10;\n                        msg.channel.send(&#39;請輸入要編輯的權限組&#39;);\n                        break;\n                    default:\n                        DoingCount--;\n                        msg.channel.send(&#39;無法辨識訊息，請輸入1/2來選擇&#39;);\n                        break;\n                &#125;\n                break;\n            case 1:\n                if (msg.content == &#39;N&#39;) &#123;\n                    CloseAllDoingFunction();\n                    msg.channel.send(&#39;指令關閉&#39;);\n                &#125; else &#123;\n                    if (CheckID(msg, null, msg.content, (msg, cmd, haveUserData) =&gt; &#123; return haveUserData &#125;)) &#123;\n                        DoData.push(msg.content); //userID\n                        DoData.push(msg.author.id); //userName\n                        msg.channel.send(&#39;請輸入要刪除的群組權限&#39;);\n                    &#125; else &#123;\n                        DoingCount--;\n                        msg.channel.send(&#39;此用戶不存在資料，請確認，如果要關閉指令請輸入 N&#39;);\n                    &#125;\n                &#125;\n                break;\n            case 2:\n                DoData.push(msg.content); // Power\n                DoData.push(false); // IsAdmin\n                msg.channel.send(`申請資料如下:\\n申請人 &lt;@$&#123;msg.author.id&#125;&gt;\\n使用者 &lt;@$&#123;DoData[0]&#125;&gt;\\n刪除權限組 $&#123;DoData[2]&#125;\\n正確 Y / 錯誤 N`);\n                break;\n            case 3:\n                if (msg.content === &#39;Y&#39;) &#123;\n                    msg.channel.send(&#39;已確認，輸入資料中...&#39;);\n                    //與舊資料比對，已有此人資料變進行更新\n                    CheckID(msg, null, DoData[0], DeleteOldUserPower);\n                    GetGas.postUserPower(DoData, function(dataED) &#123;\n                        if (dataED) &#123;\n                            //bot內變數不會更新，手動更新\n                            UserPowerData.unshift(&#123;\n                                &#39;userID&#39;: DoData[0],\n                                &#39;userName&#39;: DoData[1],\n                                &#39;Joins&#39;: DoData[2],\n                                &#39;IsAdmin&#39;: DoData[3]\n                            &#125;);\n                            msg.channel.send(&#39;輸入完畢!&#39;);\n                        &#125; else &#123;\n                            msg.channel.send(&#39;資料輸入失敗，請重新嘗試&#39;);\n                        &#125;\n                        CloseAllDoingFunction();\n                    &#125;);\n                &#125; else if (msg.content === &#39;N&#39;) &#123;\n                    CloseAllDoingFunction();\n                    msg.channel.send(&#39;已取消行為，請重新下達指令&#39;)\n                &#125; else &#123;\n                    DoingCount--;\n                    msg.channel.send(&#39;無法辨識訊息，請輸入Y/N來選擇&#39;);\n                &#125;\n                break;\n            case 11:\n                DoData.push(msg.content); //身分組ID\n                DoData.push(&#39;2&#39;); //type 2\n                DoData.push(&#39;&#39;);\n                msg.channel.send(`申請資料如下:\\n申請人 &lt;@$&#123;msg.author.id&#125;&gt;\\n刪除權限組 $&#123;DoData[0]&#125;\\n正確 Y / 錯誤 N`);\n                break;\n            case 12:\n                if (msg.content === &#39;Y&#39;) &#123;\n                    msg.channel.send(&#39;已確認，輸入資料中...&#39;);\n                    //與舊資料比對，沒有此身分組資料清除\n                    DeleteOldPartyPower();\n                    if (DoData[0] != &#39;&#39;) &#123;\n                        GetGas.postPartyPower(DoData, function(dataED) &#123;\n                            if (dataED) &#123;\n                                //bot內變數不會更新，手動更新\n                                PartyPowerData.unshift(&#123;\n                                    &#39;ID&#39;: DoData[0],\n                                    &#39;type&#39;: DoData[1],\n                                    &#39;Power&#39;: DoData[2]\n                                &#125;);\n                                msg.channel.send(&#39;輸入完畢!&#39;);\n                            &#125; else &#123;\n                                msg.channel.send(&#39;資料輸入失敗，請重新嘗試&#39;);\n                            &#125;\n                            CloseAllDoingFunction();\n                        &#125;);\n                    &#125; else &#123;\n                        msg.channel.send(&#39;輸入完畢!&#39;);\n                        CloseAllDoingFunction();\n                    &#125;\n                &#125; else if (msg.content === &#39;N&#39;) &#123;\n                    CloseAllDoingFunction();\n                    msg.channel.send(&#39;已取消行為，請重新下達指令&#39;)\n                &#125; else &#123;\n                    DoingCount--;\n                    msg.channel.send(&#39;無法辨識訊息，請輸入Y/N來選擇&#39;);\n                &#125;\n                break;\n        &#125;\n        if (DoUserID !== &#39;&#39;) DoingCount++;\n    &#125; catch (err) &#123;\n        CloseAllDoingFunction();\n        client.channels.fetch(msg.channel.id).then(channel =&gt; channel.send(&#39;發生意外錯誤，中斷指令行為，請重新下達指令!&#39;))\n        console.log(&#39;DeleteTagNowError&#39;, err);\n    &#125;\n&#125;\n\n//#endregion\n\n//#region 對話資料庫系統\nfunction BaseExcelFunction(msg) &#123;\n    const messageED = GetBaseExcelData(msg);\n    if (messageED) msg.channel.send(messageED);\n&#125;\n\n//#endregion\n\n//#region 子類方法\n//獲取頭像\nfunction GetMyAvatar(msg) &#123;\n    try &#123;\n        return &#123;\n            files: [&#123;\n                attachment: msg.users.author.displayAvatarURL(&#39;png&#39;, true),\n                name: &#39;avatar.jpg&#39;\n            &#125;]\n        &#125;;\n    &#125; catch (err) &#123;\n        console.log(&#39;GetMyAvatar,Error&#39;);\n    &#125;\n&#125;\n\n//BaseExcel字串比對\nfunction GetBaseExcelData(msg) &#123;\n    try &#123;\n        if (BaseExcelData) &#123;\n            const userMessage = msg.content;\n\n            e = BaseExcelData.filter(element =&gt; &#123;\n                return element.NAME === userMessage;\n            &#125;)\n\n            if (e.length != 0) return e[0].VALUE;\n            else return false;\n        &#125;\n    &#125; catch (err) &#123;\n        console.log(&#39;GetBaseExcelDataError&#39;, err);\n    &#125;\n&#125;\n\n//禁言系統判斷\nfunction IsShut(msg, tempPrefix) &#123;\n    //群組id\n    const guildID = msg.guild.id;\n    //頻道id\n    const channelID = msg.channel.id;\n    //當前狀態\n    let status = true;\n\n    //先判斷群組，群組判斷完判斷頻道(頻道權限優先於群組)\n    const guildIF = shup.Group.find(element =&gt; &#123;\n        if (element.GroupID == guildID) &#123;\n            return element.Power.indexOf(tempPrefix) !== -1;\n        &#125;\n        return false;\n    &#125;)\n\n    //找到資料 = 此群組存在Group中且Power存在此次指令代碼\n    if (guildIF !== undefined) &#123;\n        status = false;\n    &#125;\n\n    //頻道\n    const channelIF = shup.Channel.find(element =&gt; &#123;\n        if (element.ChannelID == channelID) &#123;\n            return true;\n        &#125;\n        return false;\n    &#125;)\n\n    //找到資料 = 此頻道存在Channel中\n    if (channelIF !== undefined) &#123;\n        //Power有此資料=&gt;禁用功能 無資料=&gt;不設限\n        if (channelIF.Power.indexOf(tempPrefix) !== -1) &#123;\n            status = false;\n        &#125; else &#123;\n            status = true;\n        &#125;\n    &#125;\n\n    return status;\n&#125;\n\n//ArrayIsEmpty\nfunction isEmptyObject(obj) &#123;\n    return !Object.keys(obj).length;\n&#125;\n\n//關閉續行方法\nfunction CloseAllDoingFunction() &#123;\n    nowDoFunction = false;\n    DoingCount = 0;\n    DoUserID = &#39;&#39;;\n    DoData = undefined;\n&#125;\n//#endregion\n</code></pre>\n",
            "tags": [
                "node.js",
                "bot",
                "discord",
                "discord.js",
                "教學",
                "12th鐵人賽"
            ]
        },
        {
            "id": "https://smilin.net/2020/09/29/12thDay29/",
            "url": "https://smilin.net/2020/09/29/12thDay29/",
            "title": "Day29 - tag控管機制(3)",
            "date_published": "2020-09-29T01:27:13.000Z",
            "content_html": "<p>昨天我們做好了 將使用者加入身份組指令<br>今天把 創建身分組的指令做好</p>\n<span id=\"more\"></span>\n\n<p>跟昨天一樣，請先開啟GAS，身分組的GAS叫做getPartyPower<br>新增以下</p>\n<p><img src=\"https://i.imgur.com/eqoYtRi.png\" alt=\"29-1\"></p>\n<pre><code>function doPost(e)&#123;\n  var para = e.parameter; // 存放 post 所有傳送的參數\n  \n  var id = &#39;1mQ6qTJfOs3Gv5--K9r87w56wmDc3hUcpHm5hF1YKTms&#39;; //抓取表單\n  var spreadsheet = SpreadsheetApp.openById(id); // Sheet id\n  var sheet1 = spreadsheet.getSheetByName(&quot;PartyPower&quot;); // 根據表格名稱取表\n  var rowLength = sheet1.getLastRow()-1;\n  var columnLength = sheet1.getLastColumn();\n  var data = sheet1.getRange(2,1,rowLength,columnLength).getValues(); // 取得的資料\n  var ID   = para.ID,\n      type = para.type,\n      Power    = para.Power;\n  \n  var upData = [];\n  \n  for(i=0;i&lt;=rowLength-1;i++)&#123;\n    upData = data[i]\n    if((upData[0]==ID) == false)&#123;\n      upData = undefined;\n    &#125;\n  \n  \n    if(upData != undefined)&#123;\n      sheet1.getRange(i+2, 1).setValue(ID);\n      sheet1.getRange(i+2, 2).setValue(type);\n      sheet1.getRange(i+2, 3).setValue(Power);\n      return ContentService.createTextOutput(upData).setMimeType(ContentService.MimeType.JSON);\n    &#125;\n  &#125;\n  \n  \n  sheet1.appendRow([ID,type,Power]); // 插入一列新的資料\n  var dataExportFormat = JSON.stringify(para);\n  return ContentService.createTextOutput(dataExportFormat).setMimeType(ContentService.MimeType.JSON);\n&#125;\n</code></pre>\n<p>加到auth.json</p>\n<p><img src=\"https://i.imgur.com/0brSMZw.png\" alt=\"29-2\"></p>\n<p>GetGas.js</p>\n<p><img src=\"https://i.imgur.com/9KlDFkj.png\" alt=\"29-3\"></p>\n<p>bot.js</p>\n<p><img src=\"https://i.imgur.com/oKcdCTg.png\" alt=\"29-4\"></p>\n<p><img src=\"https://i.imgur.com/nQgPf3p.png\" alt=\"29-5\"></p>\n<pre><code>//創建身分組&amp;增加身分組可tag對象(續行)\nfunction CreatePartyFunctionNow(msg) &#123;\n    try &#123;\n        switch (DoingCount) &#123;\n            case 0:\n                DoData.push(msg.content); //身分組ID\n                DoData.push(&#39;2&#39;); //type 2\n                msg.channel.send(`請輸入要加入的tagID`);\n                break;\n            case 1:\n                DoData.push(msg.content); //加入tagID\n                msg.channel.send(`申請資料如下:\\n申請人 &lt;@$&#123;msg.author.id&#125;&gt;\\n權限組 &lt;@$&#123;DoData[0]&#125;&gt;\\ntagID $&#123;DoData[2]&#125;\\n正確 Y / 錯誤 N`);\n                break;\n            case 2:\n                if (msg.content === &#39;Y&#39;) &#123;\n                    msg.channel.send(&#39;已確認，輸入資料中...&#39;);\n                    //與舊資料比對，已有此人資料變進行更新\n                    EditOldPartyPower();\n                    GetGas.postPartyPower(DoData, function(dataED) &#123;\n                        if (dataED) &#123;\n                            //bot內變數不會更新，手動更新\n                            PartyPowerData.unshift(&#123;\n                                &#39;ID&#39;: DoData[0],\n                                &#39;type&#39;: DoData[1],\n                                &#39;Power&#39;: DoData[2]\n                            &#125;);\n                            msg.channel.send(&#39;輸入完畢!&#39;);\n                        &#125; else &#123;\n                            msg.channel.send(&#39;資料輸入失敗，請重新嘗試&#39;);\n                        &#125;\n                        CloseAllDoingFunction();\n                    &#125;);\n                &#125; else if (msg.content === &#39;N&#39;) &#123;\n                    CloseAllDoingFunction();\n                    msg.channel.send(&#39;已取消行為，請重新下達指令&#39;)\n                &#125; else &#123;\n                    DoingCount--;\n                    msg.channel.send(&#39;無法辨識訊息，請輸入Y/N來選擇&#39;);\n                &#125;\n                break;\n        &#125;\n        if (DoUserID !== &#39;&#39;) DoingCount++;\n    &#125; catch (err) &#123;\n        CloseAllDoingFunction();\n        client.channels.fetch(msg.channel.id).then(channel =&gt; channel.send(&#39;發生意外錯誤，中斷指令行為，請重新下達指令!&#39;))\n        console.log(&#39;CreatePartyFunctionNowError&#39;, err);\n    &#125;\n&#125;\n</code></pre>\n<p><img src=\"https://i.imgur.com/FB6RfAd.png\" alt=\"29-6\"></p>\n<p>作法基本上跟上次新增使用者一樣<br>試著運行看看</p>\n<p><img src=\"https://i.imgur.com/x3Qx41S.png\" alt=\"29-7\"></p>\n<p><img src=\"https://i.imgur.com/Mf6vO49.png\" alt=\"29-8\"></p>\n<p><img src=\"https://i.imgur.com/VH2f5L2.png\" alt=\"29-9\"></p>\n<p>成功<br>明天就是最後一篇了，筆者會把刪除的指令做好<br>其實跟現在新增的作法是大同小異的，各位不彷試試看</p>\n<p>為了將CheckID與CheckParty的分工化更明確一點，因此有稍微修改程式碼<br>這邊貼上程式碼</p>\n<pre><code>//#region tag系統\nfunction TagFunction(msg, tempPrefix) &#123;\n    const cmd = msg.content.substring(prefix[tempPrefix].Value.length).split(&#39; &#39;); //以空白分割前綴以後的字串\n\n    switch (cmd[0]) &#123;\n        case &#39;AddUser&#39;: //將使用者加入身份組\n            addUserFunction(msg);\n            break;\n        case &#39;CreateParty&#39;: //創建身分組&amp;增加身分組可tag對象\n            CreatePartyFunction(msg);\n            break;\n        default: //身份組ID\n            tagOther(msg, cmd);\n            break;\n    &#125;\n&#125;\n\n//tag人\nfunction tagOther(msg, cmd) &#123;\n    CheckID(msg, cmd, msg.author.id, (msg, cmd, haveUserData) =&gt; &#123;\n        CheckParty(msg, cmd, haveUserData, SendTagMessage);\n    &#125;);\n&#125;\n\n//判斷此人有沒有登記資料\nfunction CheckID(msg, cmd, userID, OtherFunction) &#123;\n    const haveUserData = UserPowerData.find(element =&gt; &#123;\n        return element.userID == userID;\n    &#125;)\n\n    if (haveUserData !== undefined) &#123;\n        //有資料\n        return OtherFunction(msg, cmd, haveUserData);\n    &#125; else &#123;\n        return OtherFunction(msg, cmd, false);\n    &#125;\n&#125;\n\n//根據UserPower獲得Party\nfunction CheckParty(msg, cmd, haveUserData, OtherFunction) &#123;\n    let havePartyPower;\n    havePartyPower = PartyPowerData.filter(element =&gt; &#123;\n        if (haveUserData.Joins[i].indexOf(element.ID) != -1) &#123;\n            return element.Power.indexOf(cmd[1]) != -1\n        &#125;\n    &#125;)\n\n    if (isEmptyObject(havePartyPower)) &#123;\n        OtherFunction(msg, cmd, haveUserData, false);\n    &#125; else &#123;\n        OtherFunction(msg, cmd, haveUserData, havePartyPower);\n    &#125;\n&#125;\n\n//傳送訊息單獨實例\nfunction SendTagMessage(msg, cmd, haveUserData, havePartyPower) &#123;\n    if (haveUserData.IsAdmin) &#123;\n        msg.channel.send(`&lt;@&amp;$&#123;cmd[1]&#125;&gt;\\n來自管理員&lt;@$&#123;msg.author.id&#125;&gt;的指令呼叫`);\n    &#125; else if (havePartyPower) &#123;\n        msg.channel.send(`&lt;@&amp;$&#123;cmd[1]&#125;&gt;\\n來自&lt;@$&#123;msg.author.id&#125;&gt;的指令呼叫`);\n    &#125; else &#123;\n        msg.channel.send(&#39;無權限，請確認參數是否正確&#39;);\n    &#125;\n&#125;\n\n//將xxx加入身分組\nfunction addUserFunction(msg) &#123;\n    try &#123;\n        if (DoUserID === &#39;&#39;) &#123;\n            tempIsAdmin = CheckID(msg, null, msg.author.id, function(msg, cmd, haveUserData) &#123;\n                if (haveUserData.IsAdmin) return true;\n                else return false;\n            &#125;);\n            if (tempIsAdmin) &#123;\n                nowDoFunction = addUserFunctionNow;\n                DoUserID = msg.author.id;\n                DoData = new Array;\n                msg.channel.send(&#39;請輸入要加入的使用者id&#39;);\n            &#125; else &#123;\n                msg.channel.send(&#39;此指令只有管理員可執行&#39;);\n            &#125;\n        &#125; else &#123;\n            msg.channel.send(&#39;有其他人正在使用續行中，請稍等&#39;);\n        &#125;\n    &#125; catch (err) &#123;\n        console.log(&#39;addUserFunctionError&#39;, err);\n    &#125;\n&#125;\n\n//將xxx加入身份組(續行方法)\nfunction addUserFunctionNow(msg) &#123;\n    try &#123;\n        switch (DoingCount) &#123;\n            case 0:\n                DoData.push(msg.content); //加入使用者id\n                DoData.push(msg.author.username); //加入申請者名字\n                msg.channel.send(`請輸入要加入的群組`);\n                break;\n            case 1:\n                DoData.push(msg.content); //加入群組\n                DoData.push(false); //IsAdmin預設False不可修改\n                msg.channel.send(`申請資料如下:\\n申請人 &lt;@$&#123;msg.author.id&#125;&gt;\\n使用者 &lt;@$&#123;DoData[0]&#125;&gt;\\n加入權限組 $&#123;DoData[2]&#125;\\n正確 Y / 錯誤 N`);\n                break;\n            case 2:\n                if (msg.content === &#39;Y&#39;) &#123;\n                    msg.channel.send(&#39;已確認，輸入資料中...&#39;);\n                    //與舊資料比對，已有此人資料變進行更新\n                    CheckID(msg, null, DoData[0], EditOldUserPower);\n                    GetGas.postUserPower(DoData, function(dataED) &#123;\n                        if (dataED) &#123;\n                            //bot內變數不會更新，手動更新\n                            UserPowerData.unshift(&#123;\n                                &#39;userID&#39;: DoData[0],\n                                &#39;userName&#39;: DoData[1],\n                                &#39;Joins&#39;: DoData[2],\n                                &#39;IsAdmin&#39;: DoData[3]\n                            &#125;);\n                            msg.channel.send(&#39;輸入完畢!&#39;);\n                        &#125; else &#123;\n                            msg.channel.send(&#39;資料輸入失敗，請重新嘗試&#39;);\n                        &#125;\n                        CloseAllDoingFunction();\n                    &#125;);\n                &#125; else if (msg.content === &#39;N&#39;) &#123;\n                    CloseAllDoingFunction();\n                    msg.channel.send(&#39;已取消行為，請重新下達指令&#39;)\n                &#125; else &#123;\n                    DoingCount--;\n                    msg.channel.send(&#39;無法辨識訊息，請輸入Y/N來選擇&#39;);\n                &#125;\n                break;\n        &#125;\n        if (DoUserID !== &#39;&#39;) DoingCount++;\n    &#125; catch (err) &#123;\n        CloseAllDoingFunction();\n        client.channels.fetch(msg.channel.id).then(channel =&gt; channel.send(&#39;發生意外錯誤，中斷指令行為，請重新下達指令!&#39;))\n        console.log(&#39;addUserFunctionNowError&#39;, err);\n    &#125;\n&#125;\n\n//用戶舊資料更新\nfunction EditOldUserPower(msg, cmd, haveUserData) &#123;\n    //二次確認\n    if (haveUserData) &#123;\n        if (DoData[0] == haveUserData.userID) &#123;\n            DoData[2] = haveUserData.Joins + &#39;;&#39; + DoData[2];\n            DoData[3] = haveUserData.IsAdmin;\n            return true;\n        &#125; else return false;\n    &#125; else return false;\n&#125;\n\n//創建身分組&amp;增加身分組可tag對象\nfunction CreatePartyFunction(msg) &#123;\n    try &#123;\n        if (DoUserID === &#39;&#39;) &#123;\n            tempIsAdmin = CheckID(msg, null, msg.author.id, function(msg, cmd, haveUserData) &#123;\n                if (haveUserData) &#123;\n                    if (haveUserData.IsAdmin) return true;\n                    else return false;\n                &#125; else return false;\n            &#125;);\n            if (tempIsAdmin) &#123;\n                nowDoFunction = CreatePartyFunctionNow;\n                DoUserID = msg.author.id;\n                DoData = new Array;\n                msg.channel.send(&#39;請輸入身份組名稱&#39;);\n            &#125; else &#123;\n                msg.channel.send(&#39;此指令只有管理員可執行&#39;);\n            &#125;\n        &#125; else &#123;\n            msg.channel.send(&#39;有其他人正在使用續行中，請稍等&#39;);\n        &#125;\n    &#125; catch (err) &#123;\n        console.log(&#39;CreatePartyFunctionError&#39;, err);\n    &#125;\n&#125;\n\n//創建身分組&amp;增加身分組可tag對象(續行)\nfunction CreatePartyFunctionNow(msg) &#123;\n    try &#123;\n        switch (DoingCount) &#123;\n            case 0:\n                DoData.push(msg.content); //身分組ID\n                DoData.push(&#39;2&#39;); //type 2\n                msg.channel.send(`請輸入要加入的tagID`);\n                break;\n            case 1:\n                DoData.push(msg.content); //加入tagID\n                msg.channel.send(`申請資料如下:\\n申請人 &lt;@$&#123;msg.author.id&#125;&gt;\\n權限組 $&#123;DoData[0]&#125;\\ntagID $&#123;DoData[2]&#125;\\n正確 Y / 錯誤 N`);\n                break;\n            case 2:\n                if (msg.content === &#39;Y&#39;) &#123;\n                    msg.channel.send(&#39;已確認，輸入資料中...&#39;);\n                    //與舊資料比對，已有此人資料變進行更新\n                    EditOldPartyPower();\n                    GetGas.postPartyPower(DoData, function(dataED) &#123;\n                        if (dataED) &#123;\n                            //bot內變數不會更新，手動更新\n                            PartyPowerData.unshift(&#123;\n                                &#39;ID&#39;: DoData[0],\n                                &#39;type&#39;: DoData[1],\n                                &#39;Power&#39;: DoData[2]\n                            &#125;);\n                            msg.channel.send(&#39;輸入完畢!&#39;);\n                        &#125; else &#123;\n                            msg.channel.send(&#39;資料輸入失敗，請重新嘗試&#39;);\n                        &#125;\n                        CloseAllDoingFunction();\n                    &#125;);\n                &#125; else if (msg.content === &#39;N&#39;) &#123;\n                    CloseAllDoingFunction();\n                    msg.channel.send(&#39;已取消行為，請重新下達指令&#39;)\n                &#125; else &#123;\n                    DoingCount--;\n                    msg.channel.send(&#39;無法辨識訊息，請輸入Y/N來選擇&#39;);\n                &#125;\n                break;\n        &#125;\n        if (DoUserID !== &#39;&#39;) DoingCount++;\n    &#125; catch (err) &#123;\n        CloseAllDoingFunction();\n        client.channels.fetch(msg.channel.id).then(channel =&gt; channel.send(&#39;發生意外錯誤，中斷指令行為，請重新下達指令!&#39;))\n        console.log(&#39;CreatePartyFunctionNowError&#39;, err);\n    &#125;\n&#125;\n\n//權限組舊資料更新\nfunction EditOldPartyPower() &#123;\n    if (PartyPowerData) &#123;\n        const tempPartyData = PartyPowerData.find(element =&gt; &#123;\n            return element.ID == DoData[0];\n        &#125;)\n\n        if (tempPartyData !== undefined) &#123;\n            DoData[2] = tempPartyData.Power + &#39;;&#39; + DoData[2];\n        &#125;\n    &#125;\n&#125;\n\n//#endregion\n</code></pre>\n",
            "tags": [
                "node.js",
                "bot",
                "discord",
                "discord.js",
                "教學",
                "12th鐵人賽"
            ]
        },
        {
            "id": "https://smilin.net/2020/09/28/12thDay28/",
            "url": "https://smilin.net/2020/09/28/12thDay28/",
            "title": "Day28 - tag控管機制(2)",
            "date_published": "2020-09-28T01:25:39.000Z",
            "content_html": "<p>今天來把postAPI跟續行的框架與加入使用者至身份組的功能寫好</p>\n<span id=\"more\"></span>\n\n<p>請打開之前再google雲端上創建的GAS ， getUserPower</p>\n<p><img src=\"https://i.imgur.com/cPksdp2.png\" alt=\"28-1\"></p>\n<p>原本的程式寫在doGet方法，我們在doGet方法下新增一個doPost方法，然後寫上這些東西</p>\n<pre><code>function doPost(e)&#123;\n  var para = e.parameter; // 存放 post 所有傳送的參數\n  \n  var id = &#39;1mQ6qTJfOs3Gv5--K9r87w56wmDc3hUcpHm5hF1YKTms&#39;; //抓取表單\n  var spreadsheet = SpreadsheetApp.openById(id); // Sheet id\n  var sheet1 = spreadsheet.getSheetByName(&quot;UserPower&quot;); // 根據表格名稱取表\n  var rowLength = sheet1.getLastRow()-1;\n  var columnLength = sheet1.getLastColumn();\n  var data = sheet1.getRange(2,1,rowLength,columnLength).getValues(); // 取得的資料\n  var userID   = para.userID,\n      userName = para.userName,\n      Joins    = para.Joins,\n      IsAdmin  = para.IsAdmin;\n  \n  var upData = [];\n  \n  for(i=0;i&lt;=rowLength-1;i++)&#123;\n    upData = data[i]\n    if((upData[0]==userID) == false)&#123;\n      upData = undefined;\n    &#125;\n  \n  \n    if(upData != undefined)&#123;\n      sheet1.getRange(i+2, 1).setValue(userID);\n      sheet1.getRange(i+2, 2).setValue(userName);\n      sheet1.getRange(i+2, 3).setValue(Joins);\n      sheet1.getRange(i+2, 4).setValue(IsAdmin);\n      return ContentService.createTextOutput(upData).setMimeType(ContentService.MimeType.JSON);\n    &#125;\n  &#125;\n  \n  \n  sheet1.appendRow([userID,userName,Joins,IsAdmin]); // 插入一列新的資料\n  var dataExportFormat = JSON.stringify(para);\n  return ContentService.createTextOutput(dataExportFormat).setMimeType(ContentService.MimeType.JSON);\n&#125;\n</code></pre>\n<p>doGet與doPost是GAS默認的Get與Post方法<br>使用他的Url執行Get請求就會進doGet<br>反之post就會進doPost</p>\n<p>回到程序，一樣在auth加入url<br>雖然值跟Get方法時的Url一樣，不過這樣寫會比較好分辨，之後想改成兩個檔案也可以</p>\n<p><img src=\"https://i.imgur.com/znAkUYg.png\" alt=\"28-2\"></p>\n<p>因為我們要在post請求帶入參數，這邊將請求URL的宣告直接放到實作裡面<br>這樣在創建的同時也會帶入參數</p>\n<p><img src=\"https://i.imgur.com/tiDcUkk.png\" alt=\"28-3\"></p>\n<pre><code>exports.postUserPower = function(bodyData, callback) &#123;\n    const userPowerPost = &#123;\n        &#39;method&#39;: &#39;POST&#39;,\n        &#39;url&#39;: auth.Gas.Post.UserPower,\n        &#39;headers&#39;: &#123;&#125;,\n        form: &#123;\n            &#39;userID&#39;: bodyData[0],\n            &#39;userName&#39;: bodyData[1],\n            &#39;Joins&#39;: bodyData[2],\n            &#39;IsAdmin&#39;: bodyData[3]\n        &#125;\n    &#125;;\n    request(userPowerPost, function(error, response) &#123;\n        try &#123;\n            if (error) &#123;\n                console.log(&#39;postUserPowerError1&#39;, error);\n                callback(false);\n            &#125; else &#123;\n                callback(true);\n            &#125;\n        &#125; catch (err) &#123;\n            console.log(&#39;postUserPowerError2&#39;, err);\n            callback(false);\n        &#125;\n    &#125;);\n&#125;;\n</code></pre>\n<p>在全域變數(最上方)新增這四個東西</p>\n<p><img src=\"https://i.imgur.com/qJhS30L.png\" alt=\"28-4\"></p>\n<p>在子類方法(最下方)加入初始化方法</p>\n<p><img src=\"https://i.imgur.com/bSFGj1I.png\" alt=\"28-5\"></p>\n<p>在onMessage中間加入續行方法入口</p>\n<p><img src=\"https://i.imgur.com/4NE1BQC.png\" alt=\"28-6\"></p>\n<pre><code>    //續行方法\n    if (nowDoFunction &amp;&amp; msg.author.id === DoUserID) &#123;\n        nowDoFunction(msg);\n        return;\n    &#125;\n</code></pre>\n<p>在tag系統入口加入addUser</p>\n<p><img src=\"https://i.imgur.com/66thUHz.png\" alt=\"28-7\"></p>\n<p>實例addUserFunction</p>\n<p><img src=\"https://i.imgur.com/Fxh4bSy.png\" alt=\"28-8\"></p>\n<pre><code>//將xxx加入身分組\nfunction addUserFunction(msg) &#123;\n    try &#123;\n        if (DoUserID === &#39;&#39;) &#123;\n            nowDoFunction = addUserFunctionNow;\n            DoUserID = msg.author.id;\n            DoData = new Array;\n            msg.channel.send(&#39;請輸入要加入的使用者id&#39;);\n        &#125; else &#123;\n            msg.channel.send(&#39;有其他人正在使用續行中，請稍等&#39;);\n        &#125;\n    &#125; catch (err) &#123;\n        console.log(&#39;addUserFunctionError&#39;, err);\n    &#125;\n&#125;\n</code></pre>\n<p>實例addUserFunctionNow(續行方法)</p>\n<pre><code>//將xxx加入身份組(續行方法)\nfunction addUserFunctionNow(msg) &#123;\n    try &#123;\n        switch (DoingCount) &#123;\n            case 0:\n                DoData.push(msg.content); //加入使用者id\n                DoData.push(msg.author.username); //加入申請者名字\n                msg.channel.send(`請輸入要加入的群組`);\n                break;\n            case 1:\n                DoData.push(msg.content); //加入群組\n                DoData.push(false); //IsAdmin預設False不可修改\n                msg.channel.send(`申請資料如下:\\n申請人 &lt;@$&#123;msg.author.id&#125;&gt;\\n使用者 &lt;@$&#123;DoData[0]&#125;&gt;\\n加入權限組 $&#123;DoData[2]&#125;\\n正確 Y / 錯誤 N`);\n                break;\n            case 2:\n                if (msg.content === &#39;Y&#39;) &#123;\n                    msg.channel.send(&#39;已確認，輸入資料中...&#39;);\n                    //與舊資料比對，已有此人資料變進行更新\n                    CheckID(msg, null, EditOldUserPower, DoData[0]);\n                    GetGas.postUserPower(DoData, function(dataED) &#123;\n                        if (dataED) &#123;\n                            //bot內變數不會更新，手動更新\n                            UserPowerData.unshift(&#123;\n                                &#39;userID&#39;: DoData[0],\n                                &#39;userName&#39;: DoData[1],\n                                &#39;Joins&#39;: DoData[2],\n                                &#39;IsAdmin&#39;: DoData[3]\n                            &#125;);\n                            msg.channel.send(&#39;輸入完畢!&#39;);\n                        &#125; else &#123;\n                            msg.channel.send(&#39;資料輸入失敗，請重新嘗試&#39;);\n                        &#125;\n                        CloseAllDoingFunction();\n                    &#125;);\n                &#125; else if (msg.content === &#39;N&#39;) &#123;\n                    CloseAllDoingFunction();\n                    msg.channel.send(&#39;已取消行為，請重新下達指令&#39;)\n                &#125; else &#123;\n                    DoingCount--;\n                    msg.channel.send(&#39;無法辨識訊息，請輸入Y/N來選擇&#39;);\n                &#125;\n                break;\n        &#125;\n        if (DoUserID !== &#39;&#39;) DoingCount++;\n    &#125; catch (err) &#123;\n        CloseAllDoingFunction();\n        client.channels.fetch(msg.channel.id).then(channel =&gt; channel.send(&#39;發生意外錯誤，中斷指令行為，請重新下達指令!&#39;))\n        console.log(&#39;addUserFunctionNowError&#39;, err);\n    &#125;\n&#125;\n</code></pre>\n<p>微調CheckID與CheckParty<br>將userID的取值獨立，將admin判斷拉到CheckParty</p>\n<p><img src=\"https://i.imgur.com/EFqmBqa.png\" alt=\"28-9\"></p>\n<p><img src=\"https://i.imgur.com/6Oos50b.png\" alt=\"28-10\"></p>\n<p>實例EditOldUserPower</p>\n<p><img src=\"https://i.imgur.com/0HXohq7.png\" alt=\"28-11\"></p>\n<hr>\n<h1 id=\"測試環節\"><a href=\"#測試環節\" class=\"headerlink\" title=\"測試環節\"></a>測試環節</h1><p><img src=\"https://i.imgur.com/HWloU7g.png\" alt=\"28-12\"></p>\n<p><img src=\"https://i.imgur.com/dJplXOG.png\" alt=\"28-13\"></p>\n<p><img src=\"https://i.imgur.com/ppMXmB4.png\" alt=\"28-14\"> </p>\n<p><img src=\"https://i.imgur.com/EO9pkZt.png\" alt=\"28-15\"></p>\n<p>完成</p>\n<p>因為今天有修改到Day26的東西，這可能導致教學有點雜亂<br>底下附上tag系統目前的程式碼，當作彌補</p>\n<pre><code>//#region tag系統\nfunction TagFunction(msg, tempPrefix) &#123;\n    const cmd = msg.content.substring(prefix[tempPrefix].Value.length).split(&#39; &#39;); //以空白分割前綴以後的字串\n\n    switch (cmd[0]) &#123;\n        case &#39;addUser&#39;: //將使用者加入身份組\n            addUserFunction(msg);\n            break;\n        default: //身份組ID\n            CheckID(msg, cmd, CheckParty, msg.author.id);\n            break;\n    &#125;\n&#125;\n\n//判斷此人有沒有登記資料\nfunction CheckID(msg, cmd, OtherFunction, userID) &#123;\n    const haveUserData = UserPowerData.find(element =&gt; &#123;\n        return element.userID == userID;\n    &#125;)\n\n    if (haveUserData !== undefined) &#123;\n        //有資料\n        return OtherFunction(msg, cmd, haveUserData);\n    &#125; else &#123;\n        return false;\n    &#125;\n&#125;\n\n//根據UserPower獲得Party\nfunction CheckParty(msg, cmd, haveUserData) &#123;\n\n    if (haveUserData.IsAdmin) &#123;\n        //是管理員，直接做後續事情\n        return SendTagMessage(msg, `&lt;@&amp;$&#123;cmd[1]&#125;&gt;\\n來自管理員&lt;@$&#123;msg.author.id&#125;&gt;的指令呼叫`);\n    &#125;\n\n    let havePartyPower;\n    havePartyPower = PartyPowerData.filter(element =&gt; &#123;\n        if (haveUserData.Joins[i].indexOf(element.ID) != -1) &#123;\n            return element.Power.indexOf(cmd[1]) != -1\n        &#125;\n    &#125;)\n\n    if (isEmptyObject(havePartyPower)) &#123;\n        SendTagMessage(msg, &#39;無權限，請確認參數是否正確&#39;);\n    &#125; else &#123;\n        SendTagMessage(msg, `&lt;@&amp;$&#123;cmd[1]&#125;&gt;\\n來自&lt;@$&#123;msg.author.id&#125;&gt;的指令呼叫`);\n    &#125;\n&#125;\n\n//傳送訊息單獨實例\nfunction SendTagMessage(msg, data) &#123;\n    msg.channel.send(data);\n&#125;\n\n//將xxx加入身分組\nfunction addUserFunction(msg) &#123;\n    try &#123;\n        if (DoUserID === &#39;&#39;) &#123;\n            nowDoFunction = addUserFunctionNow;\n            DoUserID = msg.author.id;\n            DoData = new Array;\n            msg.channel.send(&#39;請輸入要加入的使用者id&#39;);\n        &#125; else &#123;\n            msg.channel.send(&#39;有其他人正在使用續行中，請稍等&#39;);\n        &#125;\n    &#125; catch (err) &#123;\n        console.log(&#39;addUserFunctionError&#39;, err);\n    &#125;\n&#125;\n\n//將xxx加入身份組(續行方法)\nfunction addUserFunctionNow(msg) &#123;\n    try &#123;\n        switch (DoingCount) &#123;\n            case 0:\n                DoData.push(msg.content); //加入使用者id\n                DoData.push(msg.author.username); //加入申請者名字\n                msg.channel.send(`請輸入要加入的群組`);\n                break;\n            case 1:\n                DoData.push(msg.content); //加入群組\n                DoData.push(false); //IsAdmin預設False不可修改\n                msg.channel.send(`申請資料如下:\\n申請人 &lt;@$&#123;msg.author.id&#125;&gt;\\n使用者 &lt;@$&#123;DoData[0]&#125;&gt;\\n加入權限組 $&#123;DoData[2]&#125;\\n正確 Y / 錯誤 N`);\n                break;\n            case 2:\n                if (msg.content === &#39;Y&#39;) &#123;\n                    msg.channel.send(&#39;已確認，輸入資料中...&#39;);\n                    //與舊資料比對，已有此人資料變進行更新\n                    CheckID(msg, null, EditOldUserPower, DoData[0]);\n                    GetGas.postUserPower(DoData, function(dataED) &#123;\n                        if (dataED) &#123;\n                            //bot內變數不會更新，手動更新\n                            UserPowerData.unshift(&#123;\n                                &#39;userID&#39;: DoData[0],\n                                &#39;userName&#39;: DoData[1],\n                                &#39;Joins&#39;: DoData[2],\n                                &#39;IsAdmin&#39;: DoData[3]\n                            &#125;);\n                            msg.channel.send(&#39;輸入完畢!&#39;);\n                        &#125; else &#123;\n                            msg.channel.send(&#39;資料輸入失敗，請重新嘗試&#39;);\n                        &#125;\n                        CloseAllDoingFunction();\n                    &#125;);\n                &#125; else if (msg.content === &#39;N&#39;) &#123;\n                    CloseAllDoingFunction();\n                    msg.channel.send(&#39;已取消行為，請重新下達指令&#39;)\n                &#125; else &#123;\n                    DoingCount--;\n                    msg.channel.send(&#39;無法辨識訊息，請輸入Y/N來選擇&#39;);\n                &#125;\n                break;\n        &#125;\n        if (DoUserID !== &#39;&#39;) DoingCount++;\n    &#125; catch (err) &#123;\n        CloseAllDoingFunction();\n        client.channels.fetch(msg.channel.id).then(channel =&gt; channel.send(&#39;發生意外錯誤，中斷指令行為，請重新下達指令!&#39;))\n        console.log(&#39;addUserFunctionNowError&#39;, err);\n    &#125;\n&#125;\n\n//用戶舊資料更新\nfunction EditOldUserPower(msg, cmd, haveUserData) &#123;\n    //二次確認\n    if (DoData[0] == haveUserData.userID) &#123;\n        DoData[2] = haveUserData.Joins + &#39;;&#39; + DoData[2];\n        DoData[3] = haveUserData.IsAdmin;\n        return true;\n    &#125; else return false;\n&#125;\n//#endregion\n</code></pre>\n",
            "tags": [
                "node.js",
                "bot",
                "discord",
                "discord.js",
                "教學",
                "12th鐵人賽"
            ]
        },
        {
            "id": "https://smilin.net/2020/09/27/12thDay27/",
            "url": "https://smilin.net/2020/09/27/12thDay27/",
            "title": "Day27 - tag控管 - 續行方法解說",
            "date_published": "2020-09-27T07:59:10.000Z",
            "content_html": "<p>昨天我們實作了tag身份組功能<br>使用者透過機器人tag一整個身份組的功能<br>我們希望還可以有</p>\n<ul>\n<li>創建身分組的指令</li>\n<li>將使用者加入身份組指令</li>\n<li>刪除身分組的指令</li>\n<li>將使用者從某個身份組中刪除的指令</li>\n</ul>\n<span id=\"more\"></span>\n\n<p>這些功能與以往的做法不同<br>API會從原本的Get改成使用Post方法<br>bot程序會需要用到續行方法，來彌補當前機器人框架無法實現的功能</p>\n<h1 id=\"續行方法\"><a href=\"#續行方法\" class=\"headerlink\" title=\"續行方法\"></a>續行方法</h1><p>程式上並沒有這種寫法的稱呼，只是在當前框架下，我給這個寫法的一種叫法而已</p>\n<p>目前我們機器人指令的呼叫方式基本模式是</p>\n<p>前綴字 + 指令 + 間隔符 + 參數(如果有)</p>\n<p>如果前綴字沒有匹配，就對資料庫做判斷，是否有相同觸發字來自動回應(卡米狗模式)</p>\n<p>這種做法會面臨到一個問題，指令都是在一行內完成的</p>\n<p>如果希望先下達指令，等待機器人給予回饋，再繼續輸入指令呢?</p>\n<p>沒錯，使用者的操作會變得相對複雜<br>假設一個指令叫做 !AFK ，然後要輸入三次且三次的參數都正確，機器人才會醒來<br>那使用者就要連續輸入三次</p>\n<p>!AFK 1<br>!AFK 2<br>!AFK 3</p>\n<p>而不是</p>\n<p>!AFK<br>1<br>2<br>3</p>\n<p>讓使用者不斷重複的輸入指令顯然不是我們希望的</p>\n<p>因此我們會需要使用續行，讓BOT觸發到特定指令後，綁定此用戶進行接下來的行為</p>\n<p>明天我們會實作postAPI，以及將 將使用者加入特定身分組的功能 寫好<br>如果篇幅足夠會再講 將使用者從某個身份組中刪除</p>\n",
            "tags": [
                "node.js",
                "bot",
                "discord",
                "discord.js",
                "教學",
                "12th鐵人賽"
            ]
        },
        {
            "id": "https://smilin.net/2020/09/26/12thDay26/",
            "url": "https://smilin.net/2020/09/26/12thDay26/",
            "title": "Day26 - tag控管機制(1)",
            "date_published": "2020-09-26T01:54:26.000Z",
            "content_html": "<p>昨天我們描繪了權限系統的架構，今天來建立身份組環境</p>\n<span id=\"more\"></span>\n\n<p>打開我們之前的試算表，新增兩個table</p>\n<p><img src=\"https://i.imgur.com/uoHRTQ9.png\" alt=\"26-1\"></p>\n<p>UserPower<br>代表成員table</p>\n<p>userID<br>discord的userID，主要用來辨識訊息方是否是此用戶</p>\n<p>userName<br>用處一樣不大，給人看的</p>\n<p>Joins<br>表示此用戶有哪些身份組的權限，筆者打算之後把所有身份都寫在這欄，用分號來做區隔</p>\n<p>IsAdmin<br>管理員開關，開啟後不做任何身份組判斷，可以使用任何功能</p>\n<p>下圖中，筆者的userID有E有+的，這是Excel自動給予的格式，可以在左上角看到實際數值，讀取時仍然是讀取165753385385984000，不用修改</p>\n<p><img src=\"https://i.imgur.com/2ilbHq9.png\" alt=\"26-2\"></p>\n<p>PartyPower<br>代表身份組table</p>\n<p>ID<br>該身份組的ID，使用者透過這個ID來判斷自己有哪些權限</p>\n<p>type<br>代表這個身份組的類型<br>目前暫定1是禁言類身份組，2是tag權限身份組</p>\n<p>Power<br>代表實際可行駛的權限，會根據type的不同有不同的含意<br>在tag權限下，Power帶入tagID，代表可以行使此tag<br>這邊帶入Power的是身份組ID</p>\n<p><img src=\"https://i.imgur.com/uNgxfC1.png\" alt=\"26-3\"></p>\n<p>教一下手動獲取身份組ID</p>\n<p>把人點開，對身份組右鍵</p>\n<p><img src=\"https://i.imgur.com/Z2t6akk.png\" alt=\"26-4\"></p>\n<p>或是先拉出tag，然後在tag前方加上一個反斜線</p>\n<p><img src=\"https://i.imgur.com/vtlv8pE.png\" alt=\"26-5\"></p>\n<p><img src=\"https://i.imgur.com/tlpvlge.png\" alt=\"26-6\"></p>\n<p>如果以上操作遇到問題，甚至是UserID也抓不到<br>可以看一下<a href=\"https://support.discord.com/hc/zh-tw/articles/206346498-%E6%88%91%E5%9C%A8%E5%93%AA%E8%A3%A1%E5%8F%AF%E4%BB%A5%E6%89%BE%E5%88%B0%E6%88%91%E7%9A%84%E7%94%A8%E6%88%B6-%E6%9C%8D%E5%8B%99%E5%99%A8-%E6%B6%88%E6%81%AFID-\">這篇文章</a></p>\n<p>或是找找怎麼開啟Discord的開發者模式</p>\n<hr>\n<p>再來我們要新增兩個GAS檔案</p>\n<p><img src=\"https://i.imgur.com/L7WOiyD.png\" alt=\"26-7\"></p>\n<pre><code>function doGet(e) &#123;\n  var id = &#39;你的ID&#39;; //抓取表單\n  var spreadsheet = SpreadsheetApp.openById(id); // Sheet id\n  var sheet = spreadsheet.getSheetByName(&quot;UserPower&quot;); // 根據表格名稱取表\n  var rowLength = sheet.getLastRow()-1; //取行長度\n  var columnLength = sheet.getLastColumn(); //取列長度\n  var data = sheet.getRange(2,1,rowLength,columnLength).getValues(); // 取得的資料\n  \n  var dataExport = [];\n  \n  for(i in data)&#123;\n    if(data[i][0] != &quot;&quot;)&#123;\n    dataExport[i] = &#123;\n      userID:     data[i][0],\n      userName:   data[i][1],\n      Joins:   data[i][2],\n      IsAdmin: data[i][3]\n      &#125;\n    &#125;\n  &#125;\n  \n  \n  var dataExportFormat = JSON.stringify(dataExport);\n  return ContentService.createTextOutput(dataExportFormat).setMimeType(ContentService.MimeType.JSON);\n&#125;\n</code></pre>\n<p><img src=\"https://i.imgur.com/7P09NvS.png\" alt=\"26-8\"></p>\n<pre><code>function doGet(e) &#123;\n  var id = &#39;你的ID&#39;; //抓取表單\n  var spreadsheet = SpreadsheetApp.openById(id); // Sheet id\n  var sheet = spreadsheet.getSheetByName(&quot;PartyPower&quot;); // 根據表格名稱取表\n  var rowLength = sheet.getLastRow()-1; //取行長度\n  var columnLength = sheet.getLastColumn(); //取列長度\n  var data = sheet.getRange(2,1,rowLength,columnLength).getValues(); // 取得的資料\n  \n  var dataExport = [];\n  \n  for(i in data)&#123;\n    if(data[i][0] != &quot;&quot;)&#123;\n    dataExport[i] = &#123;\n      ID:     data[i][0],\n      type:   data[i][1],\n      Power:   data[i][2]\n      &#125;\n    &#125;\n  &#125;\n  \n  \n  var dataExportFormat = JSON.stringify(dataExport);\n  return ContentService.createTextOutput(dataExportFormat).setMimeType(ContentService.MimeType.JSON);\n&#125;\n</code></pre>\n<p>記得都要存檔後，發佈成網路應用，獲取URL</p>\n<p><img src=\"https://i.imgur.com/iohSLWG.png\" alt=\"26-9\"></p>\n<p>(之前示範JSONArray的[]，可以拿掉)<br>跟baseExcel一樣，我們會希望bot在啟動時就把表都讀取進來，從雲端下載成本地db的感覺，順便做資料二次處理</p>\n<p><img src=\"https://i.imgur.com/s3bibHM.png\" alt=\"26-10\"></p>\n<pre><code>const userPower = &#123;\n    &#39;method&#39;: &#39;GET&#39;,\n    &#39;url&#39;: auth.Gas.Get[0].UserPower,\n    &#39;headers&#39;: &#123;&#125;\n&#125;;\n\nconst partyPower = &#123;\n    &#39;method&#39;: &#39;GET&#39;,\n    &#39;url&#39;: auth.Gas.Get[0].PartyPower,\n    &#39;headers&#39;: &#123;&#125;\n&#125;;\n</code></pre>\n<p><img src=\"https://i.imgur.com/hykI0wE.png\" alt=\"26-11\"></p>\n<p><img src=\"https://i.imgur.com/2K8yobJ.png\" alt=\"26-12\"></p>\n<pre><code>exports.getUserPower = function(callback) &#123;\n    let backValue = new Array;\n    request(userPower, function(error, response) &#123;\n        try &#123;\n            if (error) &#123;\n                console.log(&#39;getUserPowerError1&#39;, error);\n                callback(false);\n            &#125; else &#123;\n                const data = JSON.parse(response.body); //接收回傳(response)的body\n                for (i in data) &#123;\n                    backValue.push(data[i]);\n                    backValue[i].Joins = backValue[i].Joins.split(&#39;;&#39;);\n                &#125;\n                callback(backValue);\n            &#125;\n        &#125; catch (err) &#123;\n            console.log(&#39;getUserPowerError2&#39;, err);\n            callback(false);\n        &#125;\n    &#125;);\n&#125;;\n\nexports.getPartyPower = function(callback) &#123;\n    let backValue = new Array;\n    request(partyPower, function(error, response) &#123;\n        try &#123;\n            if (error) &#123;\n                console.log(&#39;getPartyPowerError1&#39;, error);\n                callback(false);\n            &#125; else &#123;\n                const data = JSON.parse(response.body); //接收回傳(response)的body\n                for (i in data) &#123;\n                    backValue.push(data[i]);\n                    backValue[i].Power = backValue[i].Power.split(&#39;;&#39;);\n                &#125;\n                callback(backValue);\n            &#125;\n        &#125; catch (err) &#123;\n            console.log(&#39;getPartyPowerError2&#39;, err);\n            callback(false);\n        &#125;\n    &#125;);\n&#125;;\n</code></pre>\n<p><img src=\"https://i.imgur.com/PEI3XAU.png\" alt=\"26-13\"></p>\n<p>(開始變成callback地獄了)</p>\n<p>資料都接到也處理好了，再來要用這些資料實作功能</p>\n<p>增加指令列表的一個新系統</p>\n<p><img src=\"https://i.imgur.com/8g2yKAQ.png\" alt=\"26-14\"></p>\n<p>在message事件新增入口</p>\n<p><img src=\"https://i.imgur.com/5k6UBOp.png\" alt=\"26-15\"></p>\n<p>然後做出實際功能</p>\n<p><img src=\"https://i.imgur.com/f4FEeTh.png\" alt=\"26-16\"></p>\n<pre><code>//#region tag系統\nfunction TagFunction(msg, tempPrefix) &#123;\n    const cmd = msg.content.substring(prefix[tempPrefix].Value.length).split(&#39; &#39;); //以空白分割前綴以後的字串\n\n    switch (cmd[0]) &#123;\n        case &#39;其餘指令&#39;:\n            break;\n        default: //身份組ID\n            CheckID(msg, cmd, CheckParty);\n            break;\n    &#125;\n&#125;\n\n//判斷此人有沒有登記資料\nfunction CheckID(msg, cmd, OtherFunction) &#123;\n    const haveUserData = UserPowerData.find(element =&gt; &#123;\n        return element.userID == msg.author.id;\n    &#125;)\n\n    if (haveUserData !== undefined) &#123;\n        //有資料\n        if (haveUserData.IsAdmin) &#123;\n            //是管理員，直接做後續事情\n            return SendTagMessage(msg, `&lt;@&amp;$&#123;cmd[1]&#125;&gt;\\n來自管理員&lt;@$&#123;msg.author.id&#125;&gt;的指令呼叫`);\n        &#125; else &#123;\n            //不是管理員，先看有甚麼群組\n            return OtherFunction(msg, cmd, haveUserData);\n        &#125;\n    &#125;\n&#125;\n\n//根據UserPower獲得Party\nfunction CheckParty(msg, cmd, haveUserData) &#123;\n    let havePartyPower;\n    havePartyPower = PartyPowerData.filter(element =&gt; &#123;\n        if (haveUserData.Joins[i].indexOf(element.ID) != -1) &#123;\n            return element.Power.indexOf(cmd[1]) != -1\n        &#125;\n    &#125;)\n\n    if (isEmptyObject(havePartyPower)) &#123;\n        SendTagMessage(msg, &#39;無權限，請確認參數是否正確&#39;);\n    &#125; else &#123;\n        SendTagMessage(msg, `&lt;@&amp;$&#123;cmd[1]&#125;&gt;\\n來自&lt;@$&#123;msg.author.id&#125;&gt;的指令呼叫`);\n    &#125;\n&#125;\n\n//傳送訊息單獨實例\nfunction SendTagMessage(msg, data) &#123;\n    msg.channel.send(data);\n&#125;\n</code></pre>\n<p>最後補個判斷Array是不是空集合的小function</p>\n<p><img src=\"https://i.imgur.com/LWubzzI.png\" alt=\"26-17\"></p>\n<hr>\n<p>大致解說一下</p>\n<p><img src=\"https://i.imgur.com/I4egiAN.png\" alt=\"26-18\"></p>\n<p>Tag系統的入口function<br>跟其他系統一樣，判斷要使用甚麼指令<br>今天先把預設(default)指令，也就是tag身分組做出來</p>\n<p><img src=\"https://i.imgur.com/leRaRUt.png\" alt=\"26-19\"></p>\n<p>檢查UserPower中是否有此人資料，以及是否是管理員<br>如果有資料且不是管理員，繼續檢查其所屬身份組權限</p>\n<p><img src=\"https://i.imgur.com/5u8N8DC.png\" alt=\"26-20\"></p>\n<p>檢查身份組中是否有權限符合這次要tag的對象id，有的話代表此次指令滿足權限，給予tag</p>\n<p>我們跑看看</p>\n<p><img src=\"https://i.imgur.com/R4VEGBa.png\" alt=\"26-21\"></p>\n<p>成功</p>\n",
            "tags": [
                "node.js",
                "bot",
                "discord",
                "discord.js",
                "教學",
                "12th鐵人賽"
            ]
        },
        {
            "id": "https://smilin.net/2020/09/25/12thDay25/",
            "url": "https://smilin.net/2020/09/25/12thDay25/",
            "title": "Day25 - 權限系統規格",
            "date_published": "2020-09-25T01:42:13.000Z",
            "content_html": "<p>最近在編寫群組權限相關的功能，就說說這個吧</p>\n<span id=\"more\"></span>\n\n<p>先說明此功能需求情境:</p>\n<p>群組人數過多，管理層不希望群組人員可以使用 every 或 身分組 或 頻道等會群體呼叫的tag</p>\n<p>但又希望在必要的時候，其他人可以使用此功能</p>\n<p>因此希望將此權限關閉，並且給予機器人此權限<br>透過機器人做二次權限管理，並且對使用人與時間等進行紀錄</p>\n<hr>\n<p>為了完成需求，我們假設機器人權限是admin，我們需要…</p>\n<p>三層身份組<br>群主-&gt;管理員-&gt;自定義身份<br>不是dc的身份組，是寫在機器人內的身份組<br>身分組內有此人id-&gt;可以行使此身份組下所開通的功能<br>例如管理員身份組下的人可以指派新的身份組，此身份組可以使用哪幾種tag<br>要把誰加入身份組等</p>\n<p>指派管理員<br>可以將指定人員加入管理員身份組<br>此指令只有群主身份組可以行使</p>\n<p>創建新身份組<br>創建自定義的身份組，會給予一組id，後續此id代表身份組</p>\n<p>修改身份組名稱<br>修改身份組名稱，便於管理，參數需帶入身份組id</p>\n<p>新增身份組可tag內容<br>新增身份組內可以tag的類型，參數需帶入身份組id與要tag內容的id</p>\n<p>刪除身分組可tag內容<br>同上</p>\n<p>新增身份組成員<br>將群組成員加入身份組，參數帶入身份組id與成員id</p>\n<p>刪除身份組成員<br>同上</p>\n<p>使用tag<br>透過bot tag指定id，參數需帶入tagID，可額外帶入要說的話</p>\n",
            "tags": [
                "node.js",
                "bot",
                "discord",
                "discord.js",
                "教學",
                "12th鐵人賽"
            ]
        },
        {
            "id": "https://smilin.net/2020/09/24/12thDay24/",
            "url": "https://smilin.net/2020/09/24/12thDay24/",
            "title": "Day24 - 愛麗絲安靜!",
            "date_published": "2020-09-24T02:58:46.000Z",
            "content_html": "<p>今天想教怎麼讓機器人安靜&#x2F;啟動<br>這樣才能說之後想教的東西</p>\n<span id=\"more\"></span>\n\n<h1 id=\"情境描述\"><a href=\"#情境描述\" class=\"headerlink\" title=\"情境描述\"></a>情境描述</h1><p>機器人需要有個控制是否啟動的開關<br>可設定在該群組 or 頻道是否可以接收指令</p>\n<p>因為我們的機器人會有多組系統(文字回答&amp;音樂系統)<br>會希望再額外設定可以在指定的群組 or 頻道是否可以接收特定系統的指令</p>\n<h1 id=\"實作開始\"><a href=\"#實作開始\" class=\"headerlink\" title=\"實作開始\"></a>實作開始</h1><p>首先請先幫我新建一個JSON檔案，叫做shup.json…或是你喜歡的名字xD</p>\n<p><img src=\"https://i.imgur.com/A3FgZSp.png\" alt=\"24-1\"></p>\n<p>記得JSON檔案都要放在JSONHome喔</p>\n<p>type<br>型態，代表這一筆JSONObject是甚麼類型<br>目前還用不到，都設1就好</p>\n<p>GroupID<br>群組ID，主要給後續判定的部份</p>\n<p>GroupName<br>群組名稱，用處不大、主要給使用者好分辨的</p>\n<p>Power<br>代表不可使用的權限，後面會一邊寫一邊解說</p>\n<p>禁言指令，顧名思義、希望機器人是否被禁言的開關<br>這開關需要放在所有指令之前，這樣才可以判斷出內容是否需要被禁止</p>\n<p>老樣子，我們要先引入json</p>\n<p><img src=\"https://i.imgur.com/P7TjmyD.png\" alt=\"24-2\"></p>\n<p>放在message事件的上方，當判斷權限為false，就停止後續行為</p>\n<p><img src=\"https://i.imgur.com/Ijtpyyk.png\" alt=\"24-3\"></p>\n<p>接著我們實作IsShut<br>IsShut根據shup.json，先判斷訊息群組&amp;訊息有沒有資料，再來判斷資料中存不存在tempPrefix，存在的話就要禁用功能，因為默認不存在時文檔中不會有資料，自然就不該設限</p>\n<pre><code>//禁言系統判斷\nfunction IsShut(msg, tempPrefix) &#123;\n    //群組id\n    const guildID = msg.guild.id;\n    //頻道id\n    const channelID = msg.channel.id;\n    //當前狀態\n    let status = true;\n\n    //先判斷群組，群組判斷完判斷頻道(頻道權限優先於群組)\n    const guildIF = shup.Group.find(element =&gt; &#123;\n        if (element.GroupID == guildID) &#123;\n            return element.Power.indexOf(tempPrefix) !== -1;\n        &#125;\n        return false;\n    &#125;)\n\n    //找到資料 = 此群組存在Group中且Power存在此次指令代碼\n    if (guildIF !== undefined) &#123;\n        status = false;\n    &#125;\n\n    //頻道\n    const channelIF = shup.Channel.find(element =&gt; &#123;\n        if (element.ChannelID == channelID) &#123;\n            return true;\n        &#125;\n        return false;\n    &#125;)\n\n    //找到資料 = 此頻道存在Channel中\n    if (channelIF !== undefined) &#123;\n        //Power有此資料=&gt;禁用功能 無資料=&gt;不設限\n        if (channelIF.Power.indexOf(tempPrefix) !== -1) &#123;\n            status = false;\n        &#125; else &#123;\n            status = true;\n        &#125;\n    &#125;\n\n    return status;\n&#125;\n</code></pre>\n<p>接著我們將資料實際key入shup.json看看</p>\n<p><img src=\"https://i.imgur.com/r2YX14O.png\" alt=\"24-4\"></p>\n<p>不知道同學有沒有看出Power的判斷依據了?</p>\n<p><img src=\"https://i.imgur.com/IQw9uKQ.png\" alt=\"24-5\"></p>\n<p>沒錯，就是依據prefix時設置的各系統代表ID</p>\n<p>我們試著跑看看</p>\n<p><img src=\"https://i.imgur.com/fPPlTwE.png\" alt=\"24-6\"></p>\n<p>另一個頻道</p>\n<p><img src=\"https://i.imgur.com/uV9zJ4q.png\" alt=\"24-7\"></p>\n<p>大成功~<br>這樣就做到各頻道各功能權限設置了</p>\n<p>不過存在一些問題<br>例如放在預設(default)的資料庫文字比對功能要怎麼判，應該是預設的-1吧<br>如果是-1要怎麼判斷呢?</p>\n<p>以及目前這樣的做法只做到判斷禁言功能的實作，還沒有辦法在前台讓使用者手動新增</p>\n<p>這部份筆者先賣個關子，各位可以嘗試寫看看，明天我們繼續做別的功能，之後再繞回來</p>\n",
            "tags": [
                "node.js",
                "bot",
                "discord",
                "discord.js",
                "教學",
                "12th鐵人賽"
            ]
        },
        {
            "id": "https://smilin.net/2020/09/23/12thDay23/",
            "url": "https://smilin.net/2020/09/23/12thDay23/",
            "title": "Day23 - 音樂系統的歌單批量載入(額外)",
            "date_published": "2020-09-23T07:04:44.000Z",
            "content_html": "<p>昨天我們把音樂系統的多群組支援做好了<br>今天想講一下怎麼直接導入歌單</p>\n<span id=\"more\"></span>\n\n<p>首先請在專案目錄下的終端機安裝</p>\n<pre><code>npm install ytpl\n</code></pre>\n<p><img src=\"https://i.imgur.com/Ugc2fg4.png\" alt=\"23-1\"> </p>\n<p>安裝完成後，我們打開看package.json</p>\n<p><img src=\"https://i.imgur.com/BZIUj5U.png\" alt=\"23-2\"> </p>\n<p>最後一行出現了ytpl<br>請到這個網站比對ytpl的版本，如果像筆者一樣版本過低的話，請將package.json內的ytpl版本拉高，然後更新一次ytpl<br><a href=\"https://www.npmjs.com/package/ytpl\">https://www.npmjs.com/package/ytpl</a></p>\n<p><img src=\"https://i.imgur.com/prueQ8r.png\" alt=\"23-3\"> </p>\n<p>官方文檔版本1.0.1</p>\n<p><img src=\"https://i.imgur.com/zDoQ0ox.png\" alt=\"23-4\"> </p>\n<p>手動把0.3.0改成1.0.1然後下指令</p>\n<p><img src=\"https://i.imgur.com/XAAeYn1.png\" alt=\"23-5\"> </p>\n<pre><code>npm update ytpl\n</code></pre>\n<p>這樣就會更新你的ytpl函式庫</p>\n<hr>\n<p>一安裝完就去確認版本是否最新，是因為舊版本的ytpl在抓取歌單資料時十分不穩，甚至有可能直接被yt擋下</p>\n<p>原因不明，但這道理可以套到ytdl-core上，之後同學們有任何問題都可以先更新版本看看</p>\n<hr>\n<p>更新好後，我們在bot.js引用ytpl</p>\n<p><img src=\"https://i.imgur.com/saOcdBI.png\" alt=\"23-6\"> </p>\n<p>在音樂指令底下加入歌單載入功能</p>\n<p><img src=\"https://i.imgur.com/r8rRLh7.png\" alt=\"23-7\">  </p>\n<pre><code>//?playList\nasync function playListMusic(guildID, msg) &#123;\n    try &#123;\n        //沒在音樂廳不能使用此功能\n        if (!client.voice.connections.get(guildID)) &#123;\n            msg.channel.send(`請先正常啟用音樂指令後，再使用歌單載入喔`);\n            return false;\n        &#125;\n        //網址\n        const valueED = msg.content.split(&#39; &#39;);\n        //先用library自帶的方式檢查一次能不能用\n        const canPlay = await ytpl.validateID(valueED[1]);\n        //讀取到幾首歌，上限默認100首\n        let a = 0;\n        //幾首成功放入歌單\n        let b = 0;\n        if (canPlay) &#123;\n            const listED = await ytpl(valueED[1]);\n            await listED.items.forEach(async function(element) &#123;\n                a = a + 1;\n                if (element.title !== &#39;[Deleted video]&#39;) &#123;\n                    canPlay2 = await ytdl.validateURL(element.url_simple);\n                    if (canPlay2) &#123;\n                        b = b + 1;\n                        musicList.get(guildID).push(element.url_simple);\n                    &#125;\n                &#125;\n            &#125;);\n            //回傳統計資訊\n            msg.channel.send(`歌單 $&#123;listED.title&#125;\\n共載入$&#123;b&#125;首歌曲\\n$&#123;a-b&#125;首載入失敗`);\n        &#125; else &#123;\n            msg.channel.send(`This Url isn&#39;t working in function.`);\n        &#125;\n    &#125; catch (err) &#123;\n        console.log(err, &#39;playListMusicError&#39;);\n    &#125;\n&#125;\n</code></pre>\n<p>由上而下依序說明…</p>\n<p><img src=\"https://i.imgur.com/06WUq7e.png\" alt=\"23-8\"> </p>\n<p>因為歌單功能僅提供將yt歌單放入bot歌單的功能<br>正常使用play指令，不在語音廳的情況下是會直接進入語音廳並開始播放歌曲<br>筆者這邊寫成不能從歌單指令開始播歌</p>\n<p><img src=\"https://i.imgur.com/v9gRPGn.png\" alt=\"23-9\"> </p>\n<p>宣告了四份參數</p>\n<p>valueED<br>第一個單純是使用空白做字串分割，valueED[0]是前綴字+playList<br>valueED[1]則是一格空白後加上網址</p>\n<p>canPlay<br>使用ytpl自帶的檢查語法，會根據帶入的url回傳布林</p>\n<p>a<br>載入迴圈的每一次都會+1，代表著載入幾首歌</p>\n<p>b<br>載入迴圈的每一次，當成功將歌曲加入歌單時+1，表示成功抓取幾首歌</p>\n<p><img src=\"https://i.imgur.com/dBhEpU2.png\" alt=\"23-10\"> </p>\n<p>當canPlay等於ture後，正式查詢歌單並且將資料回傳給listED<br>listED底下有一items為JSONArray，他就是歌單的集合<br>對他使用迴圈，並在迴圈內用ytdl驗證一次網址是否可用<br>驗證全部通過後將歌曲加入該群組歌單<br>最後統計數字</p>\n<hr>\n<p>因為加入批量歌曲載入的緣故，當機器人在列出queueShow時，極有可能回傳大量文字<br>discord單封文字的上限數是2000，我們取1900就好</p>\n<p><img src=\"https://i.imgur.com/fdzjXHy.png\" alt=\"23-11\"> </p>\n<p>都好了後，試著運行看看</p>\n<p><img src=\"https://i.imgur.com/G0vZbae.png\" alt=\"23-12\"> </p>\n<p><img src=\"https://i.imgur.com/06dEnP9.png\" alt=\"23-13\"> </p>\n<p><img src=\"https://i.imgur.com/qSyICGj.png\" alt=\"23-14\"> </p>\n<p>這樣音樂系統也能做到批量載入音樂了<br>其餘還剩一些瑕疵，如歌單功能有限制，歌曲詳細資訊載入偏慢，沒有過濾私人影片還有更多可能的問題等…就讓各位自己嘗試看看吧</p>\n<p>那音樂系統就教到這，我們明天見</p>\n",
            "tags": [
                "node.js",
                "bot",
                "discord",
                "discord.js",
                "教學",
                "12th鐵人賽"
            ]
        },
        {
            "id": "https://smilin.net/2020/09/22/12thDay22/",
            "url": "https://smilin.net/2020/09/22/12thDay22/",
            "title": "Day22 - 音樂系統的多群組化(額外)",
            "date_published": "2020-09-22T02:10:05.000Z",
            "content_html": "<p>這兩天來把音樂系統教完好了</p>\n<span id=\"more\"></span>\n\n<p>目前為止的音樂系統只支援一隻機器人 for 一個群組的模式<br>如果有多群組同時要使用音樂系統，會導致歌單列表共用</p>\n<p>這是因為機器人的系統中，並沒有將群組納入判斷<br>要改起來並不難，但邏輯要清晰</p>\n<p>不知道當時有沒有小夥伴自己搞定這一塊的?我們今天會再帶過</p>\n<p>程式碼是依照之前的進度，不會重頭開始，如果需要但沒有基礎程式碼的話可以回去看音樂系統的教學</p>\n<hr>\n<h1 id=\"MusicFunction\"><a href=\"#MusicFunction\" class=\"headerlink\" title=\"MusicFunction\"></a>MusicFunction</h1><p><img src=\"https://i.imgur.com/sKuhlfp.png\" alt=\"22-1\"></p>\n<p>首先請把宣告成全域變數的兩個參數，初始化都設為Map()</p>\n<p><img src=\"https://i.imgur.com/KSRmbTG.png\" alt=\"22-2\"></p>\n<p>再來我們在音樂指令的入口提取guildID，並且放入每一個function內</p>\n<h1 id=\"playMusic\"><a href=\"#playMusic\" class=\"headerlink\" title=\"playMusic\"></a>playMusic</h1><p><img src=\"https://i.imgur.com/gax5Dun.png\" alt=\"22-3\"></p>\n<p>修改了151,155跟171行<br>(可以根據左側顏色判斷)</p>\n<p>第一次進入語音廳的群組需要先以群組ID宣告一個歌曲列表<br>原本歌曲列表放入資料的方法是這樣</p>\n<pre><code>musicList.push(網址)\n</code></pre>\n<p>現在變成</p>\n<pre><code>music.get(群組id).push(網址)\n</code></pre>\n<p>也就是根據群組id提取歌曲列表</p>\n<h1 id=\"playMusic2\"><a href=\"#playMusic2\" class=\"headerlink\" title=\"playMusic2\"></a>playMusic2</h1><p><img src=\"https://i.imgur.com/MpGvBiu.png\" alt=\"22-4\"></p>\n<p>改了185,195,202,204跟206行<br>(可以根據左側顏色判斷)</p>\n<p>原則上都跟剛剛一樣，注意歌曲清單跟播放遙控器應該是一個群組一個而已</p>\n<h1 id=\"disconnectMusic\"><a href=\"#disconnectMusic\" class=\"headerlink\" title=\"disconnectMusic\"></a>disconnectMusic</h1><p><img src=\"https://i.imgur.com/GHYrwdz.png\" alt=\"22-5\"></p>\n<p>修改了222行<br>(可以根據左側顏色判斷)</p>\n<h1 id=\"replayMusic\"><a href=\"#replayMusic\" class=\"headerlink\" title=\"replayMusic\"></a>replayMusic</h1><p><img src=\"https://i.imgur.com/0noksiD.png\" alt=\"22-6\"></p>\n<p>改了235,237與240行<br>(可以根據左側顏色判斷)</p>\n<h1 id=\"skipMusic\"><a href=\"#skipMusic\" class=\"headerlink\" title=\"skipMusic\"></a>skipMusic</h1><p><img src=\"https://i.imgur.com/j3vClrt.png\" alt=\"22-7\"></p>\n<p>只有一行</p>\n<h1 id=\"nowPlayMusic\"><a href=\"#nowPlayMusic\" class=\"headerlink\" title=\"nowPlayMusic\"></a>nowPlayMusic</h1><p><img src=\"https://i.imgur.com/0mjB6g9.png\" alt=\"22-8\"></p>\n<p>修改了253,255跟261行<br>(可以根據左側顏色判斷)</p>\n<p>字串串接部分拿的是已經處理好的參數，所以不用修改streamString</p>\n<h1 id=\"queueShow\"><a href=\"#queueShow\" class=\"headerlink\" title=\"queueShow\"></a>queueShow</h1><p><img src=\"https://i.imgur.com/6ekTspK.png\" alt=\"22-9\"></p>\n<p>修改了291,294跟296行<br>(可以根據左側顏色判斷)</p>\n<hr>\n<p>這樣基本就都改好了，我們試著運行看看</p>\n<p>運行前，因為之前我們已經上傳機器人到heroku上，理論上現在機器人是在運行狀態的<br>這時候如果我們使用node bot，雖然不會有bug，但會造成bot裡面同時有兩隻程序登入，會造成很有趣的現象，各位有興趣可以試試</p>\n<p>那這邊筆者為了繞過這問題，想直接上傳至heroku，這樣就可以只跑一個程序，也剛好介紹怎麼用heroku瀏覽程序歷程</p>\n<h1 id=\"測試\"><a href=\"#測試\" class=\"headerlink\" title=\"測試\"></a>測試</h1><p>我們先回到專案資料夾底下，將.git改名gitHub，然後將gitHeroku改回.git</p>\n<p>回到vsCode，將專案推上heroku</p>\n<p>推完看到Build succeeded後幫我下</p>\n<pre><code>heroku log -t\n</code></pre>\n<p>之前應該有提到<br>這是觀察專案在heroku上的託管狀態<br>如果我們要透過heroku來直接跑程序，或是之後出問題都是來這邊看error訊息</p>\n<p>開好訊息後，我們試著測試看看機器人是不是真的可以分群播音樂了</p>\n<p><img src=\"https://i.imgur.com/BMVGiLi.png\" alt=\"22-10\"></p>\n<p><img src=\"https://i.imgur.com/5dS1Qmq.png\" alt=\"22-11\"></p>\n<p><img src=\"https://i.imgur.com/7rysBLk.png\" alt=\"22-12\"></p>\n<p><img src=\"https://i.imgur.com/GdOBJIn.png\" alt=\"22-13\"></p>\n<p><img src=\"https://i.imgur.com/Eu0wFM2.png\" alt=\"22-14\"></p>\n<p><img src=\"https://i.imgur.com/FgMco0X.png\" alt=\"22-15\"></p>\n<p><img src=\"https://i.imgur.com/3J61doA.png\" alt=\"22-16\"></p>\n<hr>\n<p>大致如此，我們可以看到，機器人確實在兩個群組收到指令時，不會影響到對方了</p>\n<p>音樂系統的多群組支援教到這<br>明天看看要不要教一些額外的功能，我們明天見</p>\n<h1 id=\"主程序\"><a href=\"#主程序\" class=\"headerlink\" title=\"主程序\"></a>主程序</h1><pre><code>//#region 音樂系統\n//歌曲控制器\nlet dispatcher = new Map();\n//歌曲清單\nlet musicList = new Map();\n\nfunction MusicFunction(msg) &#123;\n    //將訊息內的前綴字截斷，後面的字是我們要的\n    const content = msg.content.substring(prefix[1].Value.length);\n    //指定我們的間隔符號\n    const splitText = &#39; &#39;;\n    //用間隔符號隔開訊息 contents[0] = 指令,contents[1] = 參數\n    const contents = content.split(splitText);\n    //因為會持續使用到，將群組ID獨立成參數\n    const guildID = msg.guild.id;\n\n    switch (contents[0]) &#123;\n        case &#39;play&#39;:\n            //點歌&amp;播放歌曲功能\n            playMusic(guildID, msg, contents);\n            break;\n        case &#39;replay&#39;:\n            //重播當前歌曲\n            replayMusic(guildID);\n            break;\n        case &#39;np&#39;:\n            //當前歌曲資訊\n            nowPlayMusic(guildID, msg.channel.id);\n            break;\n        case &#39;queue&#39;:\n            //歌曲清單\n            queueShow(guildID, msg.channel.id);\n            break;\n        case &#39;skip&#39;:\n            //中斷歌曲\n            skipMusic(guildID);\n            break;\n        case &#39;disconnect&#39;:\n            //退出語音頻道並且清空歌曲清單\n            disconnectMusic(guildID, msg.channel.id);\n            break;\n    &#125;\n&#125;\n\n//?play\nasync function playMusic(guildID, msg, contents) &#123;\n    //定義我們的第一個參數必需是網址\n    const urlED = contents[1];\n    try &#123;\n        //第一個參數不是連結就要篩選掉\n        if (urlED.substring(0, 4) !== &#39;http&#39;) return msg.reply(&#39;The link is not working.1&#39;);\n\n        //透過library判斷連結是否可運行\n        const validate = await ytdl.validateURL(urlED);\n        if (!validate) return msg.reply(&#39;The link is not working.2&#39;);\n\n        //獲取歌曲資訊\n        const info = await ytdl.getInfo(urlED);\n        //判斷資訊是否正常\n        if (info.videoDetails) &#123;\n            //指令下達者是否在語音頻道\n            if (msg.member.voice.channel) &#123;\n                //判斷bot是否已經連到語音頻道 是:將歌曲加入歌單 不是:進入語音頻道並且播放歌曲\n                if (!client.voice.connections.get(msg.guild.id)) &#123;\n                    //因為是第一次加入，宣告新的歌曲列表\n                    musicList.set(guildID, new Array());\n\n                    //將歌曲加入歌單\n                    musicList.get(guildID).push(urlED);\n                    //進入語音頻道\n                    msg.member.voice.channel.join()\n                        .then(connection =&gt; &#123;\n                            msg.reply(&#39;來了~&#39;);\n                            //const guildID = msg.guild.id;\n                            const channelID = msg.channel.id;\n                            //播放歌曲\n                            playMusic2(connection, guildID, channelID);\n                        &#125;)\n                        .catch(err =&gt; &#123;\n                            msg.reply(&#39;bot進入語音頻道時發生錯誤，請再試一次&#39;);\n                            console.log(err, &#39;playMusicError2&#39;);\n                        &#125;)\n                &#125; else &#123;\n                    //將歌曲加入歌單\n                    musicList.get(guildID).push(urlED);\n                    msg.reply(&#39;已將歌曲加入歌單!&#39;);\n                &#125;\n            &#125; else return msg.reply(&#39;請先進入頻道:3...&#39;);\n        &#125; else return msg.reply(&#39;The link is not working.3&#39;);\n    &#125; catch (err) &#123;\n        console.log(err, &#39;playMusicError&#39;);\n    &#125;\n&#125;\n\n//?play 遞迴函式\nasync function playMusic2(connection, guildID, channelID) &#123;\n    try &#123;\n        //播放前歌曲清單不能沒有網址\n        if (musicList.get(guildID).length &gt; 0) &#123;\n            //設定音樂相關參數\n            const streamOptions = &#123;\n                seek: 0,\n                volume: 0.5,\n                Bitrate: 192000,\n                Passes: 1,\n                highWaterMark: 1\n            &#125;;\n            //讀取清單第一位網址\n            const stream = await ytdl(musicList.get(guildID)[0], &#123;\n                filter: &#39;audioonly&#39;,\n                quality: &#39;highestaudio&#39;,\n                highWaterMark: 26214400 //25ms\n            &#125;)\n\n            //播放歌曲，並且存入dispatcher\n            dispatcher.set(guildID, connection.play(stream, streamOptions));\n            //監聽歌曲播放結束事件\n            dispatcher.get(guildID).on(&quot;finish&quot;, finish =&gt; &#123;\n                //將清單中第一首歌清除\n                if (musicList.get(guildID).length &gt; 0) musicList.get(guildID).shift();\n                //播放歌曲\n                playMusic2(connection, guildID, channelID);\n            &#125;)\n        &#125; else disconnectMusic(guildID, channelID); //清空歌單並且退出語音頻道\n    &#125; catch (err) &#123;\n        console.log(err, &#39;playMusic2Error&#39;);\n    &#125;\n&#125;\n\n//?disconnect\nfunction disconnectMusic(guildID, channelID) &#123;\n    try &#123;\n        //判斷bot是否在此群組的語音頻道\n        if (client.voice.connections.get(guildID)) &#123;\n            //清空歌曲清單\n            musicList.set(guildID, new Array());\n            //退出語音頻道\n            client.voice.connections.get(guildID).disconnect();\n\n            client.channels.fetch(channelID).then(channel =&gt; channel.send(&#39;晚安~&#39;));\n        &#125; else client.channels.fetch(channelID).then(channel =&gt; channel.send(&#39;可是..我還沒進來:3&#39;))\n    &#125; catch (err) &#123;\n        console.log(err, &#39;disconnectMusicError&#39;);\n    &#125;\n&#125;\n\n//?replay\nfunction replayMusic(guildID) &#123;\n    if (musicList.get(guildID).length &gt; 0) &#123;\n        //把當前曲目再推一個到最前面\n        musicList.get(guildID).unshift(musicList[0]);\n        //將歌曲關閉，觸發finish事件\n        //finish事件將清單第一首歌排出，然後繼續播放下一首\n        if (dispatcher.get(guildID) !== undefined) dispatcher.get(guildID).end();\n    &#125;\n&#125;\n\n//?skip\nfunction skipMusic(guildID) &#123;\n    //將歌曲關閉，觸發finish事件\n    if (dispatcher.get(guildID) !== undefined) dispatcher.get(guildID).end();\n&#125;\n\n//?np\nasync function nowPlayMusic(guildID, channelID) &#123;\n    try &#123;\n        if (dispatcher.get(guildID) !== undefined &amp;&amp; musicList.get(guildID).length &gt; 0) &#123;\n            //從連結中獲取歌曲資訊 標題 總長度等\n            const info = await ytdl.getInfo(musicList.get(guildID)[0]);\n            //歌曲標題\n            const title = info.videoDetails.title;\n            //歌曲全長(s)\n            const songLength = info.videoDetails.lengthSeconds;\n            //當前播放時間(ms)\n            const nowSongLength = Math.floor(dispatcher.get(guildID).streamTime / 1000);\n            //串字串\n            const message = `$&#123;title&#125;\\n$&#123;streamString(songLength,nowSongLength)&#125;`;\n            client.channels.fetch(channelID).then(channel =&gt; channel.send(message))\n        &#125;\n    &#125; catch (err) &#123;\n        console.log(err, &#39;nowPlayMusicError&#39;);\n    &#125;\n&#125;\n\n//▬▬▬▬▬▬▬▬▬?▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬\nfunction streamString(songLength, nowSongLength) &#123;\n    let mainText = &#39;?&#39;;\n    const secondText = &#39;▬&#39;;\n    const whereMain = Math.floor((nowSongLength / songLength) * 100);\n    let message = &#39;&#39;;\n    for (i = 1; i &lt;= 30; i++) &#123;\n        if (i * 3.3 + 1 &gt;= whereMain) &#123;\n            message = message + mainText;\n            mainText = secondText;\n        &#125; else &#123;\n            message = message + secondText;\n        &#125;\n    &#125;\n    return message;\n&#125;\n\n//?queue\nasync function queueShow(guildID, channelID) &#123;\n    try &#123;\n        if (musicList.get(guildID).length &gt; 0) &#123;\n            let info;\n            let message = &#39;&#39;;\n            for (i = 0; i &lt; musicList.get(guildID).length; i++) &#123;\n                //從連結中獲取歌曲資訊 標題 總長度等\n                info = await ytdl.getInfo(musicList.get(guildID)[i]);\n                //歌曲標題\n                title = info.videoDetails.title;\n                //串字串\n                message = message + `\\n$&#123;i+1&#125;. $&#123;title&#125;`;\n            &#125;\n            //把最前面的\\n拿掉\n            message = message.substring(1, message.length);\n            client.channels.fetch(channelID).then(channel =&gt; channel.send(message))\n        &#125;\n    &#125; catch (err) &#123;\n        console.log(err, &#39;queueShowError&#39;);\n    &#125;\n&#125;\n//#endregion\n</code></pre>\n",
            "tags": [
                "node.js",
                "bot",
                "discord",
                "discord.js",
                "教學",
                "12th鐵人賽"
            ]
        },
        {
            "id": "https://smilin.net/2020/09/21/12thDay21/",
            "url": "https://smilin.net/2020/09/21/12thDay21/",
            "title": "Day21 - 認識GitHub",
            "date_published": "2020-09-21T01:27:40.000Z",
            "content_html": "<p>今天想先說該怎麼把專案推上github，可以順便複習與heroku配套的git指令</p>\n<span id=\"more\"></span>\n\n<p>heroku會用到git是因為heroku推程序這個動作跟github一樣，都是將專案推到網路上某個地方，推到github或heroku的差別而已</p>\n<p>既然如此，heroku理所當然也可以做到跟github一樣的事情<br>那又為什麼還要額外放在github呢?</p>\n<h1 id=\"GitHub\"><a href=\"#GitHub\" class=\"headerlink\" title=\"GitHub\"></a>GitHub</h1><p><img src=\"https://i.imgur.com/J0tiaEH.png\" alt=\"21-1\"></p>\n<p>GitHub是基於Git語言的開源專案庫<br>他提供任何人將自己的程序打包成專案，透過Git推上GitHub進行開發&amp;版本紀錄<br>GitHub對開源有著良好的圖形介面支持，所有人都可以在GitHub上看到對方的專案，並且提出協作要求、讓多位工程師來協同完成一件專案</p>\n<p>一言以蔽之、將我們的機器人推上GitHub就像是展示你自己的作品，讓所有人都看的到你做過哪些東西，又是何時更新、更新了甚麼，是資訊人要讓人了解自己最快速的一步</p>\n<p>推GitHub專案雖然也要使用Git語言，但因為GitHub是圍繞著Git開發的網站，其對Git語言的支援十分強大，除了網站本身按一按就能把專案推上去以外，他還推出了專案管理的圖形使用者介面</p>\n<h1 id=\"GitHub-Desktop\"><a href=\"#GitHub-Desktop\" class=\"headerlink\" title=\"GitHub Desktop\"></a>GitHub Desktop</h1><p><a href=\"https://desktop.github.com/\">https://desktop.github.com/</a><br>請點擊連結並且下載GitHub Desktop</p>\n<p><img src=\"https://i.imgur.com/rIGrdAg.png\" alt=\"21-2\"></p>\n<p>安裝完開啟後會要求你登入，請直接登入<br>可以選擇亮或暗主題<br>一開始會問你要不要直接新增專案，請拒絕，想辦法進到這個畫面 </p>\n<p><img src=\"https://i.imgur.com/1YNrkrT.png\" alt=\"21-3\"></p>\n<p>點擊左上角，拉出Add下拉框，點開後有個Create new repository</p>\n<p><img src=\"https://i.imgur.com/ZAwEqcQ.png\" alt=\"21-4\"></p>\n<p>這是新增一個新專案，點下去後他會先要你選擇本機上的路徑</p>\n<p><img src=\"https://i.imgur.com/bj3clLV.png\" alt=\"21-5\"></p>\n<p>第一個是資料夾名稱，我們取DiscordBot<br>第二個是專案簡介，可以隨便寫、但注意不要太多，一行就好<br>第三個是路徑，請放在原專案外面<br>Initialize this repository with a README記得打勾<br>下面兩個是使用語言之類的，這部份GitHub上傳後會自動判斷，可以不管</p>\n<p>都好了之後我們按…..不對!還不能按Create repository!<br>我們先進到專案資料夾</p>\n<p><img src=\"https://i.imgur.com/G02dXTW.png\" alt=\"21-6\"></p>\n<p>我們把.git資料夾改名成Herokugit<br>如果看不到.git資料夾請上網查一下怎麼看到隱藏資料夾</p>\n<p><img src=\"https://i.imgur.com/g4EsJIR.png\" alt=\"21-7\"></p>\n<p>好了之後我們回去按Create repository<br>按完會發現資料夾內多了</p>\n<p>README.md<br>.gitattributes<br>.git</p>\n<p><img src=\"https://i.imgur.com/r8bUU7S.png\" alt=\"21-8\"></p>\n<p>記得我們一開始建Heroku有提到嗎，只要是Git專案都會有.git檔案<br>因為使用Heroku的同時，他就是屬於Heroku的專案了，我們如果也要推上GitHub的話，就要先讓他不是Heroku的專案，不然會覆蓋掉!</p>\n<p>然後我們新增一個.gitignore，注意沒有副檔名喔</p>\n<p><img src=\"https://i.imgur.com/HWtBE6s.png\" alt=\"21-9\"></p>\n<p><img src=\"https://i.imgur.com/JbUJatt.png\" alt=\"21-10\"></p>\n<pre><code>auth.json\n.gitignore\nHerokugit\n</code></pre>\n<p>這是給GitHub看的文件，可以讓GitHub在將專案commit前，選擇要忽略哪些檔案<br>我們的私密資料都在auth.json，所以auth.json自然不能推到任何人都能看得GitHub上<br>Herokugit是讓GitHub不會上傳到Heroku的.git檔案</p>\n<p><img src=\"https://i.imgur.com/CeXOZni.png\" alt=\"21-11\"></p>\n<p>這時我們回到GitHubDesktop，可以看到左下角告訴你，專案commit好了，並且版號是init(初始化)</p>\n<p>在宣告一個新專案庫時，相當於他幫你下了</p>\n<p>git add .<br>git commit init</p>\n<p>這兩個指令，我們可以點左上角的history看到我們有哪些檔案被commit，只要等等再下push就會被推上網際網路</p>\n<p>那我們點一下右上角的Publish repository</p>\n<p><img src=\"https://i.imgur.com/8oMDTIu.png\" alt=\"21-12\"></p>\n<p>第一次push時會有像這樣的提示框，他會二次確認你在GitHub上的專案要叫甚麼名字</p>\n<p>Keep this code private打勾的話，這個專案就會是私人的，只有你登錄帳號時看的見<br>我們希望程序是可以被人看見的，所以我們要把打勾取消掉</p>\n<p>好了之後我們點Publish repository，他就會開始上傳專案，第一次比較久，我們等一下，可以去到杯水再回來看看</p>\n<p><img src=\"https://i.imgur.com/2UQueAh.png\" alt=\"21-13\"></p>\n<p>畫面長這樣就是成功了，左下角的commit消失(被推上去)</p>\n<p><img src=\"https://i.imgur.com/RZ42yiU.png\" alt=\"21-14\"></p>\n<p>History可以看到我們的歷史版本，以及做了那些變動</p>\n",
            "tags": [
                "node.js",
                "bot",
                "discord",
                "discord.js",
                "教學",
                "12th鐵人賽"
            ]
        },
        {
            "id": "https://smilin.net/2020/09/20/12thDay20/",
            "url": "https://smilin.net/2020/09/20/12thDay20/",
            "title": "Day20 - GAS抓表(4)",
            "date_published": "2020-09-20T02:26:24.000Z",
            "content_html": "<p>昨天我們成功把API跟程式做了連結，並且可以在dc使用</p>\n<p>但從GAS到程序寫法都存在問題，今天筆者會一一修正</p>\n<span id=\"more\"></span>\n\n<p><img src=\"https://i.imgur.com/fR5A15o.png\" alt=\"20-1\"></p>\n<p>首先請開啟GAS，這是我們目前的樣子</p>\n<p>為了讓搜尋方式從JSONObject轉成JSONArray，第9~19行請改寫如下</p>\n<p><img src=\"https://i.imgur.com/T9RPJMS.png\" alt=\"20-2\"></p>\n<p>重點在於宣告dataExport的時候，從{}變成了[]<br>這就是JSONObject跟JSONArray的差別了<br>{}表示JSONObject，而[]表示JSONArray</p>\n<p>做好後我們跟上次一樣發布成網頁應用程式</p>\n<p><img src=\"https://i.imgur.com/ilA3YVL.png\" alt=\"20-3\"></p>\n<p>以後要記得，只要想修改GAS，修改完就一定要發布，然後版本一定要+1<br>版本只會越來越高，如果選擇舊的版號的話，API是抓不到你最新的修改的喔!</p>\n<p>成功改成JSONArray後，原本的寫法就不適用了，不過我們也不打算繼續使用舊的邏輯<br>先來整理目前程序接收到API後的邏輯</p>\n<p>discord訊息事件觸發 -&gt; 沒有前綴字，進入API字串比對 -&gt; 比對完成，反饋結果 -&gt; 將結果反饋回discord</p>\n<p>這樣做最明顯的問題就是每有一個訊息事件，bot就要打一次API上去<br>花費的時間過長，容易增加bot錯誤<br>且沒有考量過GAS每日免費額度問題</p>\n<p>那麼該怎麼解決這問題呢?其實也很簡單，只要讓抓取API的行為只要執行一次就好</p>\n<p>整個DiscordBot，唯一只會執行一次的地方就在ready事件</p>\n<p><img src=\"https://i.imgur.com/XBnoUg1.png\" alt=\"20-4\"></p>\n<p>當程序啟動，程序自動執行login方法，login成功就會收到唯一一次的ready</p>\n<p><img src=\"https://i.imgur.com/xRZkc3k.png\" alt=\"20-5\"></p>\n<p>將原本在下面的API事件拉上ready，並且將messageED改成dataED<br>我們之後就不讓GetGas做字串比對了，只要幫我們打API並且整理好資料後反饋就好</p>\n<p><img src=\"https://i.imgur.com/Tcb5HJq.png\" alt=\"20-6\"></p>\n<p><img src=\"https://i.imgur.com/lif9ZJN.png\" alt=\"20-7\"></p>\n<p>處理好上面後，做字串比對</p>\n<p><img src=\"https://i.imgur.com/xSzaxE8.png\" alt=\"20-8\"></p>\n<pre><code>//BaseExcel字串比對\nfunction GetBaseExcelData(msg) &#123;\n    try &#123;\n        if (BaseExcelData) &#123;\n            const userMessage = msg.content;\n\n            e = BaseExcelData.filter(element =&gt; &#123;\n                return element.NAME === userMessage;\n            &#125;)\n\n            if (e) return e[0].VALUE;\n            else return false;\n        &#125;\n    &#125; catch (err) &#123;\n        console.log(&#39;GetBaseExcelDataError&#39;, err);\n    &#125;\n&#125;\n</code></pre>\n<p>然後將字串比對的function拉到原本請求API的地方</p>\n<p><img src=\"https://i.imgur.com/jnV3w2k.png\" alt=\"20-9\"></p>\n<p>都完成後，我們試著執行看看</p>\n<p><img src=\"https://i.imgur.com/Y4k84C8.png\" alt=\"20-10\"></p>\n<p>成了!<br>這樣我們的bot只在執行時會去取API<br>解決了GAS限制的問題，並且每次的讀寫速度也提升許多</p>\n<p>到此，DiscordBot後台0負擔這個主題的基本設置大致說完了<br>這邊附上完整的教學專案<br><a href=\"https://supr.link/MePIY\">https://supr.link/MePIY</a></p>\n<p>剩下十天會教一些額外的內容，例如昨天提到GAS的訊息應該是分群組的，音樂系統如何分群使用等，以及GitHub使用….如果讀者有想看的也可以留言給筆者知道，筆者會的話再做安排</p>\n<p>最後我們將檔案推上Heroku，記得怎麼推嗎?</p>\n<p>git add .<br>git commit -m ‘版本說明’<br>git push heroku master</p>\n",
            "tags": [
                "node.js",
                "bot",
                "discord",
                "discord.js",
                "教學",
                "12th鐵人賽"
            ]
        },
        {
            "id": "https://smilin.net/2020/09/19/12thDay19/",
            "url": "https://smilin.net/2020/09/19/12thDay19/",
            "title": "Day19 - GAS抓表(3)",
            "date_published": "2020-09-19T12:00:43.000Z",
            "content_html": "<p>昨天我們的程式成功抓到API的資料並且對他做分析了<br>現在要串回主程序(bot.js)上</p>\n<span id=\"more\"></span>\n\n<p><img src=\"https://i.imgur.com/lLXAqcN.png\" alt=\"19-1\"></p>\n<p>請幫我在bot.js引用GetGas.js</p>\n<p><img src=\"https://i.imgur.com/mwE3NRg.png\" alt=\"19-2\"></p>\n<p><img src=\"https://i.imgur.com/xMGI9Fa.png\" alt=\"19-3\"> </p>\n<p>然後之前的文字回應系統，跟音樂系統一樣用一個function包起來，比較好看</p>\n<p><img src=\"https://i.imgur.com/uvfVZ2Q.png\" alt=\"19-4\"></p>\n<p>我們希望當訊息不符合任一前綴系統的情況，就要拿字串跟資料庫比對<br>所以我們把function放在default(默認)，只要前面的case都沒進去就會到default</p>\n<p><img src=\"https://i.imgur.com/N0R0NAW.png\" alt=\"19-5\"> </p>\n<p>之後新增BaseExcelFunction方法<br>內容是執行GetGas底下的getBaseExcel元素</p>\n<p><img src=\"https://i.imgur.com/lg1t1wq.png\" alt=\"19-6\"></p>\n<p>回來看GetGas的getBaseExcel<br>getBaseExcel元素指向一callback方法<br>帶了一個參數userTalk，callback方法使用callback代表方法的結束，呼叫方會在callback欄位宣告function，其帶回參數(messageED)就是getBaseExcel的方法中callback的值</p>\n<p><img src=\"https://i.imgur.com/XXBAW5u.png\" alt=\"19-7\"></p>\n<p>這樣寫完，機器人就能做簡單的回話了!</p>\n<hr>\n<p>雖然功能做好了，但有許多問題</p>\n<p>依嚴重性依序列舉的話</p>\n<ol>\n<li>   bot每從discord收到一則訊息就會使用一次API</li>\n<li>   使用JsonObject做迴圈查詢十分沒有效率</li>\n<li>   缺乏防呆&amp;參數替換</li>\n</ol>\n<p>理論上，機器人對對應的詞句回話這個動作是即時的，透過這個寫法，我們每次查詢API都必須等待2~3秒的時間，API才會將結果反饋給bot<br>而且多次傳送API不僅降低了程序的穩定，也要考慮GAS提供的每日配額<br>如果bot所在的群組一天訊息超過2萬筆，API就一定會被花光，而一天兩萬筆訊息、對於一個支援多群組的bot來說其實並不困難</p>\n<p>GetGas中對於data的處理方式也是極其低效的，雖然在捨棄SQL這種專為優化資料存取的系統時，就難以追求最高效的方法，但目前的做法也仍是相對低效的</p>\n<p>以及程序目前只是簡單的判A給B，功能十分單一<br>我沒辦法針對特定群組，有該群組專屬的詞彙，或是對特定回應帶tag等</p>\n<p>明天我們會將程序做一次翻新</p>\n",
            "tags": [
                "node.js",
                "bot",
                "discord",
                "discord.js",
                "教學",
                "12th鐵人賽"
            ]
        },
        {
            "id": "https://smilin.net/2020/09/18/12thDay18/",
            "url": "https://smilin.net/2020/09/18/12thDay18/",
            "title": "Day18 - GAS抓表(2)",
            "date_published": "2020-09-18T01:17:51.000Z",
            "content_html": "<p>昨天我們在雲端上建好了試算表<br>將GAS發布成API的GET方法，只要我們訪問就能成功獲取試算表資料</p>\n<span id=\"more\"></span>\n\n<p>今天我們來寫點程式</p>\n<p>我們來回顧一下，目前機器人在Message下可以做到的事情</p>\n<ul>\n<li>文字回應</li>\n<li>音樂系統</li>\n</ul>\n<p>我們希望增加一個可以針對表格內容，動態觸發回應的功能<br>這種功能因為不會直接知道有哪些指令，應該要是沒有前綴字的，只要字串符合就會觸發</p>\n<p>由此可知，我們應該要將這個方法添加在所有功能的最底層<br>只有當前綴字都不符合時，才會來辨識表格資料</p>\n<p>觀念大致帶過，我們開始動手</p>\n<p>先幫我在專案目錄下建立一個Script資料夾，在裡面放一個GetGas.js</p>\n<p><img src=\"https://i.imgur.com/OJB3z4l.png\" alt=\"18-1\"></p>\n<pre><code>//#region 全域引用\nconst auth = require(&#39;../JSONHome/auth.json&#39;);\nconst request = require(&#39;request&#39;);\n\n//#endregion\n</code></pre>\n<p>裡面請先幫我引用auth.json跟request</p>\n<p>auth目前只有存放機器人的key，跟key一樣，我們不希望自己與GAS串接的API暴露&amp;寫死在程式裡面，所以之後要把連結寫在auth，之後透過auth來讀取連結<br>務必注意引用auth的路徑比bot.js多了一個點，這是因為GetGas.js要先從Script路徑出來才找的到JSONHome。</p>\n<p>request是提供給js的網路請求library，我們之後都會透過他來傳遞Get方法</p>\n<p><img src=\"https://i.imgur.com/pwcJ7OJ.png\" alt=\"18-2\"></p>\n<p>auth.json目前的樣子</p>\n<p>在原本的Key後面加上一個逗號，然後新增Gas參數，內涵一個JsonObject{}<br>{}裡面再包一個Get參數，內涵一個JsonArray[]<br>第一個JsonObject內包一個baseExcel參數<br>baseExcel參數會帶回我們昨天做的API連結</p>\n<p>包三層是為了增加程式含意，方便之後閱讀<br>跟Get同一層之後可以再添加post等<br>不過Get原本是包JsonObject就好，這邊為了多介紹JsonArray所以用了，原本就會的同學可以少包Array</p>\n<p>這種架構下，如果我們要獲取Url就會是<br>auth.Gas.Get[0].baseExcel</p>\n<p><img src=\"https://i.imgur.com/YcsHJpa.png\" alt=\"18-3\"></p>\n<pre><code>//#region 宣告請求\nconst baseExcel = &#123;\n    &#39;method&#39;: &#39;GET&#39;,\n    &#39;url&#39;: auth.Gas.Get[0].baseExcel,\n    &#39;headers&#39;: &#123;&#125;\n&#125;;\n\n//#endregion\n</code></pre>\n<p>再來我們宣告一個baseExcel常數，將http請求需要的參數帶給他<br>method表示我們使用的是Get方法<br>url就帶我們剛剛寫好的url<br>headers是傳送時的表頭，這邊放空值就好</p>\n<p><img src=\"https://i.imgur.com/8v4kmCE.png\" alt=\"18-4\"></p>\n<pre><code>//#region 傳送請求\nexports.getBaseExcel = function(userTalk, callback) &#123;\n    let backValue = new Array;\n    request(baseExcel, function(error, response) &#123;\n        try &#123;\n            if (error) &#123;\n                callback(error);\n            &#125; else &#123;\n                const data = JSON.parse(response.body); //接收回傳(response)的body\n                const keysValue = Object.keys(data); //將JsonObject的key值輸出成Array\n                //迴圈判斷是否符合\n                for (let i = 0; i &lt; keysValue.length; i++) &#123;\n                    if (data[keysValue[i]].NAME === userTalk) &#123;\n                        callback(data[keysValue[i]].VALUE); //正確回傳結果\n                    &#125;\n                &#125;\n                callback(false);\n            &#125;\n        &#125; catch (err) &#123;\n            console.log(&#39;getBaseExcelError&#39;, err);\n            callback(&#39;getBaseExcelError&#39;);\n        &#125;\n    &#125;);\n&#125;;\n\n//#endregion\n</code></pre>\n<p>最後我們實際創建一個callback方法，供外部調用<br>http請求後，將回傳值定義為JSON給data<br>之後讓data跑迴圈，判斷message是否與表格的NAME欄相符<br>叫到名字的話，機器人就要回傳VALUE值</p>\n<p>這樣我們就把GetGas.js做好了，剩下bot.js呼叫與傳送訊息的部分<br>我們明天繼續</p>\n",
            "tags": [
                "node.js",
                "bot",
                "discord",
                "discord.js",
                "教學",
                "12th鐵人賽"
            ]
        },
        {
            "id": "https://smilin.net/2020/09/17/12thDay17/",
            "url": "https://smilin.net/2020/09/17/12thDay17/",
            "title": "Day17 - GAS抓表(1)",
            "date_published": "2020-09-17T01:48:31.000Z",
            "content_html": "<p>今天我們來寫GAS</p>\n<span id=\"more\"></span>\n\n<h2 id=\"文件創建\"><a href=\"#文件創建\" class=\"headerlink\" title=\"文件創建\"></a>文件創建</h2><p>首先請打開google，登入你自己的google雲端，並且在喜歡的地方創建一個資料夾，取名為DiscordDataBaseApi</p>\n<p><img src=\"https://i.imgur.com/rczINQm.png\" alt=\"17-1\"></p>\n<p>右鍵分別創建一個試算表跟一個GAS</p>\n<p><img src=\"https://i.imgur.com/gGDTERM.png\" alt=\"17-2\"></p>\n<p><img src=\"https://i.imgur.com/EIbdgPE.png\" alt=\"17-3\"></p>\n<p>兩個文件創立後都會直接開一個新視窗<br>Excel取名為MyData，像我們一樣隨便輸入一些資料<br>然後複製網址上面d&#x2F; 到 &#x2F;edit 中間的亂碼，我的是<br>1mQ6qTJfOs3Gv5–K9r87w56wmDc3hUcpHm5hF1YKTms</p>\n<p>這串英數是我們Excel的ID，只要把這串亂碼給Google看，他就知道你找的是這張表</p>\n<p><img src=\"https://i.imgur.com/EPVxxkb.png\" alt=\"17-4\"></p>\n<p>我們回到 GAS ，填入以下程式</p>\n<pre><code>var id = &#39;你的表格ID&#39;; //抓取表單\n  var spreadsheet = SpreadsheetApp.openById(id); // Sheet id\n  var sheet = spreadsheet.getSheets()[0]; // 要第幾個sheet？ 0 就是第一個\n  var rowLength = sheet.getLastRow()-1; //取行長度\n  var columnLength = sheet.getLastColumn(); //取列長度\n  var data = sheet.getRange(2,1,rowLength,columnLength).getValues(); // 取得的資料\n</code></pre>\n<p>把剛剛的id給GAS抓表，抓到表後讀取行列範圍，然後從範圍中抓取資料<br>那一長串程式碼全都是google提供的function，雖然好像有library可以看，筆者是建議記下來就好</p>\n<p>我們範圍是從第2行開始抓取資料到最底，這是因為我們表格的第一行屬於標題行，給使用者看的，我們就不抓取這行資料</p>\n<p><img src=\"https://i.imgur.com/YGdSESn.png\" alt=\"17-5\"></p>\n<p>再來幫我新增這幾行資料</p>\n<pre><code>  var dataExport = &#123;&#125;;\n  \n  for(i in data)&#123;\n    if(data[i][0] != &quot;&quot;)&#123;\n    dataExport[data[i][0]] = &#123;\n      DATE:   data[i][1],\n      NAME:   data[i][2],\n      VALUE:  data[i][3]\n      &#125;\n    &#125;\n  &#125;\n</code></pre>\n<p>如果對json操作有一點經驗的同學，對這幾行應該不陌生<br>把data中的資料一個個串成json，這樣才方便我們做後續處理</p>\n<p><img src=\"https://i.imgur.com/mewJW4N.png\" alt=\"17-6\"></p>\n<p>最後加上這行</p>\n<pre><code>  var dataExportFormat = JSON.stringify(dataExport);\n  return ContentService.createTextOutput(dataExportFormat).setMimeType(ContentService.MimeType.JSON);\n</code></pre>\n<p>把整理好的資料return回去<br>GAS回傳需要先經手過他們的方法，API接收到的資料才是正常的<br>這部份當成return dataExport就可以了。</p>\n<h2 id=\"發布\"><a href=\"#發布\" class=\"headerlink\" title=\"發布\"></a>發布</h2><p>表格都填完，GAS都寫好後，我們就能抓取到表格資料了<br>但是程式該怎麼訪問GAS呢?<br>為了讓程式可以訪問到GAS，我們需要將GAS做成API<br>確認程式存檔後，幫我點左上角發布-&gt;部屬為網頁應用程式</p>\n<p><img src=\"https://i.imgur.com/jR2dTYm.png\" alt=\"17-7\"></p>\n<p>會有三個下拉框出現<br>1.\t是版本號<br>2.\t發布者<br>3.\t存取權限</p>\n<p>因為是第一次發布，版本一定是1<br>發布者是你就好不要動<br>這邊要注意第三點，務必設定成Anyone,even anonymous<br>確定無誤後我們點擊Deploy，他會要你核對權限，一路允許就好</p>\n<p><img src=\"https://i.imgur.com/HD5slmK.png\" alt=\"17-8\"></p>\n<p>都完成後，我們最後會拿到一組連結，我們試著將連結放在瀏覽器上</p>\n<p><img src=\"https://i.imgur.com/mZh9b3a.png\" alt=\"17-9\"></p>\n<p>如果成功就會像筆者這樣拿到表格上的檔案了!</p>\n",
            "tags": [
                "node.js",
                "bot",
                "discord",
                "discord.js",
                "教學",
                "12th鐵人賽"
            ]
        },
        {
            "id": "https://smilin.net/2020/09/16/12thDay16/",
            "url": "https://smilin.net/2020/09/16/12thDay16/",
            "title": "Day16 - 選擇你的資料庫",
            "date_published": "2020-09-16T01:10:15.000Z",
            "content_html": "<p>昨天我們成功把機器人丟到雲端託管，現在機器人可以..</p>\n<span id=\"more\"></span>\n\n<ul>\n<li>24小時不關機的回應大家的文字</li>\n<li>24小時不關機的播放音樂</li>\n<li>24小時不關機的做任何你已經自己寫好的原創功能!</li>\n</ul>\n<p>也就是說，原本機器人是前端(Discord)與後端(你的電腦)</p>\n<p>現在是前端(Discord)與後端(Heroku)了，儼然是一個自成循環的軟體，自行運作<br>只要不是要更新以及沒有重大bug的話，便可以減少維護，只要當一個使用者就好</p>\n<p>不過這樣的架構實際上是不夠完整的，Day14我們有帶到，關於面向使用者的軟體，通常會有</p>\n<ul>\n<li>前端</li>\n<li>後端</li>\n<li>與資料庫</li>\n</ul>\n<p>目前我們還缺乏一個資料庫，如果是之前在本機的情況，本文章只要教各位怎麼安裝MySQL就好；但是現在機器人已經被推上Heroku了，我們對對方的主機又沒有完全的控制權限，這又該怎麼辦呢?</p>\n<hr>\n<h2 id=\"Heroku的資料庫\"><a href=\"#Heroku的資料庫\" class=\"headerlink\" title=\"Heroku的資料庫\"></a>Heroku的資料庫</h2><p>我們來介紹Heroku的資料庫吧<br>因為這東西筆者的了解也不深，只是有必要提到<br>如果介紹有錯還望各位指正，以免誤導到人，感謝^^”</p>\n<p>Heroku不只提供軟體&amp;網站的上傳發佈，同時也支援這些程式在Heroku專案的主機上建立專屬的本地資料庫<br>其主要使用PostgreSQL，是一種關聯性資料庫<br>關聯性資料庫是甚麼?你當成MySQL就好，總之就是相對嚴謹(麻煩)的一種資料庫語言</p>\n<p><img src=\"https://i.imgur.com/COzboBR.png\" alt=\"16-1\"> </p>\n<p>免費的Heroku Postgre提供1萬則的資料容量，只要你創建的DB總資料量超過這個數字後便無法寫入，並且會跟你收費以提高額度來支援更多的資料寫入量</p>\n<p>1萬這個數字說大不大說小不小，雖然說對於個人戶是夠用了，但如果長久維運，缺乏資料管理、造成資料堆積<br>又或是資料儲存的方式比較複雜，紀錄一次可能就會占用許多空間的話…實際上筆者覺得1萬行是完全不夠Bot使用的</p>\n<p>而且因為Heroku的操作都必須透過指令，只是程式的操作可能還好，在處理資料庫這種複雜的系統時，不自己寫一個圖形介面真的很難管理</p>\n<h2 id=\"替代方案\"><a href=\"#替代方案\" class=\"headerlink\" title=\"替代方案\"></a>替代方案</h2><p>結合上述，我們整理出Heroku 原生資料庫的兩大問題</p>\n<ul>\n<li>免費容量低</li>\n<li>管理困難</li>\n</ul>\n<p>筆者Bot的製作訴求是自動、便利、好維護<br>如果使用Heroku資料庫的話還要擔心或許哪天Heroku會忽然想不開，去更新他們的資料庫語法…這與筆者的需求是完全背道而馳的</p>\n<p>因此，我們需要一個替代方案，這個做法就是GoogleAppsScript !</p>\n<p><img src=\"https://i.imgur.com/w7gmbo5.jpg\" alt=\"16-2\"> </p>\n<p>GoogleAppsScript，簡稱GAS，不是容易爆炸的那個</p>\n<p>GAS是Google提供的一種程式檔，他使用JavaScript語言，並且自動引用Google提供的函式庫</p>\n<p>因為是Google自家產品，理所當然的，GAS可以輕鬆的調用Google旗下產品的資訊(例如Google文件，試算表等)</p>\n<p>並且GAS是一種存於Google雲端的程式，只要他正式發佈便也會是24小時自動運作的程序，不會消耗到筆者一毛錢!(重點)</p>\n<h2 id=\"GAS的規格\"><a href=\"#GAS的規格\" class=\"headerlink\" title=\"GAS的規格\"></a>GAS的規格</h2><p><img src=\"https://i.imgur.com/wLtCjIq.png\" alt=\"16-3\"> </p>\n<p>在本主題，我們將用試算表來儲存資料<br>藉由GAS來編寫API，供Bot調用&amp;獲取資料</p>\n<p>上圖是GAS提供給使用者做各種操作的具體上限，我們看第一行的基本使用者(gmail.com)即可</p>\n<p>Properties read&#x2F;write(屬性讀寫)<br>上限50000筆&#x2F;天</p>\n<p>URL Fetch calls(URL調用)<br>上限20000筆&#x2F;天</p>\n<p>先看URL Fetch calls，這句的意思是關於Bot一天內調用API的上限次數<br>如果Bot一天內對API的請求超過2萬次，Google就會中斷你的請求、並且給你一個大大的Error</p>\n<p>Properties read&#x2F;write代表的是你的程序對試算表讀寫的次數上限<br>如果我的API被呼叫一次，程序就會對試算表做50000次的讀取，那這個API只要調用一次，今天的扣打就用完了(x</p>\n<p>這樣，我們得出一個結論<br>理論上，只要我的每個API內讀寫資料的次數平均介於2~3次<br>那我們一天的資料請求上限就會足足有2萬筆，直接是Heroku總上限的兩倍!</p>\n<p>當然這種做法也有他的弊端，Heroku的上限是總儲存上限，而我們的GAS上限是總調用上限<br>雖然隔天次數就會給你加滿，但只要我調用的次數足夠頻繁，理論上每天都會面臨資料無法再調用的問題，對於如何減少機器人的資料調用會需要做些功夫</p>\n<p>遠水救不了近火，試算表資料的調用途中經過GAS，再從住在Heroku的bot程序發送API跟GAS要資料<br>速度理所當然沒有像使用Heroku Postgre一樣即時</p>\n<p>因為試算表非正統SQL，SQL是一種專門為讀&#x2F;寫資料做優化的體系；當資料量大到一個程度時，效能一定沒有SQL好</p>\n<p>但同時GAS的好處也很明顯</p>\n<p>資料的儲存幾乎是無上限的<br>Google自帶的使用者介面讓管理十分容易，相對不用擔心資料備份等問題<br>新增刪除資料的方式都會比Heroku Postgre來的更加直觀<br>不用擔心未來因為GoogleAppsScript改版，資料會很難帶走，替代方案也多的是</p>\n<p>以上，便是筆者針對資料庫方案取捨的介紹<br>明天我們著手開始編寫基本的試算表資料跟GAS</p>\n",
            "tags": [
                "node.js",
                "bot",
                "discord",
                "discord.js",
                "教學",
                "12th鐵人賽"
            ]
        },
        {
            "id": "https://smilin.net/2020/09/15/12thDay15/",
            "url": "https://smilin.net/2020/09/15/12thDay15/",
            "title": "Day15 - Heroku架設&細部設定",
            "date_published": "2020-09-15T10:20:11.000Z",
            "content_html": "<p>早安<br>昨天我們把Heroku跟Git都安裝好了，今天我們要將我們的專案變成Git專案<br>並且推上Heroku</p>\n<span id=\"more\"></span>\n\n<h1 id=\"第一次推送專案\"><a href=\"#第一次推送專案\" class=\"headerlink\" title=\"第一次推送專案\"></a>第一次推送專案</h1><p>首先，跟之前一樣<br>我們先用VSCode開啟專案資料夾</p>\n<p><img src=\"https://i.imgur.com/ACltFP5.png\" alt=\"15-1\"></p>\n<p>確定終端機路徑正確後，輸入<br>git init</p>\n<p><img src=\"https://i.imgur.com/7aVXFF2.png\" alt=\"15-2\"></p>\n<p>左側的檔案都變得綠綠的<br>如果你有看的到隱藏資料夾的話，在專案底下還會看到一個.git的隱藏資料夾<br>那就是用來識別git專案的檔案，也是執行git語言時的依據</p>\n<p>這樣專案就轉換成git專案了，然後我們接下來要在heroku上創建一個專案庫<br>專案名稱的命名方式大多為 aaa-bbb-ccc<br>第一個字必須為小寫，且不能與其他在heroku上的專案撞名，所以越獨特越好<br>這邊筆者的專案名稱取做 the-bot-alice-on-heroku<br>我們輸入<br>heroku create 你的專案名稱</p>\n<p><img src=\"https://i.imgur.com/rpv8elG.png\" alt=\"15-3\"></p>\n<p>這時候如果到這裡看，成功的話就會看到剛剛創建的專案了<br><a href=\"https://dashboard.heroku.com/\">https://dashboard.heroku.com/</a></p>\n<p><img src=\"https://i.imgur.com/KXLt0MO.png\" alt=\"15-4\"></p>\n<p>我們繼續輸入</p>\n<p>git add .<br>git commit -m init<br>git push heroku master</p>\n<p><img src=\"https://i.imgur.com/FJAbH1V.png\" alt=\"15-5\"></p>\n<p>最後有看到Build succeeded就是成功了!<br>這三個指令的意思依序是</p>\n<p>git add .<br>將目錄下的所有檔案加入git控管</p>\n<p>git commit -m init<br>將git控管下的檔案全部加入本次要推送的版本，因為是第一次推送所以是init，之後第n次推送的話程式碼要改成 git commit -m ‘版本說明’</p>\n<p>git push heroku master<br>將commit起來的版本推送(上傳)到heroku的主分支，總之就是上傳檔案</p>\n<p>所以之後如果要更新程式，都是依序使用這三個命令來上傳機器人</p>\n<p>接著我們運行看看<br>heroku logs –t</p>\n<p><img src=\"https://i.imgur.com/BezAjQn.png\" alt=\"15-6\"></p>\n<p>這是呼叫heroku的控制後台，相當於在看遠端主機運行程序時的終端機<br>要退出時按ctrl+c退出</p>\n<p>可以看到對方也接收到我們上傳的檔案，有一個Build succeeded<br>但是後面都是npm ERR<br>以及可以看到他嘗試使用 npm start 來運行我們的專案<br>還記得我們的程序啟動試透過甚麼方式嗎?<br>沒錯，node bot!</p>\n<h1 id=\"平台設定\"><a href=\"#平台設定\" class=\"headerlink\" title=\"平台設定\"></a>平台設定</h1><p>我們在專案的根目錄新增一個檔案，取名叫做Procfile</p>\n<p><img src=\"https://i.imgur.com/4Xl8BEd.png\" alt=\"15-7\"></p>\n<p>裡面只有一行，寫上<br>worker: node bot</p>\n<p>可以看到，檔案在取名為Procfile後，icon會變成Heroku的標誌<br>這是Heroku可以辨識的檔案，作用是指定Heroku的啟動命令<br>worker是代表我們要運行的啟動命令是worker(程序)<br>heroku預設的啟動命令屬於web(網頁)</p>\n<p>寫好後，我們再做一次推送<br>git add .<br>git commit -m ‘npm bot’<br>git push heroku master</p>\n<p><img src=\"https://i.imgur.com/foAIKIR.png\" alt=\"15-8\"></p>\n<p>push完，我們打開網頁，回到heroku控制台，進入我們的專案</p>\n<p><img src=\"https://i.imgur.com/gLPqwGs.png\" alt=\"15-9\"></p>\n<p>會看到，紅框處是我們的推送日誌，這也是用git來控管程式時的日誌檔</p>\n<p>藍框就顯示了我們程序的啟動方式，可以看到node bot已經出現在上面了，但是沒有開啟</p>\n<p>我們點擊紫框的Resources</p>\n<p><img src=\"https://i.imgur.com/s2C5V61.png\" alt=\"15-10\"></p>\n<p>將 npm start給關閉，node bot開啟，這樣回去主頁面看node bot也會是開啟的狀態了</p>\n<p>最後我們在終端機輸入 heroku restart</p>\n<p><img src=\"https://i.imgur.com/10oZqCf.png\" alt=\"15-11\"></p>\n<p>這是重啟專案的指令，當程序崩潰或是遇到任何問題時，都可以重啟看看</p>\n<p>heroku logs -t</p>\n<p><img src=\"https://i.imgur.com/ZVirlHw.png\" alt=\"15-12\"> </p>\n<p><img src=\"https://i.imgur.com/SrXdjRa.png\" alt=\"15-13\"></p>\n<p>成功!<br>到此為止，我們成功將Bot推送到Heroku上，以後不用我們自己運行<br>機器人也會是24小時運行了，給做到這邊的自己一個鼓勵吧^^</p>\n<h1 id=\"其他設定\"><a href=\"#其他設定\" class=\"headerlink\" title=\"其他設定\"></a>其他設定</h1><p>Heroku的免費時數預設是550小時&#x2F;月，如果說是自己幾個朋友使用是沒關係<br>當機器人在一個人數比較多的群組時，550小時是沒辦法支撐1個月的，每到月底、機器人就會想休息幾天</p>\n<p>但是!如果你有在Heroku的帳戶綁定信用卡的話，他會免費再給你450小時，每個月的免費時數會變成1000小時，運行機器人是完全足夠的!不用擔心會扣款</p>\n<p>我們點選右上角的設定</p>\n<p><img src=\"https://i.imgur.com/84iDGli.png\" alt=\"15-14\"></p>\n<p>點Billing，然後點Add credit card</p>\n<p><img src=\"https://i.imgur.com/Rqh5IfU.png\" alt=\"15-15\"></p>\n<p>再來就是綁卡流程，相信這部份不用截圖，各位自己會的</p>\n<p><img src=\"https://i.imgur.com/A1PkaAG.png\" alt=\"15-16\"></p>\n<p>綁完後，底下原本的550小時就會變成有1000小時的扣打了~</p>\n",
            "tags": [
                "node.js",
                "bot",
                "discord",
                "discord.js",
                "教學",
                "12th鐵人賽"
            ]
        },
        {
            "id": "https://smilin.net/2020/09/14/12thDay14/",
            "url": "https://smilin.net/2020/09/14/12thDay14/",
            "title": "Day14 - Heroku與Git，介紹與安裝",
            "date_published": "2020-09-14T06:10:55.000Z",
            "content_html": "<p>好勒，上禮拜我們終於把基本的音樂系統做好<br>現在你的機器人支援多種功能，加上你自己做的其他系統，已經是一個強大的機器人了!</p>\n<span id=\"more\"></span>\n\n<p>之後如果我要使用機器人，只要打開cmd運行node bot，然後電腦一直開著就好</p>\n<ul>\n<li>一直開著就好</li>\n<li>自己不在其他人就沒辦法使用bot</li>\n<li>程序如果掛掉要自已重啟</li>\n</ul>\n<p>其實這就是將自己的電腦做為後端主機在運行bot<br>而這方法對於平常沒有長時間開機習慣的使用者來說是略為有些負擔了<br>就算是順便開著也要擔心程式會不會自己崩潰跳閘</p>\n<p>也因此，今天我們就會來解決這個問題，同時也是終於能提到我們的主題啦</p>\n<hr>\n<h1 id=\"後端0負擔\"><a href=\"#後端0負擔\" class=\"headerlink\" title=\"後端0負擔\"></a>後端0負擔</h1><p>一個面向使用者的服務都會有<br>一個前端視覺介面(Discord)<br>一個後端(bot.js)<br>再在後端的後面獨立出一個資料庫主機就更好了(SQL)</p>\n<p>後端0負擔的意思是我們不必再支付運行程序的電費等維護費用<br>那麼該怎麼做才能實現呢?其實也很簡單，我們把程序給其他人的電腦跑，讓他幫你管就好，也就是</p>\n<h3 id=\"雲端託管\"><a href=\"#雲端託管\" class=\"headerlink\" title=\"雲端託管\"></a>雲端託管</h3><p><img src=\"https://i.imgur.com/7OKEagE.png\" alt=\"14-1\"></p>\n<p><a href=\"https://www.heroku.com/\">Heroku官方網站</a></p>\n<p>Heroku是支援多語言的全自動託管平台<br>只要將你的程序放上去並且做好相關設定，程序就會在他們的主機上自動運行</p>\n<h1 id=\"註冊Heroku帳號\"><a href=\"#註冊Heroku帳號\" class=\"headerlink\" title=\"註冊Heroku帳號\"></a>註冊Heroku帳號</h1><p>請先到<a href=\"https://signup.heroku.com/login\">這個網址</a>註冊帳號資訊</p>\n<p><img src=\"https://i.imgur.com/7PeESWm.png\" alt=\"14-2\"></p>\n<p>First name姓<br>Last name名<br>Email Address信箱<br>Role職業<br>Primary Development Language開發語言</p>\n<p>基本上只要信箱跟開發語言沒打錯選錯就好，填好後我們直接送出</p>\n<p><img src=\"https://i.imgur.com/N7yKXIJ.png\" alt=\"14-3\"></p>\n<p>到這個步驟就代表前面填的資料ok，請去收信</p>\n<p><img src=\"https://i.imgur.com/GeRJh01.png\" alt=\"14-4\"></p>\n<p>點擊信中的連結</p>\n<p><img src=\"https://i.imgur.com/oVhFOKt.png\" alt=\"14-5\"></p>\n<p>這邊他要你重複輸入密碼，需8碼，由英數符號組成</p>\n<p><img src=\"https://i.imgur.com/1PBEoJs.png\" alt=\"14-6\"></p>\n<p>一路確認後就會來到這裡了<br>這裡是heroku的後台，左側是創建我們的應用程序專案，右側是成立小組</p>\n<p>不過我們通常會透過 Heroku CLI 來操作，所以不用管這兩個東東，我們繼續做</p>\n<h1 id=\"安裝Heroku-CLI\"><a href=\"#安裝Heroku-CLI\" class=\"headerlink\" title=\"安裝Heroku CLI\"></a>安裝Heroku CLI</h1><p>點擊<a href=\"https://devcenter.heroku.com/articles/heroku-cli#windows\">這個網址</a></p>\n<p>按照你的作業系統安裝對應的版本，通常是Windows 64-bit</p>\n<p><img src=\"https://i.imgur.com/j8Nhzgo.jpg\" alt=\"14-7\"></p>\n<p>一路next就好，最後Close</p>\n<p>最後我們開啟終端機(cmd)，注意必須是重新開啟的cmd，安裝前已經開啟的不行<br>在上面輸入heroku<br><img src=\"https://i.imgur.com/Q5PDR5H.png\" alt=\"14-8\"></p>\n<p>只要出現類似這樣的畫面就代表安裝成功了<br>如果沒有成功出現，可以先重開機看看，再不然可能是你的安裝版本有錯，電腦不是64位元等</p>\n<p>成功的話我們繼續輸入 heroku login</p>\n<p><img src=\"https://i.imgur.com/4riBzSS.png\" alt=\"14-9\"></p>\n<p>在鍵盤上輸入除了q以外的按鍵 &#x3D; 同意他開啟瀏覽器提供登入</p>\n<p><img src=\"https://i.imgur.com/hIbxrs0.png\" alt=\"14-10\"></p>\n<p><img src=\"https://i.imgur.com/yUICBY3.png\" alt=\"14-11\"></p>\n<p>chrome會自動打開，因為我們前面剛在heroku註冊，所以網頁還存著登入訊息，直接按Log In，回頭看cmd就會顯示登入成功了!</p>\n<p>這樣Heroku CLI就裝好了，我們再來安裝Git</p>\n<h1 id=\"Git安裝\"><a href=\"#Git安裝\" class=\"headerlink\" title=\"Git安裝\"></a>Git安裝</h1><p>Git是一種提供程式版本控制的語言，最常見的例子是GitHub<br>透過Git語言，我們可以將專案製作成Git專案，然後透過Git將程式推送到雲端，並且保證每個版本間的修改與來源都得到紀錄</p>\n<p>Heroku正是依循Git的規則來上傳下載程式</p>\n<p>點擊<a href=\"https://git-scm.com/download/win\">這個網址</a></p>\n<p>一樣選擇對應的版本<br>安裝時的選項很多，請跟我底下的圖片選擇一樣</p>\n<p><img src=\"https://i.imgur.com/DprmCvj.jpg\" alt=\"14-12\"></p>\n<p><img src=\"https://i.imgur.com/Y0z1v5M.jpg\" alt=\"14-13\"></p>\n<p>路徑跟我不一樣沒關係，總之要照他預設給你的，不要改</p>\n<p><img src=\"https://i.imgur.com/MqCh8g0.jpg\" alt=\"14-14\"> </p>\n<p><img src=\"https://i.imgur.com/jsvzoZd.jpg\" alt=\"14-15\"></p>\n<p><img src=\"https://i.imgur.com/TlaJ0d8.jpg\" alt=\"14-16\"></p>\n<p><img src=\"https://i.imgur.com/ME0BGhq.jpg\" alt=\"14-17\"></p>\n<p><img src=\"https://i.imgur.com/NnHcvxN.jpg\" alt=\"14-18\"></p>\n<p><img src=\"https://i.imgur.com/EJs2X40.jpg\" alt=\"14-19\"></p>\n<p><img src=\"https://i.imgur.com/aw4G31d.jpg\" alt=\"14-20\"></p>\n<p><img src=\"https://i.imgur.com/ZJTODzR.jpg\" alt=\"14-21\"></p>\n<p>這樣就安裝好Git了，跟剛剛一樣，我們開一個新的cmd測試是否安裝成功</p>\n<p><img src=\"https://i.imgur.com/cG2Rs1B.png\" alt=\"14-22\"></p>\n<p>失敗的話，除了版本問題以外，有可能是PATH檔不正確，可以拿這個keyword去排除問題試試看</p>\n<p>都沒問題的話，我們輸入以下兩個指令</p>\n<p>git config –global user.name “smile”<br>git config –global user.email “<a href=\"mailto:&#x61;&#50;&#56;&#x38;&#x32;&#x36;&#x32;&#53;&#x32;&#x32;&#53;&#x32;&#x40;&#103;&#x6d;&#97;&#x69;&#108;&#x2e;&#x63;&#111;&#x6d;\">&#x61;&#50;&#56;&#x38;&#x32;&#x36;&#x32;&#53;&#x32;&#x32;&#53;&#x32;&#x40;&#103;&#x6d;&#97;&#x69;&#108;&#x2e;&#x63;&#111;&#x6d;</a>“</p>\n<p><img src=\"https://i.imgur.com/VMeScbF.png\" alt=\"14-23\"></p>\n<p>這是設定你的使用者名稱與信箱<br>我的名稱是smile，你要改成你自己的稱呼，信箱與heroku一樣就可以了</p>\n<p>之後透過git推送時，都會以這個稱呼與信箱來識別<br>這樣Heroku跟Git的前置作業都做好了，明天將專案推上Heroku</p>\n",
            "tags": [
                "node.js",
                "bot",
                "discord",
                "discord.js",
                "教學",
                "12th鐵人賽"
            ]
        },
        {
            "id": "https://smilin.net/2020/09/13/12thDay13/",
            "url": "https://smilin.net/2020/09/13/12thDay13/",
            "title": "Day13 - 嵌入式訊息embed與 bot 的指令表(額外)",
            "date_published": "2020-09-13T13:37:08.000Z",
            "content_html": "<p>今天說說Discord的另一種訊息方式，embed</p>\n<span id=\"more\"></span>\n\n<p><img src=\"https://i.imgur.com/6cCIVuN.png\" alt=\"13-1\"></p>\n<p>在Discord.js中被稱為MessageEmbed，訊息嵌入元素，總之就是嵌入式訊息</p>\n<p><img src=\"https://i.imgur.com/mw9N4MX.png\" alt=\"13-2\"></p>\n<p>跟一般傳送訊息的手段一樣是使用 send ，但是傳送的屬性從原本的文字(string)轉成是嵌入元素(Embed)</p>\n<p><img src=\"https://i.imgur.com/kQQYhth.png\" alt=\"13-3\"></p>\n<p>embed宣告後，透過其文檔底下的各個方法(methods)來賦予嵌入式訊息本身，要放入哪些資訊</p>\n<p><img src=\"https://i.imgur.com/rDwYLkd.png\" alt=\"14-4\"></p>\n<p>將一個一個訊息嵌入embed元素後，最後從send方法傳送到discord上，就是一則embed訊息了</p>\n<p><img src=\"https://i.imgur.com/gRPZpUI.png\" alt=\"14-5\"></p>\n<p>底下附上標準版的embed，請各位嘗試在最初教學的 ! 方法中新增一則help觸發句，將底下範例套入後，試著替換成自己的指令文檔吧!</p>\n<pre><code>const embed = new Discord.MessageEmbed()\n      .setColor(&#39;#0099ff&#39;)\n      .setTitle(&#39;Some title&#39;)\n      .setURL(&#39;https://discord.js.org/&#39;)\n      .setAuthor(&#39;Some name&#39;, &#39;https://i.imgur.com/wSTFkRM.png&#39;, &#39;https://discord.js.org&#39;)\n      .setDescription(&#39;Some description here&#39;)\n      .setThumbnail(&#39;https://i.imgur.com/wSTFkRM.png&#39;)\n      .addField(&#39;Regular field title&#39;, &#39;Some value here&#39;)\n      .addField(&#39;\\u200B&#39;, &#39;\\u200B&#39;)\n      .addField(&#39;Inline field title&#39;, &#39;Some value here&#39;, true)\n      .addField(&#39;Inline field title&#39;, &#39;Some value here&#39;, true)\n      .addField(&#39;Inline field title&#39;, &#39;Some value here&#39;, true)\n      .setImage(&#39;https://i.imgur.com/wSTFkRM.png&#39;)\n      .setTimestamp()\n      .setFooter(&#39;Some footer text here&#39;, &#39;https://i.imgur.com/wSTFkRM.png&#39;);\nmsg.channel.send(embed);\n</code></pre>\n",
            "tags": [
                "node.js",
                "bot",
                "discord",
                "discord.js",
                "教學",
                "12th鐵人賽"
            ]
        },
        {
            "id": "https://smilin.net/2020/09/12/12thDay12/",
            "url": "https://smilin.net/2020/09/12/12thDay12/",
            "title": "Day12 - Discord的訊息刪除與更新事件(額外)",
            "date_published": "2020-09-12T15:26:32.000Z",
            "content_html": "<p>欸…原本接下來想教後台託管與資料庫的教學的<br>但因為筆者禮拜五把文稿跟圖片還有範例程式全都留在公司了…所以這兩天筆者先教一下其他東西</p>\n<span id=\"more\"></span>\n\n<p>就當作是惡補前面沒講到的Discord.js功能，我們今天來說說Discord.js的其他事件監聽吧</p>\n<hr>\n<h1 id=\"刪除與更新事件\"><a href=\"#刪除與更新事件\" class=\"headerlink\" title=\"刪除與更新事件\"></a>刪除與更新事件</h1><p>目前我們的所有事件都是建立在<br>使用者發送訊息 -&gt; Discord廣播給機器人 -&gt; 機器人的Message事件觸發</p>\n<pre><code>client.on(&#39;message&#39;, msg =&gt; &#123;&#125;)\n</code></pre>\n<p>我們的 bot 是使用登入了 bot 自身 keyValue 的 client 來監聽 message 事件的</p>\n<p><img src=\"https://i.imgur.com/qXdmhzO.png\" alt=\"12-1\"><br><img src=\"https://i.imgur.com/hbkivnR.png\" alt=\"12-2\"></p>\n<p>這樣，我們在Client下的Event分類中，就會找的到message的內容</p>\n<p>在程序中Client代表我們機器人本身，他的Event直接表示了他能對那些事情做出反應<br>也因此，Client的Event功能非常的多</p>\n<p>今天我們來說說MessageDelete跟MessageUpdate事件，也就是當有人刪除訊息跟更新訊息的時要做的事情</p>\n<p><img src=\"https://i.imgur.com/OZ84Nlj.png\" alt=\"12-3\"><br><img src=\"https://i.imgur.com/FSfPNZq.png\" alt=\"12-4\"></p>\n<p>Discord.js的文庫其實也蠻簡單的，不用看那些英文在說甚麼，透過事件名稱跟屬性已經足夠我們知道<br>當有人刪除留言時，Discord會將Message返還給我們<br>當有人更新留言時，Discord會將oldMessage跟newMessage</p>\n<p><img src=\"https://i.imgur.com/ouPctCU.png\" alt=\"12-5\"></p>\n<p>請試著用console.log查看Discord分別給了我們甚麼內容吧!</p>\n<p>之後我們把屬性中我們需要的元素拿出來組成字串，發送到原本的頻道去</p>\n<pre><code>//抓刪 刪除事件\nclient.on(&#39;messageDelete&#39;, function (message) &#123;\n    if (!message.guild) return; //只要是來自群組的訊息\n    let mStr = &#39;&#39;;\n    try&#123;\n        mStr = mStr+\n            `事件 刪除\\n`+\n            `使用者 $&#123;message.member.user.username&#125;\\n`+\n            `群組 $&#123;message.channel.name&#125;\\n`+\n            `刪除內容 $&#123;message.content&#125;`;\n\n        client.channels.get(message.channel.id).send(mStr);\n    &#125;catch(err)&#123;\n        console.log(&quot;messageDeleteError&quot;,err);\n    &#125;\n&#125;);\n\n//抓刪 更新事件\nclient.on(&#39;messageUpdate&#39;, function (oldMessage, newMessage) &#123;\n    if (!oldMessage.guild || !newMessage.guild) return;\n    mStr = &#39;&#39;;\n    try &#123;\n        mStr = mStr +\n            `事件 更新\\n` +\n            `使用者 $&#123;oldMessage.member.user.username&#125;\\n` +\n            `群組   $&#123;oldMessage.channel.name&#125;\\n` +\n            `舊對話 $&#123;oldMessage.content&#125;\\n` +\n            `新對話 $&#123;newMessage.content&#125;`;\n\n        client.channels.get(oldMessage.channel.id).send(mStr);\n    &#125; catch (err) &#123;\n        console.log(&#39;messageUpdateError&#39;, err);\n    &#125;\n&#125;)\n</code></pre>\n<p>這樣，你的bot就會在頻道有人刪除訊息時接收訊息，然後把刪除的內容貼出來玩羞恥play了(</p>\n",
            "tags": [
                "node.js",
                "bot",
                "discord",
                "discord.js",
                "教學",
                "12th鐵人賽"
            ]
        }
    ]
}