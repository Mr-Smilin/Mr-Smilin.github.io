<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>微笑工房 • Posts by &#34;鐵人賽&#34; category</title>
        <link>https://smilin.net</link>
        <description>程式教學 C#/JAVA/HTML5/NODE.JS，後端開發，日常瑣記</description>
        <language>zh-TW</language>
        <pubDate>Wed, 30 Sep 2020 10:20:37 +0800</pubDate>
        <lastBuildDate>Wed, 30 Sep 2020 10:20:37 +0800</lastBuildDate>
        <category>node.js</category>
        <category>bot</category>
        <category>discord</category>
        <category>discord.js</category>
        <category>教學</category>
        <category>12th鐵人賽</category>
        <category>Alist</category>
        <category>Cloudflare</category>
        <category>日記</category>
        <category>docker</category>
        <category>javascript</category>
        <category>hexo</category>
        <category>fluid</category>
        <category>heroku</category>
        <category>render</category>
        <category>render.com</category>
        <category>Live2D</category>
        <category>Rust</category>
        <category>彈射世界</category>
        <category>遊戲</category>
        <category>腳本</category>
        <item>
            <guid isPermalink="true">https://smilin.net/2020/09/30/12thDayEnd/</guid>
            <title>沉沉入睡的回憶小姐，匆匆揚帆的時間先生</title>
            <link>https://smilin.net/2020/09/30/12thDayEnd/</link>
            <category>node.js</category>
            <category>bot</category>
            <category>discord</category>
            <category>discord.js</category>
            <category>12th鐵人賽</category>
            <category>日記</category>
            <pubDate>Wed, 30 Sep 2020 10:20:37 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;最初看到鐵人賽是大學二年級的時候，距離現在也就兩年，其實還挺短的&lt;/p&gt;
&lt;p&gt;因為早早為專題做準備…需要查資料？造訪了這個地方&lt;/p&gt;
&lt;p&gt;當時想都沒想過自己會寫鐵人賽(笑&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;hr&gt;
&lt;p&gt;都說大學的人生是最多采多姿的&lt;/p&gt;
&lt;p&gt;中間遇到了許多事情&lt;/p&gt;
&lt;p&gt;時常為了專題留校&lt;/p&gt;
&lt;p&gt;遇到可以一起努力的人&lt;/p&gt;
&lt;p&gt;偶而一起吃午餐&lt;/p&gt;
&lt;p&gt;每天都感到充實&lt;/p&gt;
&lt;p&gt;雖然不全是快樂的事情&lt;/p&gt;
&lt;p&gt;有許多寶貴的回憶呀&lt;/p&gt;
&lt;p&gt;想必有更多有趣的事情沒有去挖掘&lt;/p&gt;
&lt;p&gt;有更多的日子可以去揮霍&lt;/p&gt;
&lt;p&gt;不過也畢業了&lt;/p&gt;
&lt;p&gt;也有許多事是已經錯過的&lt;/p&gt;
&lt;p&gt;不會有機會再去嘗試了&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;最初參加鐵人賽的契機，表面上是想分享機器人的寫法，想增加自己履歷上的談資&lt;/p&gt;
&lt;p&gt;現在想來，只是希望可以嘗試更多事情吧&lt;/p&gt;
&lt;p&gt;想著也許這樣子做，我也會有甚麼改變&lt;/p&gt;
&lt;p&gt;雖然到後來，鐵人賽真的讓我感覺蠻辛苦的&lt;/p&gt;
&lt;p&gt;時常覺得，反正也不會有人來看我的文章&lt;/p&gt;
&lt;p&gt;並不是說不努力，我花了很多時間來想要教甚麼才好&lt;/p&gt;
&lt;p&gt;但就像自暴自棄一般的寫起流水帳了&lt;/p&gt;
&lt;p&gt;十分抱歉&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;那麼，時間也差不多到了&lt;/p&gt;
&lt;p&gt;有許多事情都還沒做&lt;/p&gt;
&lt;p&gt;有得必有失，想必之後也會繼續過著得一失一的日子吧&lt;/p&gt;
&lt;p&gt;儘管如此，我也會努力的&lt;/p&gt;
&lt;p&gt;因為想變得比現在更好。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smilin.net/2020/09/30/12thDay30/</guid>
            <title>Day30 - tag控管機制(4)</title>
            <link>https://smilin.net/2020/09/30/12thDay30/</link>
            <category>node.js</category>
            <category>bot</category>
            <category>discord</category>
            <category>discord.js</category>
            <category>教學</category>
            <category>12th鐵人賽</category>
            <pubDate>Wed, 30 Sep 2020 09:53:30 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;今天把tag的最後一件事做完&lt;/p&gt;
&lt;p&gt;將使用者從指定權限組移除&lt;br&gt;將指定權限組移除&lt;/p&gt;
&lt;p&gt;在tag入口新增Delete方法&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/7Y2m2Rl.png&#34; alt=&#34;30-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;創建實例&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/78vy8E8.png&#34; alt=&#34;30-2&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//從權限組中刪除使用者 OR 刪除權限組
function DeleteTag(msg) &amp;#123;
    try &amp;#123;
        if (DoUserID === &amp;#39;&amp;#39;) &amp;#123;
            tempIsAdmin = CheckID(msg, null, msg.author.id, function(msg, cmd, haveUserData) &amp;#123;
                if (haveUserData.IsAdmin) return true;
                else return false;
            &amp;#125;);
            if (tempIsAdmin) &amp;#123;
                nowDoFunction = DeleteTagNow;
                DoUserID = msg.author.id;
                DoData = new Array;
                msg.channel.send(&amp;#39;請問要編輯使用者權限還是權限組?\n1 使用者權限 / 2 權限組&amp;#39;);
            &amp;#125; else &amp;#123;
                msg.channel.send(&amp;#39;此指令只有管理員可執行&amp;#39;);
            &amp;#125;
        &amp;#125; else &amp;#123;
            msg.channel.send(&amp;#39;有其他人正在使用續行中，請稍等&amp;#39;);
        &amp;#125;
    &amp;#125; catch (err) &amp;#123;
        console.log(&amp;#39;DeleteTagError&amp;#39;, err);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;創建續行實例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//從權限組中刪除使用者 OR 刪除權限組(續行)
function DeleteTagNow(msg) &amp;#123;
    try &amp;#123;
        switch (DoingCount) &amp;#123;
            case 0:
                switch (msg.content) &amp;#123;
                    case &amp;#39;1&amp;#39;:
                        msg.channel.send(&amp;#39;請輸入要編輯的使用者ID&amp;#39;);
                        break;
                    case &amp;#39;2&amp;#39;:
                        DoingCount = 10;
                        msg.channel.send(&amp;#39;請輸入要編輯的權限組&amp;#39;);
                        break;
                    default:
                        DoingCount--;
                        msg.channel.send(&amp;#39;無法辨識訊息，請輸入1/2來選擇&amp;#39;);
                        break;
                &amp;#125;
                break;
            case 1:
                if (msg.content == &amp;#39;N&amp;#39;) &amp;#123;
                    CloseAllDoingFunction();
                    msg.channel.send(&amp;#39;指令關閉&amp;#39;);
                &amp;#125; else &amp;#123;
                    if (CheckID(msg, null, msg.content, (msg, cmd, haveUserData) =&amp;gt; &amp;#123; return haveUserData &amp;#125;)) &amp;#123;
                        DoData.push(msg.content); //userID
                        DoData.push(msg.author.id); //userName
                        msg.channel.send(&amp;#39;請輸入要刪除的群組權限&amp;#39;);
                    &amp;#125; else &amp;#123;
                        DoingCount--;
                        msg.channel.send(&amp;#39;此用戶不存在資料，請確認，如果要關閉指令請輸入 N&amp;#39;);
                    &amp;#125;
                &amp;#125;
                break;
            case 2:
                DoData.push(msg.content); // Power
                DoData.push(false); // IsAdmin
                msg.channel.send(`申請資料如下:\n申請人 &amp;lt;@$&amp;#123;msg.author.id&amp;#125;&amp;gt;\n使用者 &amp;lt;@$&amp;#123;DoData[0]&amp;#125;&amp;gt;\n刪除權限組 $&amp;#123;DoData[2]&amp;#125;\n正確 Y / 錯誤 N`);
                break;
            case 3:
                if (msg.content === &amp;#39;Y&amp;#39;) &amp;#123;
                    msg.channel.send(&amp;#39;已確認，輸入資料中...&amp;#39;);
                    //與舊資料比對，已有此人資料變進行更新
                    CheckID(msg, null, DoData[0], DeleteOldUserPower);
                    GetGas.postUserPower(DoData, function(dataED) &amp;#123;
                        if (dataED) &amp;#123;
                            //bot內變數不會更新，手動更新
                            UserPowerData.unshift(&amp;#123;
                                &amp;#39;userID&amp;#39;: DoData[0],
                                &amp;#39;userName&amp;#39;: DoData[1],
                                &amp;#39;Joins&amp;#39;: DoData[2],
                                &amp;#39;IsAdmin&amp;#39;: DoData[3]
                            &amp;#125;);
                            msg.channel.send(&amp;#39;輸入完畢!&amp;#39;);
                        &amp;#125; else &amp;#123;
                            msg.channel.send(&amp;#39;資料輸入失敗，請重新嘗試&amp;#39;);
                        &amp;#125;
                        CloseAllDoingFunction();
                    &amp;#125;);
                &amp;#125; else if (msg.content === &amp;#39;N&amp;#39;) &amp;#123;
                    CloseAllDoingFunction();
                    msg.channel.send(&amp;#39;已取消行為，請重新下達指令&amp;#39;)
                &amp;#125; else &amp;#123;
                    DoingCount--;
                    msg.channel.send(&amp;#39;無法辨識訊息，請輸入Y/N來選擇&amp;#39;);
                &amp;#125;
                break;
            case 11:
                DoData.push(msg.content); //身分組ID
                DoData.push(&amp;#39;2&amp;#39;); //type 2
                DoData.push(&amp;#39;&amp;#39;);
                msg.channel.send(`申請資料如下:\n申請人 &amp;lt;@$&amp;#123;msg.author.id&amp;#125;&amp;gt;\n刪除權限組 $&amp;#123;DoData[0]&amp;#125;\n正確 Y / 錯誤 N`);
                break;
            case 12:
                if (msg.content === &amp;#39;Y&amp;#39;) &amp;#123;
                    msg.channel.send(&amp;#39;已確認，輸入資料中...&amp;#39;);
                    //與舊資料比對，沒有此身分組資料清除
                    DeleteOldPartyPower();
                    if (DoData[0] != &amp;#39;&amp;#39;) &amp;#123;
                        GetGas.postPartyPower(DoData, function(dataED) &amp;#123;
                            if (dataED) &amp;#123;
                                //bot內變數不會更新，手動更新
                                PartyPowerData.unshift(&amp;#123;
                                    &amp;#39;ID&amp;#39;: DoData[0],
                                    &amp;#39;type&amp;#39;: DoData[1],
                                    &amp;#39;Power&amp;#39;: DoData[2]
                                &amp;#125;);
                                msg.channel.send(&amp;#39;輸入完畢!&amp;#39;);
                            &amp;#125; else &amp;#123;
                                msg.channel.send(&amp;#39;資料輸入失敗，請重新嘗試&amp;#39;);
                            &amp;#125;
                            CloseAllDoingFunction();
                        &amp;#125;);
                    &amp;#125; else &amp;#123;
                        msg.channel.send(&amp;#39;輸入完畢!&amp;#39;);
                        CloseAllDoingFunction();
                    &amp;#125;
                &amp;#125; else if (msg.content === &amp;#39;N&amp;#39;) &amp;#123;
                    CloseAllDoingFunction();
                    msg.channel.send(&amp;#39;已取消行為，請重新下達指令&amp;#39;)
                &amp;#125; else &amp;#123;
                    DoingCount--;
                    msg.channel.send(&amp;#39;無法辨識訊息，請輸入Y/N來選擇&amp;#39;);
                &amp;#125;
                break;
        &amp;#125;
        if (DoUserID !== &amp;#39;&amp;#39;) DoingCount++;
    &amp;#125; catch (err) &amp;#123;
        CloseAllDoingFunction();
        client.channels.fetch(msg.channel.id).then(channel =&amp;gt; channel.send(&amp;#39;發生意外錯誤，中斷指令行為，請重新下達指令!&amp;#39;))
        console.log(&amp;#39;DeleteTagNowError&amp;#39;, err);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;創建刪除類方法&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/QZUmmzj.png&#34; alt=&#34;30-3&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//用戶舊資料更新
function DeleteOldUserPower(msg, cmd, haveUserData) &amp;#123;
    //二次確認
    if (haveUserData) &amp;#123;
        if (DoData[0] == haveUserData.userID) &amp;#123;
            let str = haveUserData.Joins;
            DoData[2] = str.toString().replace(DoData[2], &amp;#39;&amp;#39;);
            DoData[3] = haveUserData.IsAdmin;
            return true;
        &amp;#125; else return false;
    &amp;#125; else return false;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/6x3lpht.png&#34; alt=&#34;30-4&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//權限組舊資料更新
function DeleteOldPartyPower() &amp;#123;
    if (PartyPowerData) &amp;#123;
        const tempPartyData = PartyPowerData.find(element =&amp;gt; &amp;#123;
            return element.ID == DoData[0];
        &amp;#125;)

        if (tempPartyData == undefined) &amp;#123;
            DoData[0] = &amp;#39;&amp;#39;;
            DoData[1] = &amp;#39;&amp;#39;;
            DoData[2] = &amp;#39;&amp;#39;;
        &amp;#125;
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;運行看看&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/QrQC5iq.png&#34; alt=&#34;30-5&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/vbEQ8EO.png&#34; alt=&#34;30-6&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/q9MDunU.png&#34; alt=&#34;30-7&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/RUpxxCl.png&#34; alt=&#34;30-8&#34;&gt;&lt;/p&gt;
&lt;p&gt;成功&lt;/p&gt;
&lt;p&gt;到此，番外的部分也說完了&lt;/p&gt;
&lt;p&gt;與基本的內容不同，多說了post的API，以及程式碼的部份相對複雜&lt;br&gt;且比起前面的篇幅，後續的文章大多都是直接貼了程式碼的順序，很少講解&lt;/p&gt;
&lt;p&gt;想必讀起來十分艱澀吧?能讀到這裡的你是十分了不起的，恭喜你看完了這篇文章&lt;/p&gt;
&lt;p&gt;儘管如此，這支程式仍然是不成熟的，筆者對每個功能盡量都只是點到為止，希望能把大部份的應用都帶到，後面便是要靠各位讀者&lt;br&gt;根據自己遇到的需求，來改善加強他吧，相信只要努力堅持，完成後的機器人一定會帶給各位程式能力上的提升的&lt;/p&gt;
&lt;p&gt;那麼，用Node.js製作後台零負擔的DiscordBot到此結束&lt;br&gt;祝各位中秋佳節愉快&lt;/p&gt;
&lt;p&gt;底下附上完整的bot.js，供參考&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//#region 全域變數
const Discord = require(&amp;#39;discord.js&amp;#39;);
const client = new Discord.Client();
const ytdl = require(&amp;#39;ytdl-core&amp;#39;);
const ytpl = require(&amp;#39;ytpl&amp;#39;);
const auth = require(&amp;#39;./JSONHome/auth.json&amp;#39;);
const prefix = require(&amp;#39;./JSONHome/prefix.json&amp;#39;);
const GetGas = require(&amp;#39;./Script/GetGas.js&amp;#39;);
const shup = require(&amp;#39;./JSONHome/shup.json&amp;#39;);

//存放BaseExcelAPI資料
let BaseExcelData = false;
let UserPowerData = false;
let PartyPowerData = false;

//持續執行方法
let nowDoFunction = false;
let DoingCount = 0;
let DoUserID = &amp;#39;&amp;#39;;
let DoData = undefined;

//#endregion

//#region 登入
client.login(auth.key);

client.on(&amp;#39;ready&amp;#39;, () =&amp;gt; &amp;#123;
    GetGas.getBaseExcel(function(dataED) &amp;#123;
        if (dataED) &amp;#123;
            BaseExcelData = dataED //有資料
        &amp;#125;
        GetGas.getUserPower(function(dataED) &amp;#123;
            if (dataED) &amp;#123;
                UserPowerData = dataED;
            &amp;#125;
            GetGas.getPartyPower(function(dataED) &amp;#123;
                if (dataED) &amp;#123;
                    PartyPowerData = dataED;
                &amp;#125;
                console.log(`Logged in as $&amp;#123;client.user.tag&amp;#125;!`);
            &amp;#125;);
        &amp;#125;)
    &amp;#125;)
&amp;#125;);

//#endregion

//#region message事件入口
client.on(&amp;#39;message&amp;#39;, msg =&amp;gt; &amp;#123;
    //前置判斷
    try &amp;#123;
        if (!msg.guild || !msg.member) return; //訊息內不存在guild元素 = 非群組消息(私聊)
        if (!msg.member.user) return; //幫bot值多拉一層，判斷上層物件是否存在
        if (msg.member.user.bot) return; //訊息內bot值為正 = 此消息為bot發送
    &amp;#125; catch (err) &amp;#123;
        return;
    &amp;#125;

    //續行方法
    if (nowDoFunction &amp;amp;&amp;amp; msg.author.id === DoUserID) &amp;#123;
        nowDoFunction(msg);
        return;
    &amp;#125;

    //字串分析
    try &amp;#123;
        let tempPrefix = &amp;#39;-1&amp;#39;;
        const prefixED = Object.keys(prefix); //前綴符號定義
        prefixED.forEach(element =&amp;gt; &amp;#123;
            if (msg.content.substring(0, prefix[element].Value.length) === prefix[element].Value) &amp;#123;
                tempPrefix = element;
            &amp;#125;
        &amp;#125;);

        //禁言系統判斷
        if (!IsShut(msg, tempPrefix)) return;

        //實作
        switch (tempPrefix) &amp;#123;
            case &amp;#39;0&amp;#39;: //文字回應功能
                BasicFunction(msg, tempPrefix);
                break;
            case &amp;#39;1&amp;#39;: //音樂指令 
                MusicFunction(msg);
                break;
            case &amp;#39;2&amp;#39;: //機器人tag指令
                TagFunction(msg, tempPrefix);
                break;
            default:
                BaseExcelFunction(msg);
                break;
        &amp;#125;
    &amp;#125; catch (err) &amp;#123;
        console.log(&amp;#39;OnMessageError&amp;#39;, err);
    &amp;#125;
&amp;#125;);

//#endregion

//#region 基本指令系統
function BasicFunction(msg, tempPrefix) &amp;#123;
    const cmd = msg.content.substring(prefix[tempPrefix].Value.length).split(&amp;#39; &amp;#39;); //以空白分割前綴以後的字串
    switch (cmd[0]) &amp;#123;
        case &amp;#39;ping&amp;#39;:
            msg.channel.send(&amp;#39;pong&amp;#39;);
            break;
        case &amp;#39;老婆&amp;#39;:
            msg.reply(&amp;#39;你沒有老婆!!&amp;#39;);
            break;
        case &amp;#39;myAvatar&amp;#39;:
            const avatar = GetMyAvatar(msg);
            if (avatar.files) msg.channel.send(`$&amp;#123;msg.author&amp;#125;`, avatar).catch(err =&amp;gt; &amp;#123; console.log(err) &amp;#125;);
            break;
            // case &amp;#39;test&amp;#39;:
            //     const testStr2 = msg.content.split(&amp;#39; &amp;#39;);
            //     console.log(client.users.fetch(testStr2[1]).then(element =&amp;gt; console.log(element.displayAvatarURL())));
            //     break;
    &amp;#125;
&amp;#125;

//#endregion

//#region 音樂系統
//歌曲控制器
let dispatcher = new Map();
//歌曲清單
let musicList = new Map();

function MusicFunction(msg) &amp;#123;
    //將訊息內的前綴字截斷，後面的字是我們要的
    const content = msg.content.substring(prefix[1].Value.length);
    //指定我們的間隔符號
    const splitText = &amp;#39; &amp;#39;;
    //用間隔符號隔開訊息 contents[0] = 指令,contents[1] = 參數
    const contents = content.split(splitText);
    //因為會持續使用到，將群組ID獨立成參數
    const guildID = msg.guild.id;

    switch (contents[0]) &amp;#123;
        case &amp;#39;play&amp;#39;:
            //點歌&amp;amp;播放歌曲功能
            playMusic(guildID, msg, contents);
            break;
        case &amp;#39;replay&amp;#39;:
            //重播當前歌曲
            replayMusic(guildID);
            break;
        case &amp;#39;np&amp;#39;:
            //當前歌曲資訊
            nowPlayMusic(guildID, msg.channel.id);
            break;
        case &amp;#39;queue&amp;#39;:
            //歌曲清單
            queueShow(guildID, msg.channel.id);
            break;
        case &amp;#39;skip&amp;#39;:
            //中斷歌曲
            skipMusic(guildID);
            break;
        case &amp;#39;disconnect&amp;#39;:
            //退出語音頻道並且清空歌曲清單
            disconnectMusic(guildID, msg.channel.id);
            break;
        case &amp;#39;playList&amp;#39;:
            //載入歌單
            playListMusic(guildID, msg);
            break;
    &amp;#125;
&amp;#125;

//?play
async function playMusic(guildID, msg, contents) &amp;#123;
    //定義我們的第一個參數必需是網址
    const urlED = contents[1];
    try &amp;#123;
        //第一個參數不是連結就要篩選掉
        if (urlED.substring(0, 4) !== &amp;#39;http&amp;#39;) return msg.reply(&amp;#39;The link is not working.1&amp;#39;);

        //透過library判斷連結是否可運行
        const validate = await ytdl.validateURL(urlED);
        if (!validate) return msg.reply(&amp;#39;The link is not working.2&amp;#39;);

        //獲取歌曲資訊
        const info = await ytdl.getInfo(urlED);
        //判斷資訊是否正常
        if (info.videoDetails) &amp;#123;
            //指令下達者是否在語音頻道
            if (msg.member.voice.channel) &amp;#123;
                //判斷bot是否已經連到語音頻道 是:將歌曲加入歌單 不是:進入語音頻道並且播放歌曲
                if (!client.voice.connections.get(msg.guild.id)) &amp;#123;
                    //因為是第一次加入，宣告新的歌曲列表
                    musicList.set(guildID, new Array());

                    //將歌曲加入歌單
                    musicList.get(guildID).push(urlED);
                    //進入語音頻道
                    msg.member.voice.channel.join()
                        .then(connection =&amp;gt; &amp;#123;
                            msg.reply(&amp;#39;來了~&amp;#39;);
                            //const guildID = msg.guild.id;
                            const channelID = msg.channel.id;
                            //播放歌曲
                            playMusic2(connection, guildID, channelID);
                        &amp;#125;)
                        .catch(err =&amp;gt; &amp;#123;
                            msg.reply(&amp;#39;bot進入語音頻道時發生錯誤，請再試一次&amp;#39;);
                            console.log(err, &amp;#39;playMusicError2&amp;#39;);
                        &amp;#125;)
                &amp;#125; else &amp;#123;
                    //將歌曲加入歌單
                    musicList.get(guildID).push(urlED);
                    msg.reply(&amp;#39;已將歌曲加入歌單!&amp;#39;);
                &amp;#125;
            &amp;#125; else return msg.reply(&amp;#39;請先進入頻道:3...&amp;#39;);
        &amp;#125; else return msg.reply(&amp;#39;The link is not working.3&amp;#39;);
    &amp;#125; catch (err) &amp;#123;
        console.log(err, &amp;#39;playMusicError&amp;#39;);
    &amp;#125;
&amp;#125;

//?play 遞迴函式
async function playMusic2(connection, guildID, channelID) &amp;#123;
    try &amp;#123;
        //播放前歌曲清單不能沒有網址
        if (musicList.get(guildID).length &amp;gt; 0) &amp;#123;
            //設定音樂相關參數
            const streamOptions = &amp;#123;
                seek: 0,
                volume: 0.5,
                Bitrate: 192000,
                Passes: 1,
                highWaterMark: 1
            &amp;#125;;
            //讀取清單第一位網址
            const stream = await ytdl(musicList.get(guildID)[0], &amp;#123;
                filter: &amp;#39;audioonly&amp;#39;,
                quality: &amp;#39;highestaudio&amp;#39;,
                highWaterMark: 26214400 //25ms
            &amp;#125;)

            //播放歌曲，並且存入dispatcher
            dispatcher.set(guildID, connection.play(stream, streamOptions));
            //監聽歌曲播放結束事件
            dispatcher.get(guildID).on(&amp;quot;finish&amp;quot;, finish =&amp;gt; &amp;#123;
                //將清單中第一首歌清除
                if (musicList.get(guildID).length &amp;gt; 0) musicList.get(guildID).shift();
                //播放歌曲
                playMusic2(connection, guildID, channelID);
            &amp;#125;)
        &amp;#125; else disconnectMusic(guildID, channelID); //清空歌單並且退出語音頻道
    &amp;#125; catch (err) &amp;#123;
        console.log(err, &amp;#39;playMusic2Error&amp;#39;);
    &amp;#125;
&amp;#125;

//?disconnect
function disconnectMusic(guildID, channelID) &amp;#123;
    try &amp;#123;
        //判斷bot是否在此群組的語音頻道
        if (client.voice.connections.get(guildID)) &amp;#123;
            //清空歌曲清單
            musicList.set(guildID, new Array());
            //退出語音頻道
            client.voice.connections.get(guildID).disconnect();

            client.channels.fetch(channelID).then(channel =&amp;gt; channel.send(&amp;#39;晚安~&amp;#39;));
        &amp;#125; else client.channels.fetch(channelID).then(channel =&amp;gt; channel.send(&amp;#39;可是..我還沒進來:3&amp;#39;))
    &amp;#125; catch (err) &amp;#123;
        console.log(err, &amp;#39;disconnectMusicError&amp;#39;);
    &amp;#125;
&amp;#125;

//?replay
function replayMusic(guildID) &amp;#123;
    if (musicList.get(guildID).length &amp;gt; 0) &amp;#123;
        //把當前曲目再推一個到最前面
        musicList.get(guildID).unshift(musicList[0]);
        //將歌曲關閉，觸發finish事件
        //finish事件將清單第一首歌排出，然後繼續播放下一首
        if (dispatcher.get(guildID) !== undefined) dispatcher.get(guildID).end();
    &amp;#125;
&amp;#125;

//?skip
function skipMusic(guildID) &amp;#123;
    //將歌曲關閉，觸發finish事件
    if (dispatcher.get(guildID) !== undefined) dispatcher.get(guildID).end();
&amp;#125;

//?np
async function nowPlayMusic(guildID, channelID) &amp;#123;
    try &amp;#123;
        if (dispatcher.get(guildID) !== undefined &amp;amp;&amp;amp; musicList.get(guildID).length &amp;gt; 0) &amp;#123;
            //從連結中獲取歌曲資訊 標題 總長度等
            const info = await ytdl.getInfo(musicList.get(guildID)[0]);
            //歌曲標題
            const title = info.videoDetails.title;
            //歌曲全長(s)
            const songLength = info.videoDetails.lengthSeconds;
            //當前播放時間(ms)
            const nowSongLength = Math.floor(dispatcher.get(guildID).streamTime / 1000);
            //串字串
            const message = `$&amp;#123;title&amp;#125;\n$&amp;#123;streamString(songLength,nowSongLength)&amp;#125;`;
            client.channels.fetch(channelID).then(channel =&amp;gt; channel.send(message))
        &amp;#125;
    &amp;#125; catch (err) &amp;#123;
        console.log(err, &amp;#39;nowPlayMusicError&amp;#39;);
    &amp;#125;
&amp;#125;

//▬▬▬▬▬▬▬▬▬?▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
function streamString(songLength, nowSongLength) &amp;#123;
    let mainText = &amp;#39;?&amp;#39;;
    const secondText = &amp;#39;▬&amp;#39;;
    const whereMain = Math.floor((nowSongLength / songLength) * 100);
    let message = &amp;#39;&amp;#39;;
    for (i = 1; i &amp;lt;= 30; i++) &amp;#123;
        if (i * 3.3 + 1 &amp;gt;= whereMain) &amp;#123;
            message = message + mainText;
            mainText = secondText;
        &amp;#125; else &amp;#123;
            message = message + secondText;
        &amp;#125;
    &amp;#125;
    return message;
&amp;#125;

//?queue
async function queueShow(guildID, channelID) &amp;#123;
    try &amp;#123;
        if (musicList.get(guildID).length &amp;gt; 0) &amp;#123;
            let info;
            let message = &amp;#39;&amp;#39;;
            for (i = 0; i &amp;lt; musicList.get(guildID).length; i++) &amp;#123;
                //從連結中獲取歌曲資訊 標題 總長度等
                info = await ytdl.getInfo(musicList.get(guildID)[i]);
                //歌曲標題
                title = info.videoDetails.title;
                //串字串
                message = message + `\n$&amp;#123;i+1&amp;#125;. $&amp;#123;title&amp;#125;`;
            &amp;#125;
            //把最前面的\n拿掉
            message = message.substring(1, message.length);
            if (message.length &amp;gt; 1900) message = message.substring(0, 1900);
            client.channels.fetch(channelID).then(channel =&amp;gt; channel.send(message))
        &amp;#125;
    &amp;#125; catch (err) &amp;#123;
        console.log(err, &amp;#39;queueShowError&amp;#39;);
    &amp;#125;
&amp;#125;

//?playList
async function playListMusic(guildID, msg) &amp;#123;
    try &amp;#123;
        //沒在音樂廳不能使用此功能
        if (!client.voice.connections.get(guildID)) &amp;#123;
            msg.channel.send(`請先正常啟用音樂指令後，再使用歌單載入喔`);
            return false;
        &amp;#125;
        //網址
        const valueED = msg.content.split(&amp;#39; &amp;#39;);
        //先用library自帶的方式檢查一次能不能用
        const canPlay = await ytpl.validateID(valueED[1]);
        //讀取到幾首歌，上限默認100首
        let a = 0;
        //幾首成功放入歌單
        let b = 0;
        if (canPlay) &amp;#123;
            const listED = await ytpl(valueED[1]);
            await listED.items.forEach(async function(element) &amp;#123;
                a = a + 1;
                if (element.title !== &amp;#39;[Deleted video]&amp;#39;) &amp;#123;
                    canPlay2 = await ytdl.validateURL(element.url_simple);
                    if (canPlay2) &amp;#123;
                        b = b + 1;
                        musicList.get(guildID).push(element.url_simple);
                    &amp;#125;
                &amp;#125;
            &amp;#125;);
            //回傳統計資訊
            msg.channel.send(`歌單 $&amp;#123;listED.title&amp;#125;\n共載入$&amp;#123;b&amp;#125;首歌曲\n$&amp;#123;a-b&amp;#125;首載入失敗`);
        &amp;#125; else &amp;#123;
            msg.channel.send(`This Url isn&amp;#39;t working in function.`);
        &amp;#125;
    &amp;#125; catch (err) &amp;#123;
        console.log(err, &amp;#39;playListMusicError&amp;#39;);
    &amp;#125;
&amp;#125;
//#endregion

//#region tag系統
function TagFunction(msg, tempPrefix) &amp;#123;
    const cmd = msg.content.substring(prefix[tempPrefix].Value.length).split(&amp;#39; &amp;#39;); //以空白分割前綴以後的字串

    switch (cmd[0]) &amp;#123;
        case &amp;#39;AddUser&amp;#39;: //將使用者加入身份組
            addUserFunction(msg);
            break;
        case &amp;#39;CreateParty&amp;#39;: //創建身分組&amp;amp;增加身分組可tag對象
            CreatePartyFunction(msg);
            break;
        case &amp;#39;Delete&amp;#39;: //從權限組中刪除使用者 OR 刪除權限組
            DeleteTag(msg);
            break;
        default: //身份組ID
            tagOther(msg, cmd);
            break;
    &amp;#125;
&amp;#125;

//tag人
function tagOther(msg, cmd) &amp;#123;
    CheckID(msg, cmd, msg.author.id, (msg, cmd, haveUserData) =&amp;gt; &amp;#123;
        CheckParty(msg, cmd, haveUserData, SendTagMessage);
    &amp;#125;);
&amp;#125;

//判斷此人有沒有登記資料
function CheckID(msg, cmd, userID, OtherFunction) &amp;#123;
    const haveUserData = UserPowerData.find(element =&amp;gt; &amp;#123;
        return element.userID == userID;
    &amp;#125;)

    if (haveUserData !== undefined) &amp;#123;
        //有資料
        return OtherFunction(msg, cmd, haveUserData);
    &amp;#125; else &amp;#123;
        return OtherFunction(msg, cmd, false);
    &amp;#125;
&amp;#125;

//根據UserPower獲得Party
function CheckParty(msg, cmd, haveUserData, OtherFunction) &amp;#123;
    let havePartyPower;
    havePartyPower = PartyPowerData.filter(element =&amp;gt; &amp;#123;
        if (haveUserData.Joins[i].indexOf(element.ID) != -1) &amp;#123;
            return element.Power.indexOf(cmd[1]) != -1
        &amp;#125;
    &amp;#125;)

    if (isEmptyObject(havePartyPower)) &amp;#123;
        return OtherFunction(msg, cmd, haveUserData, false);
    &amp;#125; else &amp;#123;
        return OtherFunction(msg, cmd, haveUserData, havePartyPower);
    &amp;#125;
&amp;#125;

//傳送訊息單獨實例
function SendTagMessage(msg, cmd, haveUserData, havePartyPower) &amp;#123;
    if (haveUserData.IsAdmin) &amp;#123;
        msg.channel.send(`&amp;lt;@&amp;amp;$&amp;#123;cmd[1]&amp;#125;&amp;gt;\n來自管理員&amp;lt;@$&amp;#123;msg.author.id&amp;#125;&amp;gt;的指令呼叫`);
    &amp;#125; else if (havePartyPower) &amp;#123;
        msg.channel.send(`&amp;lt;@&amp;amp;$&amp;#123;cmd[1]&amp;#125;&amp;gt;\n來自&amp;lt;@$&amp;#123;msg.author.id&amp;#125;&amp;gt;的指令呼叫`);
    &amp;#125; else &amp;#123;
        msg.channel.send(&amp;#39;無權限，請確認參數是否正確&amp;#39;);
    &amp;#125;
&amp;#125;

//將xxx加入身分組
function addUserFunction(msg) &amp;#123;
    try &amp;#123;
        if (DoUserID === &amp;#39;&amp;#39;) &amp;#123;
            tempIsAdmin = CheckID(msg, null, msg.author.id, function(msg, cmd, haveUserData) &amp;#123;
                if (haveUserData.IsAdmin) return true;
                else return false;
            &amp;#125;);
            if (tempIsAdmin) &amp;#123;
                nowDoFunction = addUserFunctionNow;
                DoUserID = msg.author.id;
                DoData = new Array;
                msg.channel.send(&amp;#39;請輸入要加入的使用者id&amp;#39;);
            &amp;#125; else &amp;#123;
                msg.channel.send(&amp;#39;此指令只有管理員可執行&amp;#39;);
            &amp;#125;
        &amp;#125; else &amp;#123;
            msg.channel.send(&amp;#39;有其他人正在使用續行中，請稍等&amp;#39;);
        &amp;#125;
    &amp;#125; catch (err) &amp;#123;
        console.log(&amp;#39;addUserFunctionError&amp;#39;, err);
    &amp;#125;
&amp;#125;

//將xxx加入身份組(續行方法)
function addUserFunctionNow(msg) &amp;#123;
    try &amp;#123;
        switch (DoingCount) &amp;#123;
            case 0:
                DoData.push(msg.content); //加入使用者id
                DoData.push(msg.author.username); //加入申請者名字
                msg.channel.send(`請輸入要加入的群組`);
                break;
            case 1:
                DoData.push(msg.content); //加入群組
                DoData.push(false); //IsAdmin預設False不可修改
                msg.channel.send(`申請資料如下:\n申請人 &amp;lt;@$&amp;#123;msg.author.id&amp;#125;&amp;gt;\n使用者 &amp;lt;@$&amp;#123;DoData[0]&amp;#125;&amp;gt;\n加入權限組 $&amp;#123;DoData[2]&amp;#125;\n正確 Y / 錯誤 N`);
                break;
            case 2:
                if (msg.content === &amp;#39;Y&amp;#39;) &amp;#123;
                    msg.channel.send(&amp;#39;已確認，輸入資料中...&amp;#39;);
                    //與舊資料比對，已有此人資料變進行更新
                    CheckID(msg, null, DoData[0], EditOldUserPower);
                    GetGas.postUserPower(DoData, function(dataED) &amp;#123;
                        if (dataED) &amp;#123;
                            //bot內變數不會更新，手動更新
                            UserPowerData.unshift(&amp;#123;
                                &amp;#39;userID&amp;#39;: DoData[0],
                                &amp;#39;userName&amp;#39;: DoData[1],
                                &amp;#39;Joins&amp;#39;: DoData[2],
                                &amp;#39;IsAdmin&amp;#39;: DoData[3]
                            &amp;#125;);
                            msg.channel.send(&amp;#39;輸入完畢!&amp;#39;);
                        &amp;#125; else &amp;#123;
                            msg.channel.send(&amp;#39;資料輸入失敗，請重新嘗試&amp;#39;);
                        &amp;#125;
                        CloseAllDoingFunction();
                    &amp;#125;);
                &amp;#125; else if (msg.content === &amp;#39;N&amp;#39;) &amp;#123;
                    CloseAllDoingFunction();
                    msg.channel.send(&amp;#39;已取消行為，請重新下達指令&amp;#39;)
                &amp;#125; else &amp;#123;
                    DoingCount--;
                    msg.channel.send(&amp;#39;無法辨識訊息，請輸入Y/N來選擇&amp;#39;);
                &amp;#125;
                break;
        &amp;#125;
        if (DoUserID !== &amp;#39;&amp;#39;) DoingCount++;
    &amp;#125; catch (err) &amp;#123;
        CloseAllDoingFunction();
        client.channels.fetch(msg.channel.id).then(channel =&amp;gt; channel.send(&amp;#39;發生意外錯誤，中斷指令行為，請重新下達指令!&amp;#39;))
        console.log(&amp;#39;addUserFunctionNowError&amp;#39;, err);
    &amp;#125;
&amp;#125;

//用戶舊資料更新
function EditOldUserPower(msg, cmd, haveUserData) &amp;#123;
    //二次確認
    if (haveUserData) &amp;#123;
        if (DoData[0] == haveUserData.userID) &amp;#123;
            DoData[2] = haveUserData.Joins + &amp;#39;;&amp;#39; + DoData[2];
            DoData[3] = haveUserData.IsAdmin;
            return true;
        &amp;#125; else return false;
    &amp;#125; else return false;
&amp;#125;

//用戶舊資料更新
function DeleteOldUserPower(msg, cmd, haveUserData) &amp;#123;
    //二次確認
    if (haveUserData) &amp;#123;
        if (DoData[0] == haveUserData.userID) &amp;#123;
            let str = haveUserData.Joins;
            DoData[2] = str.toString().replace(DoData[2], &amp;#39;&amp;#39;);
            DoData[3] = haveUserData.IsAdmin;
            return true;
        &amp;#125; else return false;
    &amp;#125; else return false;
&amp;#125;

//創建身分組&amp;amp;增加身分組可tag對象
function CreatePartyFunction(msg) &amp;#123;
    try &amp;#123;
        if (DoUserID === &amp;#39;&amp;#39;) &amp;#123;
            tempIsAdmin = CheckID(msg, null, msg.author.id, function(msg, cmd, haveUserData) &amp;#123;
                if (haveUserData) &amp;#123;
                    if (haveUserData.IsAdmin) return true;
                    else return false;
                &amp;#125; else return false;
            &amp;#125;);
            if (tempIsAdmin) &amp;#123;
                nowDoFunction = CreatePartyFunctionNow;
                DoUserID = msg.author.id;
                DoData = new Array;
                msg.channel.send(&amp;#39;請輸入身份組名稱&amp;#39;);
            &amp;#125; else &amp;#123;
                msg.channel.send(&amp;#39;此指令只有管理員可執行&amp;#39;);
            &amp;#125;
        &amp;#125; else &amp;#123;
            msg.channel.send(&amp;#39;有其他人正在使用續行中，請稍等&amp;#39;);
        &amp;#125;
    &amp;#125; catch (err) &amp;#123;
        console.log(&amp;#39;CreatePartyFunctionError&amp;#39;, err);
    &amp;#125;
&amp;#125;

//創建身分組&amp;amp;增加身分組可tag對象(續行)
function CreatePartyFunctionNow(msg) &amp;#123;
    try &amp;#123;
        switch (DoingCount) &amp;#123;
            case 0:
                DoData.push(msg.content); //身分組ID
                DoData.push(&amp;#39;2&amp;#39;); //type 2
                msg.channel.send(`請輸入要加入的tagID`);
                break;
            case 1:
                DoData.push(msg.content); //加入tagID
                msg.channel.send(`申請資料如下:\n申請人 &amp;lt;@$&amp;#123;msg.author.id&amp;#125;&amp;gt;\n權限組 $&amp;#123;DoData[0]&amp;#125;\ntagID $&amp;#123;DoData[2]&amp;#125;\n正確 Y / 錯誤 N`);
                break;
            case 2:
                if (msg.content === &amp;#39;Y&amp;#39;) &amp;#123;
                    msg.channel.send(&amp;#39;已確認，輸入資料中...&amp;#39;);
                    //與舊資料比對，已有此人資料變進行更新
                    EditOldPartyPower();
                    GetGas.postPartyPower(DoData, function(dataED) &amp;#123;
                        if (dataED) &amp;#123;
                            //bot內變數不會更新，手動更新
                            PartyPowerData.unshift(&amp;#123;
                                &amp;#39;ID&amp;#39;: DoData[0],
                                &amp;#39;type&amp;#39;: DoData[1],
                                &amp;#39;Power&amp;#39;: DoData[2]
                            &amp;#125;);
                            msg.channel.send(&amp;#39;輸入完畢!&amp;#39;);
                        &amp;#125; else &amp;#123;
                            msg.channel.send(&amp;#39;資料輸入失敗，請重新嘗試&amp;#39;);
                        &amp;#125;
                        CloseAllDoingFunction();
                    &amp;#125;);
                &amp;#125; else if (msg.content === &amp;#39;N&amp;#39;) &amp;#123;
                    CloseAllDoingFunction();
                    msg.channel.send(&amp;#39;已取消行為，請重新下達指令&amp;#39;)
                &amp;#125; else &amp;#123;
                    DoingCount--;
                    msg.channel.send(&amp;#39;無法辨識訊息，請輸入Y/N來選擇&amp;#39;);
                &amp;#125;
                break;
        &amp;#125;
        if (DoUserID !== &amp;#39;&amp;#39;) DoingCount++;
    &amp;#125; catch (err) &amp;#123;
        CloseAllDoingFunction();
        client.channels.fetch(msg.channel.id).then(channel =&amp;gt; channel.send(&amp;#39;發生意外錯誤，中斷指令行為，請重新下達指令!&amp;#39;))
        console.log(&amp;#39;CreatePartyFunctionNowError&amp;#39;, err);
    &amp;#125;
&amp;#125;

//權限組舊資料更新
function EditOldPartyPower() &amp;#123;
    if (PartyPowerData) &amp;#123;
        const tempPartyData = PartyPowerData.find(element =&amp;gt; &amp;#123;
            return element.ID == DoData[0];
        &amp;#125;)

        if (tempPartyData !== undefined) &amp;#123;
            DoData[2] = tempPartyData.Power + &amp;#39;;&amp;#39; + DoData[2];
        &amp;#125;
    &amp;#125;
&amp;#125;

//權限組舊資料更新
function DeleteOldPartyPower() &amp;#123;
    if (PartyPowerData) &amp;#123;
        const tempPartyData = PartyPowerData.find(element =&amp;gt; &amp;#123;
            return element.ID == DoData[0];
        &amp;#125;)

        if (tempPartyData == undefined) &amp;#123;
            DoData[0] = &amp;#39;&amp;#39;;
            DoData[1] = &amp;#39;&amp;#39;;
            DoData[2] = &amp;#39;&amp;#39;;
        &amp;#125;
    &amp;#125;
&amp;#125;

//從權限組中刪除使用者 OR 刪除權限組
function DeleteTag(msg) &amp;#123;
    try &amp;#123;
        if (DoUserID === &amp;#39;&amp;#39;) &amp;#123;
            tempIsAdmin = CheckID(msg, null, msg.author.id, function(msg, cmd, haveUserData) &amp;#123;
                if (haveUserData.IsAdmin) return true;
                else return false;
            &amp;#125;);
            if (tempIsAdmin) &amp;#123;
                nowDoFunction = DeleteTagNow;
                DoUserID = msg.author.id;
                DoData = new Array;
                msg.channel.send(&amp;#39;請問要編輯使用者權限還是權限組?\n1 使用者權限 / 2 權限組&amp;#39;);
            &amp;#125; else &amp;#123;
                msg.channel.send(&amp;#39;此指令只有管理員可執行&amp;#39;);
            &amp;#125;
        &amp;#125; else &amp;#123;
            msg.channel.send(&amp;#39;有其他人正在使用續行中，請稍等&amp;#39;);
        &amp;#125;
    &amp;#125; catch (err) &amp;#123;
        console.log(&amp;#39;DeleteTagError&amp;#39;, err);
    &amp;#125;
&amp;#125;

//從權限組中刪除使用者 OR 刪除權限組(續行)
function DeleteTagNow(msg) &amp;#123;
    try &amp;#123;
        switch (DoingCount) &amp;#123;
            case 0:
                switch (msg.content) &amp;#123;
                    case &amp;#39;1&amp;#39;:
                        msg.channel.send(&amp;#39;請輸入要編輯的使用者ID&amp;#39;);
                        break;
                    case &amp;#39;2&amp;#39;:
                        DoingCount = 10;
                        msg.channel.send(&amp;#39;請輸入要編輯的權限組&amp;#39;);
                        break;
                    default:
                        DoingCount--;
                        msg.channel.send(&amp;#39;無法辨識訊息，請輸入1/2來選擇&amp;#39;);
                        break;
                &amp;#125;
                break;
            case 1:
                if (msg.content == &amp;#39;N&amp;#39;) &amp;#123;
                    CloseAllDoingFunction();
                    msg.channel.send(&amp;#39;指令關閉&amp;#39;);
                &amp;#125; else &amp;#123;
                    if (CheckID(msg, null, msg.content, (msg, cmd, haveUserData) =&amp;gt; &amp;#123; return haveUserData &amp;#125;)) &amp;#123;
                        DoData.push(msg.content); //userID
                        DoData.push(msg.author.id); //userName
                        msg.channel.send(&amp;#39;請輸入要刪除的群組權限&amp;#39;);
                    &amp;#125; else &amp;#123;
                        DoingCount--;
                        msg.channel.send(&amp;#39;此用戶不存在資料，請確認，如果要關閉指令請輸入 N&amp;#39;);
                    &amp;#125;
                &amp;#125;
                break;
            case 2:
                DoData.push(msg.content); // Power
                DoData.push(false); // IsAdmin
                msg.channel.send(`申請資料如下:\n申請人 &amp;lt;@$&amp;#123;msg.author.id&amp;#125;&amp;gt;\n使用者 &amp;lt;@$&amp;#123;DoData[0]&amp;#125;&amp;gt;\n刪除權限組 $&amp;#123;DoData[2]&amp;#125;\n正確 Y / 錯誤 N`);
                break;
            case 3:
                if (msg.content === &amp;#39;Y&amp;#39;) &amp;#123;
                    msg.channel.send(&amp;#39;已確認，輸入資料中...&amp;#39;);
                    //與舊資料比對，已有此人資料變進行更新
                    CheckID(msg, null, DoData[0], DeleteOldUserPower);
                    GetGas.postUserPower(DoData, function(dataED) &amp;#123;
                        if (dataED) &amp;#123;
                            //bot內變數不會更新，手動更新
                            UserPowerData.unshift(&amp;#123;
                                &amp;#39;userID&amp;#39;: DoData[0],
                                &amp;#39;userName&amp;#39;: DoData[1],
                                &amp;#39;Joins&amp;#39;: DoData[2],
                                &amp;#39;IsAdmin&amp;#39;: DoData[3]
                            &amp;#125;);
                            msg.channel.send(&amp;#39;輸入完畢!&amp;#39;);
                        &amp;#125; else &amp;#123;
                            msg.channel.send(&amp;#39;資料輸入失敗，請重新嘗試&amp;#39;);
                        &amp;#125;
                        CloseAllDoingFunction();
                    &amp;#125;);
                &amp;#125; else if (msg.content === &amp;#39;N&amp;#39;) &amp;#123;
                    CloseAllDoingFunction();
                    msg.channel.send(&amp;#39;已取消行為，請重新下達指令&amp;#39;)
                &amp;#125; else &amp;#123;
                    DoingCount--;
                    msg.channel.send(&amp;#39;無法辨識訊息，請輸入Y/N來選擇&amp;#39;);
                &amp;#125;
                break;
            case 11:
                DoData.push(msg.content); //身分組ID
                DoData.push(&amp;#39;2&amp;#39;); //type 2
                DoData.push(&amp;#39;&amp;#39;);
                msg.channel.send(`申請資料如下:\n申請人 &amp;lt;@$&amp;#123;msg.author.id&amp;#125;&amp;gt;\n刪除權限組 $&amp;#123;DoData[0]&amp;#125;\n正確 Y / 錯誤 N`);
                break;
            case 12:
                if (msg.content === &amp;#39;Y&amp;#39;) &amp;#123;
                    msg.channel.send(&amp;#39;已確認，輸入資料中...&amp;#39;);
                    //與舊資料比對，沒有此身分組資料清除
                    DeleteOldPartyPower();
                    if (DoData[0] != &amp;#39;&amp;#39;) &amp;#123;
                        GetGas.postPartyPower(DoData, function(dataED) &amp;#123;
                            if (dataED) &amp;#123;
                                //bot內變數不會更新，手動更新
                                PartyPowerData.unshift(&amp;#123;
                                    &amp;#39;ID&amp;#39;: DoData[0],
                                    &amp;#39;type&amp;#39;: DoData[1],
                                    &amp;#39;Power&amp;#39;: DoData[2]
                                &amp;#125;);
                                msg.channel.send(&amp;#39;輸入完畢!&amp;#39;);
                            &amp;#125; else &amp;#123;
                                msg.channel.send(&amp;#39;資料輸入失敗，請重新嘗試&amp;#39;);
                            &amp;#125;
                            CloseAllDoingFunction();
                        &amp;#125;);
                    &amp;#125; else &amp;#123;
                        msg.channel.send(&amp;#39;輸入完畢!&amp;#39;);
                        CloseAllDoingFunction();
                    &amp;#125;
                &amp;#125; else if (msg.content === &amp;#39;N&amp;#39;) &amp;#123;
                    CloseAllDoingFunction();
                    msg.channel.send(&amp;#39;已取消行為，請重新下達指令&amp;#39;)
                &amp;#125; else &amp;#123;
                    DoingCount--;
                    msg.channel.send(&amp;#39;無法辨識訊息，請輸入Y/N來選擇&amp;#39;);
                &amp;#125;
                break;
        &amp;#125;
        if (DoUserID !== &amp;#39;&amp;#39;) DoingCount++;
    &amp;#125; catch (err) &amp;#123;
        CloseAllDoingFunction();
        client.channels.fetch(msg.channel.id).then(channel =&amp;gt; channel.send(&amp;#39;發生意外錯誤，中斷指令行為，請重新下達指令!&amp;#39;))
        console.log(&amp;#39;DeleteTagNowError&amp;#39;, err);
    &amp;#125;
&amp;#125;

//#endregion

//#region 對話資料庫系統
function BaseExcelFunction(msg) &amp;#123;
    const messageED = GetBaseExcelData(msg);
    if (messageED) msg.channel.send(messageED);
&amp;#125;

//#endregion

//#region 子類方法
//獲取頭像
function GetMyAvatar(msg) &amp;#123;
    try &amp;#123;
        return &amp;#123;
            files: [&amp;#123;
                attachment: msg.users.author.displayAvatarURL(&amp;#39;png&amp;#39;, true),
                name: &amp;#39;avatar.jpg&amp;#39;
            &amp;#125;]
        &amp;#125;;
    &amp;#125; catch (err) &amp;#123;
        console.log(&amp;#39;GetMyAvatar,Error&amp;#39;);
    &amp;#125;
&amp;#125;

//BaseExcel字串比對
function GetBaseExcelData(msg) &amp;#123;
    try &amp;#123;
        if (BaseExcelData) &amp;#123;
            const userMessage = msg.content;

            e = BaseExcelData.filter(element =&amp;gt; &amp;#123;
                return element.NAME === userMessage;
            &amp;#125;)

            if (e.length != 0) return e[0].VALUE;
            else return false;
        &amp;#125;
    &amp;#125; catch (err) &amp;#123;
        console.log(&amp;#39;GetBaseExcelDataError&amp;#39;, err);
    &amp;#125;
&amp;#125;

//禁言系統判斷
function IsShut(msg, tempPrefix) &amp;#123;
    //群組id
    const guildID = msg.guild.id;
    //頻道id
    const channelID = msg.channel.id;
    //當前狀態
    let status = true;

    //先判斷群組，群組判斷完判斷頻道(頻道權限優先於群組)
    const guildIF = shup.Group.find(element =&amp;gt; &amp;#123;
        if (element.GroupID == guildID) &amp;#123;
            return element.Power.indexOf(tempPrefix) !== -1;
        &amp;#125;
        return false;
    &amp;#125;)

    //找到資料 = 此群組存在Group中且Power存在此次指令代碼
    if (guildIF !== undefined) &amp;#123;
        status = false;
    &amp;#125;

    //頻道
    const channelIF = shup.Channel.find(element =&amp;gt; &amp;#123;
        if (element.ChannelID == channelID) &amp;#123;
            return true;
        &amp;#125;
        return false;
    &amp;#125;)

    //找到資料 = 此頻道存在Channel中
    if (channelIF !== undefined) &amp;#123;
        //Power有此資料=&amp;gt;禁用功能 無資料=&amp;gt;不設限
        if (channelIF.Power.indexOf(tempPrefix) !== -1) &amp;#123;
            status = false;
        &amp;#125; else &amp;#123;
            status = true;
        &amp;#125;
    &amp;#125;

    return status;
&amp;#125;

//ArrayIsEmpty
function isEmptyObject(obj) &amp;#123;
    return !Object.keys(obj).length;
&amp;#125;

//關閉續行方法
function CloseAllDoingFunction() &amp;#123;
    nowDoFunction = false;
    DoingCount = 0;
    DoUserID = &amp;#39;&amp;#39;;
    DoData = undefined;
&amp;#125;
//#endregion
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smilin.net/2020/09/29/12thDay29/</guid>
            <title>Day29 - tag控管機制(3)</title>
            <link>https://smilin.net/2020/09/29/12thDay29/</link>
            <category>node.js</category>
            <category>bot</category>
            <category>discord</category>
            <category>discord.js</category>
            <category>教學</category>
            <category>12th鐵人賽</category>
            <pubDate>Tue, 29 Sep 2020 09:27:13 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;昨天我們做好了 將使用者加入身份組指令&lt;br&gt;今天把 創建身分組的指令做好&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;跟昨天一樣，請先開啟GAS，身分組的GAS叫做getPartyPower&lt;br&gt;新增以下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/eqoYtRi.png&#34; alt=&#34;29-1&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function doPost(e)&amp;#123;
  var para = e.parameter; // 存放 post 所有傳送的參數
  
  var id = &amp;#39;1mQ6qTJfOs3Gv5--K9r87w56wmDc3hUcpHm5hF1YKTms&amp;#39;; //抓取表單
  var spreadsheet = SpreadsheetApp.openById(id); // Sheet id
  var sheet1 = spreadsheet.getSheetByName(&amp;quot;PartyPower&amp;quot;); // 根據表格名稱取表
  var rowLength = sheet1.getLastRow()-1;
  var columnLength = sheet1.getLastColumn();
  var data = sheet1.getRange(2,1,rowLength,columnLength).getValues(); // 取得的資料
  var ID   = para.ID,
      type = para.type,
      Power    = para.Power;
  
  var upData = [];
  
  for(i=0;i&amp;lt;=rowLength-1;i++)&amp;#123;
    upData = data[i]
    if((upData[0]==ID) == false)&amp;#123;
      upData = undefined;
    &amp;#125;
  
  
    if(upData != undefined)&amp;#123;
      sheet1.getRange(i+2, 1).setValue(ID);
      sheet1.getRange(i+2, 2).setValue(type);
      sheet1.getRange(i+2, 3).setValue(Power);
      return ContentService.createTextOutput(upData).setMimeType(ContentService.MimeType.JSON);
    &amp;#125;
  &amp;#125;
  
  
  sheet1.appendRow([ID,type,Power]); // 插入一列新的資料
  var dataExportFormat = JSON.stringify(para);
  return ContentService.createTextOutput(dataExportFormat).setMimeType(ContentService.MimeType.JSON);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;加到auth.json&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/0brSMZw.png&#34; alt=&#34;29-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;GetGas.js&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/9KlDFkj.png&#34; alt=&#34;29-3&#34;&gt;&lt;/p&gt;
&lt;p&gt;bot.js&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/oKcdCTg.png&#34; alt=&#34;29-4&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/nQgPf3p.png&#34; alt=&#34;29-5&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//創建身分組&amp;amp;增加身分組可tag對象(續行)
function CreatePartyFunctionNow(msg) &amp;#123;
    try &amp;#123;
        switch (DoingCount) &amp;#123;
            case 0:
                DoData.push(msg.content); //身分組ID
                DoData.push(&amp;#39;2&amp;#39;); //type 2
                msg.channel.send(`請輸入要加入的tagID`);
                break;
            case 1:
                DoData.push(msg.content); //加入tagID
                msg.channel.send(`申請資料如下:\n申請人 &amp;lt;@$&amp;#123;msg.author.id&amp;#125;&amp;gt;\n權限組 &amp;lt;@$&amp;#123;DoData[0]&amp;#125;&amp;gt;\ntagID $&amp;#123;DoData[2]&amp;#125;\n正確 Y / 錯誤 N`);
                break;
            case 2:
                if (msg.content === &amp;#39;Y&amp;#39;) &amp;#123;
                    msg.channel.send(&amp;#39;已確認，輸入資料中...&amp;#39;);
                    //與舊資料比對，已有此人資料變進行更新
                    EditOldPartyPower();
                    GetGas.postPartyPower(DoData, function(dataED) &amp;#123;
                        if (dataED) &amp;#123;
                            //bot內變數不會更新，手動更新
                            PartyPowerData.unshift(&amp;#123;
                                &amp;#39;ID&amp;#39;: DoData[0],
                                &amp;#39;type&amp;#39;: DoData[1],
                                &amp;#39;Power&amp;#39;: DoData[2]
                            &amp;#125;);
                            msg.channel.send(&amp;#39;輸入完畢!&amp;#39;);
                        &amp;#125; else &amp;#123;
                            msg.channel.send(&amp;#39;資料輸入失敗，請重新嘗試&amp;#39;);
                        &amp;#125;
                        CloseAllDoingFunction();
                    &amp;#125;);
                &amp;#125; else if (msg.content === &amp;#39;N&amp;#39;) &amp;#123;
                    CloseAllDoingFunction();
                    msg.channel.send(&amp;#39;已取消行為，請重新下達指令&amp;#39;)
                &amp;#125; else &amp;#123;
                    DoingCount--;
                    msg.channel.send(&amp;#39;無法辨識訊息，請輸入Y/N來選擇&amp;#39;);
                &amp;#125;
                break;
        &amp;#125;
        if (DoUserID !== &amp;#39;&amp;#39;) DoingCount++;
    &amp;#125; catch (err) &amp;#123;
        CloseAllDoingFunction();
        client.channels.fetch(msg.channel.id).then(channel =&amp;gt; channel.send(&amp;#39;發生意外錯誤，中斷指令行為，請重新下達指令!&amp;#39;))
        console.log(&amp;#39;CreatePartyFunctionNowError&amp;#39;, err);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/FB6RfAd.png&#34; alt=&#34;29-6&#34;&gt;&lt;/p&gt;
&lt;p&gt;作法基本上跟上次新增使用者一樣&lt;br&gt;試著運行看看&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/x3Qx41S.png&#34; alt=&#34;29-7&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Mf6vO49.png&#34; alt=&#34;29-8&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/VH2f5L2.png&#34; alt=&#34;29-9&#34;&gt;&lt;/p&gt;
&lt;p&gt;成功&lt;br&gt;明天就是最後一篇了，筆者會把刪除的指令做好&lt;br&gt;其實跟現在新增的作法是大同小異的，各位不彷試試看&lt;/p&gt;
&lt;p&gt;為了將CheckID與CheckParty的分工化更明確一點，因此有稍微修改程式碼&lt;br&gt;這邊貼上程式碼&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//#region tag系統
function TagFunction(msg, tempPrefix) &amp;#123;
    const cmd = msg.content.substring(prefix[tempPrefix].Value.length).split(&amp;#39; &amp;#39;); //以空白分割前綴以後的字串

    switch (cmd[0]) &amp;#123;
        case &amp;#39;AddUser&amp;#39;: //將使用者加入身份組
            addUserFunction(msg);
            break;
        case &amp;#39;CreateParty&amp;#39;: //創建身分組&amp;amp;增加身分組可tag對象
            CreatePartyFunction(msg);
            break;
        default: //身份組ID
            tagOther(msg, cmd);
            break;
    &amp;#125;
&amp;#125;

//tag人
function tagOther(msg, cmd) &amp;#123;
    CheckID(msg, cmd, msg.author.id, (msg, cmd, haveUserData) =&amp;gt; &amp;#123;
        CheckParty(msg, cmd, haveUserData, SendTagMessage);
    &amp;#125;);
&amp;#125;

//判斷此人有沒有登記資料
function CheckID(msg, cmd, userID, OtherFunction) &amp;#123;
    const haveUserData = UserPowerData.find(element =&amp;gt; &amp;#123;
        return element.userID == userID;
    &amp;#125;)

    if (haveUserData !== undefined) &amp;#123;
        //有資料
        return OtherFunction(msg, cmd, haveUserData);
    &amp;#125; else &amp;#123;
        return OtherFunction(msg, cmd, false);
    &amp;#125;
&amp;#125;

//根據UserPower獲得Party
function CheckParty(msg, cmd, haveUserData, OtherFunction) &amp;#123;
    let havePartyPower;
    havePartyPower = PartyPowerData.filter(element =&amp;gt; &amp;#123;
        if (haveUserData.Joins[i].indexOf(element.ID) != -1) &amp;#123;
            return element.Power.indexOf(cmd[1]) != -1
        &amp;#125;
    &amp;#125;)

    if (isEmptyObject(havePartyPower)) &amp;#123;
        OtherFunction(msg, cmd, haveUserData, false);
    &amp;#125; else &amp;#123;
        OtherFunction(msg, cmd, haveUserData, havePartyPower);
    &amp;#125;
&amp;#125;

//傳送訊息單獨實例
function SendTagMessage(msg, cmd, haveUserData, havePartyPower) &amp;#123;
    if (haveUserData.IsAdmin) &amp;#123;
        msg.channel.send(`&amp;lt;@&amp;amp;$&amp;#123;cmd[1]&amp;#125;&amp;gt;\n來自管理員&amp;lt;@$&amp;#123;msg.author.id&amp;#125;&amp;gt;的指令呼叫`);
    &amp;#125; else if (havePartyPower) &amp;#123;
        msg.channel.send(`&amp;lt;@&amp;amp;$&amp;#123;cmd[1]&amp;#125;&amp;gt;\n來自&amp;lt;@$&amp;#123;msg.author.id&amp;#125;&amp;gt;的指令呼叫`);
    &amp;#125; else &amp;#123;
        msg.channel.send(&amp;#39;無權限，請確認參數是否正確&amp;#39;);
    &amp;#125;
&amp;#125;

//將xxx加入身分組
function addUserFunction(msg) &amp;#123;
    try &amp;#123;
        if (DoUserID === &amp;#39;&amp;#39;) &amp;#123;
            tempIsAdmin = CheckID(msg, null, msg.author.id, function(msg, cmd, haveUserData) &amp;#123;
                if (haveUserData.IsAdmin) return true;
                else return false;
            &amp;#125;);
            if (tempIsAdmin) &amp;#123;
                nowDoFunction = addUserFunctionNow;
                DoUserID = msg.author.id;
                DoData = new Array;
                msg.channel.send(&amp;#39;請輸入要加入的使用者id&amp;#39;);
            &amp;#125; else &amp;#123;
                msg.channel.send(&amp;#39;此指令只有管理員可執行&amp;#39;);
            &amp;#125;
        &amp;#125; else &amp;#123;
            msg.channel.send(&amp;#39;有其他人正在使用續行中，請稍等&amp;#39;);
        &amp;#125;
    &amp;#125; catch (err) &amp;#123;
        console.log(&amp;#39;addUserFunctionError&amp;#39;, err);
    &amp;#125;
&amp;#125;

//將xxx加入身份組(續行方法)
function addUserFunctionNow(msg) &amp;#123;
    try &amp;#123;
        switch (DoingCount) &amp;#123;
            case 0:
                DoData.push(msg.content); //加入使用者id
                DoData.push(msg.author.username); //加入申請者名字
                msg.channel.send(`請輸入要加入的群組`);
                break;
            case 1:
                DoData.push(msg.content); //加入群組
                DoData.push(false); //IsAdmin預設False不可修改
                msg.channel.send(`申請資料如下:\n申請人 &amp;lt;@$&amp;#123;msg.author.id&amp;#125;&amp;gt;\n使用者 &amp;lt;@$&amp;#123;DoData[0]&amp;#125;&amp;gt;\n加入權限組 $&amp;#123;DoData[2]&amp;#125;\n正確 Y / 錯誤 N`);
                break;
            case 2:
                if (msg.content === &amp;#39;Y&amp;#39;) &amp;#123;
                    msg.channel.send(&amp;#39;已確認，輸入資料中...&amp;#39;);
                    //與舊資料比對，已有此人資料變進行更新
                    CheckID(msg, null, DoData[0], EditOldUserPower);
                    GetGas.postUserPower(DoData, function(dataED) &amp;#123;
                        if (dataED) &amp;#123;
                            //bot內變數不會更新，手動更新
                            UserPowerData.unshift(&amp;#123;
                                &amp;#39;userID&amp;#39;: DoData[0],
                                &amp;#39;userName&amp;#39;: DoData[1],
                                &amp;#39;Joins&amp;#39;: DoData[2],
                                &amp;#39;IsAdmin&amp;#39;: DoData[3]
                            &amp;#125;);
                            msg.channel.send(&amp;#39;輸入完畢!&amp;#39;);
                        &amp;#125; else &amp;#123;
                            msg.channel.send(&amp;#39;資料輸入失敗，請重新嘗試&amp;#39;);
                        &amp;#125;
                        CloseAllDoingFunction();
                    &amp;#125;);
                &amp;#125; else if (msg.content === &amp;#39;N&amp;#39;) &amp;#123;
                    CloseAllDoingFunction();
                    msg.channel.send(&amp;#39;已取消行為，請重新下達指令&amp;#39;)
                &amp;#125; else &amp;#123;
                    DoingCount--;
                    msg.channel.send(&amp;#39;無法辨識訊息，請輸入Y/N來選擇&amp;#39;);
                &amp;#125;
                break;
        &amp;#125;
        if (DoUserID !== &amp;#39;&amp;#39;) DoingCount++;
    &amp;#125; catch (err) &amp;#123;
        CloseAllDoingFunction();
        client.channels.fetch(msg.channel.id).then(channel =&amp;gt; channel.send(&amp;#39;發生意外錯誤，中斷指令行為，請重新下達指令!&amp;#39;))
        console.log(&amp;#39;addUserFunctionNowError&amp;#39;, err);
    &amp;#125;
&amp;#125;

//用戶舊資料更新
function EditOldUserPower(msg, cmd, haveUserData) &amp;#123;
    //二次確認
    if (haveUserData) &amp;#123;
        if (DoData[0] == haveUserData.userID) &amp;#123;
            DoData[2] = haveUserData.Joins + &amp;#39;;&amp;#39; + DoData[2];
            DoData[3] = haveUserData.IsAdmin;
            return true;
        &amp;#125; else return false;
    &amp;#125; else return false;
&amp;#125;

//創建身分組&amp;amp;增加身分組可tag對象
function CreatePartyFunction(msg) &amp;#123;
    try &amp;#123;
        if (DoUserID === &amp;#39;&amp;#39;) &amp;#123;
            tempIsAdmin = CheckID(msg, null, msg.author.id, function(msg, cmd, haveUserData) &amp;#123;
                if (haveUserData) &amp;#123;
                    if (haveUserData.IsAdmin) return true;
                    else return false;
                &amp;#125; else return false;
            &amp;#125;);
            if (tempIsAdmin) &amp;#123;
                nowDoFunction = CreatePartyFunctionNow;
                DoUserID = msg.author.id;
                DoData = new Array;
                msg.channel.send(&amp;#39;請輸入身份組名稱&amp;#39;);
            &amp;#125; else &amp;#123;
                msg.channel.send(&amp;#39;此指令只有管理員可執行&amp;#39;);
            &amp;#125;
        &amp;#125; else &amp;#123;
            msg.channel.send(&amp;#39;有其他人正在使用續行中，請稍等&amp;#39;);
        &amp;#125;
    &amp;#125; catch (err) &amp;#123;
        console.log(&amp;#39;CreatePartyFunctionError&amp;#39;, err);
    &amp;#125;
&amp;#125;

//創建身分組&amp;amp;增加身分組可tag對象(續行)
function CreatePartyFunctionNow(msg) &amp;#123;
    try &amp;#123;
        switch (DoingCount) &amp;#123;
            case 0:
                DoData.push(msg.content); //身分組ID
                DoData.push(&amp;#39;2&amp;#39;); //type 2
                msg.channel.send(`請輸入要加入的tagID`);
                break;
            case 1:
                DoData.push(msg.content); //加入tagID
                msg.channel.send(`申請資料如下:\n申請人 &amp;lt;@$&amp;#123;msg.author.id&amp;#125;&amp;gt;\n權限組 $&amp;#123;DoData[0]&amp;#125;\ntagID $&amp;#123;DoData[2]&amp;#125;\n正確 Y / 錯誤 N`);
                break;
            case 2:
                if (msg.content === &amp;#39;Y&amp;#39;) &amp;#123;
                    msg.channel.send(&amp;#39;已確認，輸入資料中...&amp;#39;);
                    //與舊資料比對，已有此人資料變進行更新
                    EditOldPartyPower();
                    GetGas.postPartyPower(DoData, function(dataED) &amp;#123;
                        if (dataED) &amp;#123;
                            //bot內變數不會更新，手動更新
                            PartyPowerData.unshift(&amp;#123;
                                &amp;#39;ID&amp;#39;: DoData[0],
                                &amp;#39;type&amp;#39;: DoData[1],
                                &amp;#39;Power&amp;#39;: DoData[2]
                            &amp;#125;);
                            msg.channel.send(&amp;#39;輸入完畢!&amp;#39;);
                        &amp;#125; else &amp;#123;
                            msg.channel.send(&amp;#39;資料輸入失敗，請重新嘗試&amp;#39;);
                        &amp;#125;
                        CloseAllDoingFunction();
                    &amp;#125;);
                &amp;#125; else if (msg.content === &amp;#39;N&amp;#39;) &amp;#123;
                    CloseAllDoingFunction();
                    msg.channel.send(&amp;#39;已取消行為，請重新下達指令&amp;#39;)
                &amp;#125; else &amp;#123;
                    DoingCount--;
                    msg.channel.send(&amp;#39;無法辨識訊息，請輸入Y/N來選擇&amp;#39;);
                &amp;#125;
                break;
        &amp;#125;
        if (DoUserID !== &amp;#39;&amp;#39;) DoingCount++;
    &amp;#125; catch (err) &amp;#123;
        CloseAllDoingFunction();
        client.channels.fetch(msg.channel.id).then(channel =&amp;gt; channel.send(&amp;#39;發生意外錯誤，中斷指令行為，請重新下達指令!&amp;#39;))
        console.log(&amp;#39;CreatePartyFunctionNowError&amp;#39;, err);
    &amp;#125;
&amp;#125;

//權限組舊資料更新
function EditOldPartyPower() &amp;#123;
    if (PartyPowerData) &amp;#123;
        const tempPartyData = PartyPowerData.find(element =&amp;gt; &amp;#123;
            return element.ID == DoData[0];
        &amp;#125;)

        if (tempPartyData !== undefined) &amp;#123;
            DoData[2] = tempPartyData.Power + &amp;#39;;&amp;#39; + DoData[2];
        &amp;#125;
    &amp;#125;
&amp;#125;

//#endregion
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smilin.net/2020/09/28/12thDay28/</guid>
            <title>Day28 - tag控管機制(2)</title>
            <link>https://smilin.net/2020/09/28/12thDay28/</link>
            <category>node.js</category>
            <category>bot</category>
            <category>discord</category>
            <category>discord.js</category>
            <category>教學</category>
            <category>12th鐵人賽</category>
            <pubDate>Mon, 28 Sep 2020 09:25:39 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;今天來把postAPI跟續行的框架與加入使用者至身份組的功能寫好&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;請打開之前再google雲端上創建的GAS ， getUserPower&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/cPksdp2.png&#34; alt=&#34;28-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;原本的程式寫在doGet方法，我們在doGet方法下新增一個doPost方法，然後寫上這些東西&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function doPost(e)&amp;#123;
  var para = e.parameter; // 存放 post 所有傳送的參數
  
  var id = &amp;#39;1mQ6qTJfOs3Gv5--K9r87w56wmDc3hUcpHm5hF1YKTms&amp;#39;; //抓取表單
  var spreadsheet = SpreadsheetApp.openById(id); // Sheet id
  var sheet1 = spreadsheet.getSheetByName(&amp;quot;UserPower&amp;quot;); // 根據表格名稱取表
  var rowLength = sheet1.getLastRow()-1;
  var columnLength = sheet1.getLastColumn();
  var data = sheet1.getRange(2,1,rowLength,columnLength).getValues(); // 取得的資料
  var userID   = para.userID,
      userName = para.userName,
      Joins    = para.Joins,
      IsAdmin  = para.IsAdmin;
  
  var upData = [];
  
  for(i=0;i&amp;lt;=rowLength-1;i++)&amp;#123;
    upData = data[i]
    if((upData[0]==userID) == false)&amp;#123;
      upData = undefined;
    &amp;#125;
  
  
    if(upData != undefined)&amp;#123;
      sheet1.getRange(i+2, 1).setValue(userID);
      sheet1.getRange(i+2, 2).setValue(userName);
      sheet1.getRange(i+2, 3).setValue(Joins);
      sheet1.getRange(i+2, 4).setValue(IsAdmin);
      return ContentService.createTextOutput(upData).setMimeType(ContentService.MimeType.JSON);
    &amp;#125;
  &amp;#125;
  
  
  sheet1.appendRow([userID,userName,Joins,IsAdmin]); // 插入一列新的資料
  var dataExportFormat = JSON.stringify(para);
  return ContentService.createTextOutput(dataExportFormat).setMimeType(ContentService.MimeType.JSON);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;doGet與doPost是GAS默認的Get與Post方法&lt;br&gt;使用他的Url執行Get請求就會進doGet&lt;br&gt;反之post就會進doPost&lt;/p&gt;
&lt;p&gt;回到程序，一樣在auth加入url&lt;br&gt;雖然值跟Get方法時的Url一樣，不過這樣寫會比較好分辨，之後想改成兩個檔案也可以&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/znAkUYg.png&#34; alt=&#34;28-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;因為我們要在post請求帶入參數，這邊將請求URL的宣告直接放到實作裡面&lt;br&gt;這樣在創建的同時也會帶入參數&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/tiDcUkk.png&#34; alt=&#34;28-3&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;exports.postUserPower = function(bodyData, callback) &amp;#123;
    const userPowerPost = &amp;#123;
        &amp;#39;method&amp;#39;: &amp;#39;POST&amp;#39;,
        &amp;#39;url&amp;#39;: auth.Gas.Post.UserPower,
        &amp;#39;headers&amp;#39;: &amp;#123;&amp;#125;,
        form: &amp;#123;
            &amp;#39;userID&amp;#39;: bodyData[0],
            &amp;#39;userName&amp;#39;: bodyData[1],
            &amp;#39;Joins&amp;#39;: bodyData[2],
            &amp;#39;IsAdmin&amp;#39;: bodyData[3]
        &amp;#125;
    &amp;#125;;
    request(userPowerPost, function(error, response) &amp;#123;
        try &amp;#123;
            if (error) &amp;#123;
                console.log(&amp;#39;postUserPowerError1&amp;#39;, error);
                callback(false);
            &amp;#125; else &amp;#123;
                callback(true);
            &amp;#125;
        &amp;#125; catch (err) &amp;#123;
            console.log(&amp;#39;postUserPowerError2&amp;#39;, err);
            callback(false);
        &amp;#125;
    &amp;#125;);
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在全域變數(最上方)新增這四個東西&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/qJhS30L.png&#34; alt=&#34;28-4&#34;&gt;&lt;/p&gt;
&lt;p&gt;在子類方法(最下方)加入初始化方法&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/bSFGj1I.png&#34; alt=&#34;28-5&#34;&gt;&lt;/p&gt;
&lt;p&gt;在onMessage中間加入續行方法入口&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/4NE1BQC.png&#34; alt=&#34;28-6&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    //續行方法
    if (nowDoFunction &amp;amp;&amp;amp; msg.author.id === DoUserID) &amp;#123;
        nowDoFunction(msg);
        return;
    &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在tag系統入口加入addUser&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/66thUHz.png&#34; alt=&#34;28-7&#34;&gt;&lt;/p&gt;
&lt;p&gt;實例addUserFunction&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Fxh4bSy.png&#34; alt=&#34;28-8&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//將xxx加入身分組
function addUserFunction(msg) &amp;#123;
    try &amp;#123;
        if (DoUserID === &amp;#39;&amp;#39;) &amp;#123;
            nowDoFunction = addUserFunctionNow;
            DoUserID = msg.author.id;
            DoData = new Array;
            msg.channel.send(&amp;#39;請輸入要加入的使用者id&amp;#39;);
        &amp;#125; else &amp;#123;
            msg.channel.send(&amp;#39;有其他人正在使用續行中，請稍等&amp;#39;);
        &amp;#125;
    &amp;#125; catch (err) &amp;#123;
        console.log(&amp;#39;addUserFunctionError&amp;#39;, err);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;實例addUserFunctionNow(續行方法)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//將xxx加入身份組(續行方法)
function addUserFunctionNow(msg) &amp;#123;
    try &amp;#123;
        switch (DoingCount) &amp;#123;
            case 0:
                DoData.push(msg.content); //加入使用者id
                DoData.push(msg.author.username); //加入申請者名字
                msg.channel.send(`請輸入要加入的群組`);
                break;
            case 1:
                DoData.push(msg.content); //加入群組
                DoData.push(false); //IsAdmin預設False不可修改
                msg.channel.send(`申請資料如下:\n申請人 &amp;lt;@$&amp;#123;msg.author.id&amp;#125;&amp;gt;\n使用者 &amp;lt;@$&amp;#123;DoData[0]&amp;#125;&amp;gt;\n加入權限組 $&amp;#123;DoData[2]&amp;#125;\n正確 Y / 錯誤 N`);
                break;
            case 2:
                if (msg.content === &amp;#39;Y&amp;#39;) &amp;#123;
                    msg.channel.send(&amp;#39;已確認，輸入資料中...&amp;#39;);
                    //與舊資料比對，已有此人資料變進行更新
                    CheckID(msg, null, EditOldUserPower, DoData[0]);
                    GetGas.postUserPower(DoData, function(dataED) &amp;#123;
                        if (dataED) &amp;#123;
                            //bot內變數不會更新，手動更新
                            UserPowerData.unshift(&amp;#123;
                                &amp;#39;userID&amp;#39;: DoData[0],
                                &amp;#39;userName&amp;#39;: DoData[1],
                                &amp;#39;Joins&amp;#39;: DoData[2],
                                &amp;#39;IsAdmin&amp;#39;: DoData[3]
                            &amp;#125;);
                            msg.channel.send(&amp;#39;輸入完畢!&amp;#39;);
                        &amp;#125; else &amp;#123;
                            msg.channel.send(&amp;#39;資料輸入失敗，請重新嘗試&amp;#39;);
                        &amp;#125;
                        CloseAllDoingFunction();
                    &amp;#125;);
                &amp;#125; else if (msg.content === &amp;#39;N&amp;#39;) &amp;#123;
                    CloseAllDoingFunction();
                    msg.channel.send(&amp;#39;已取消行為，請重新下達指令&amp;#39;)
                &amp;#125; else &amp;#123;
                    DoingCount--;
                    msg.channel.send(&amp;#39;無法辨識訊息，請輸入Y/N來選擇&amp;#39;);
                &amp;#125;
                break;
        &amp;#125;
        if (DoUserID !== &amp;#39;&amp;#39;) DoingCount++;
    &amp;#125; catch (err) &amp;#123;
        CloseAllDoingFunction();
        client.channels.fetch(msg.channel.id).then(channel =&amp;gt; channel.send(&amp;#39;發生意外錯誤，中斷指令行為，請重新下達指令!&amp;#39;))
        console.log(&amp;#39;addUserFunctionNowError&amp;#39;, err);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;微調CheckID與CheckParty&lt;br&gt;將userID的取值獨立，將admin判斷拉到CheckParty&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/EFqmBqa.png&#34; alt=&#34;28-9&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/6Oos50b.png&#34; alt=&#34;28-10&#34;&gt;&lt;/p&gt;
&lt;p&gt;實例EditOldUserPower&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/0HXohq7.png&#34; alt=&#34;28-11&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;測試環節&#34;&gt;&lt;a href=&#34;#測試環節&#34; class=&#34;headerlink&#34; title=&#34;測試環節&#34;&gt;&lt;/a&gt;測試環節&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/HWloU7g.png&#34; alt=&#34;28-12&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/dJplXOG.png&#34; alt=&#34;28-13&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/ppMXmB4.png&#34; alt=&#34;28-14&#34;&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/EO9pkZt.png&#34; alt=&#34;28-15&#34;&gt;&lt;/p&gt;
&lt;p&gt;完成&lt;/p&gt;
&lt;p&gt;因為今天有修改到Day26的東西，這可能導致教學有點雜亂&lt;br&gt;底下附上tag系統目前的程式碼，當作彌補&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//#region tag系統
function TagFunction(msg, tempPrefix) &amp;#123;
    const cmd = msg.content.substring(prefix[tempPrefix].Value.length).split(&amp;#39; &amp;#39;); //以空白分割前綴以後的字串

    switch (cmd[0]) &amp;#123;
        case &amp;#39;addUser&amp;#39;: //將使用者加入身份組
            addUserFunction(msg);
            break;
        default: //身份組ID
            CheckID(msg, cmd, CheckParty, msg.author.id);
            break;
    &amp;#125;
&amp;#125;

//判斷此人有沒有登記資料
function CheckID(msg, cmd, OtherFunction, userID) &amp;#123;
    const haveUserData = UserPowerData.find(element =&amp;gt; &amp;#123;
        return element.userID == userID;
    &amp;#125;)

    if (haveUserData !== undefined) &amp;#123;
        //有資料
        return OtherFunction(msg, cmd, haveUserData);
    &amp;#125; else &amp;#123;
        return false;
    &amp;#125;
&amp;#125;

//根據UserPower獲得Party
function CheckParty(msg, cmd, haveUserData) &amp;#123;

    if (haveUserData.IsAdmin) &amp;#123;
        //是管理員，直接做後續事情
        return SendTagMessage(msg, `&amp;lt;@&amp;amp;$&amp;#123;cmd[1]&amp;#125;&amp;gt;\n來自管理員&amp;lt;@$&amp;#123;msg.author.id&amp;#125;&amp;gt;的指令呼叫`);
    &amp;#125;

    let havePartyPower;
    havePartyPower = PartyPowerData.filter(element =&amp;gt; &amp;#123;
        if (haveUserData.Joins[i].indexOf(element.ID) != -1) &amp;#123;
            return element.Power.indexOf(cmd[1]) != -1
        &amp;#125;
    &amp;#125;)

    if (isEmptyObject(havePartyPower)) &amp;#123;
        SendTagMessage(msg, &amp;#39;無權限，請確認參數是否正確&amp;#39;);
    &amp;#125; else &amp;#123;
        SendTagMessage(msg, `&amp;lt;@&amp;amp;$&amp;#123;cmd[1]&amp;#125;&amp;gt;\n來自&amp;lt;@$&amp;#123;msg.author.id&amp;#125;&amp;gt;的指令呼叫`);
    &amp;#125;
&amp;#125;

//傳送訊息單獨實例
function SendTagMessage(msg, data) &amp;#123;
    msg.channel.send(data);
&amp;#125;

//將xxx加入身分組
function addUserFunction(msg) &amp;#123;
    try &amp;#123;
        if (DoUserID === &amp;#39;&amp;#39;) &amp;#123;
            nowDoFunction = addUserFunctionNow;
            DoUserID = msg.author.id;
            DoData = new Array;
            msg.channel.send(&amp;#39;請輸入要加入的使用者id&amp;#39;);
        &amp;#125; else &amp;#123;
            msg.channel.send(&amp;#39;有其他人正在使用續行中，請稍等&amp;#39;);
        &amp;#125;
    &amp;#125; catch (err) &amp;#123;
        console.log(&amp;#39;addUserFunctionError&amp;#39;, err);
    &amp;#125;
&amp;#125;

//將xxx加入身份組(續行方法)
function addUserFunctionNow(msg) &amp;#123;
    try &amp;#123;
        switch (DoingCount) &amp;#123;
            case 0:
                DoData.push(msg.content); //加入使用者id
                DoData.push(msg.author.username); //加入申請者名字
                msg.channel.send(`請輸入要加入的群組`);
                break;
            case 1:
                DoData.push(msg.content); //加入群組
                DoData.push(false); //IsAdmin預設False不可修改
                msg.channel.send(`申請資料如下:\n申請人 &amp;lt;@$&amp;#123;msg.author.id&amp;#125;&amp;gt;\n使用者 &amp;lt;@$&amp;#123;DoData[0]&amp;#125;&amp;gt;\n加入權限組 $&amp;#123;DoData[2]&amp;#125;\n正確 Y / 錯誤 N`);
                break;
            case 2:
                if (msg.content === &amp;#39;Y&amp;#39;) &amp;#123;
                    msg.channel.send(&amp;#39;已確認，輸入資料中...&amp;#39;);
                    //與舊資料比對，已有此人資料變進行更新
                    CheckID(msg, null, EditOldUserPower, DoData[0]);
                    GetGas.postUserPower(DoData, function(dataED) &amp;#123;
                        if (dataED) &amp;#123;
                            //bot內變數不會更新，手動更新
                            UserPowerData.unshift(&amp;#123;
                                &amp;#39;userID&amp;#39;: DoData[0],
                                &amp;#39;userName&amp;#39;: DoData[1],
                                &amp;#39;Joins&amp;#39;: DoData[2],
                                &amp;#39;IsAdmin&amp;#39;: DoData[3]
                            &amp;#125;);
                            msg.channel.send(&amp;#39;輸入完畢!&amp;#39;);
                        &amp;#125; else &amp;#123;
                            msg.channel.send(&amp;#39;資料輸入失敗，請重新嘗試&amp;#39;);
                        &amp;#125;
                        CloseAllDoingFunction();
                    &amp;#125;);
                &amp;#125; else if (msg.content === &amp;#39;N&amp;#39;) &amp;#123;
                    CloseAllDoingFunction();
                    msg.channel.send(&amp;#39;已取消行為，請重新下達指令&amp;#39;)
                &amp;#125; else &amp;#123;
                    DoingCount--;
                    msg.channel.send(&amp;#39;無法辨識訊息，請輸入Y/N來選擇&amp;#39;);
                &amp;#125;
                break;
        &amp;#125;
        if (DoUserID !== &amp;#39;&amp;#39;) DoingCount++;
    &amp;#125; catch (err) &amp;#123;
        CloseAllDoingFunction();
        client.channels.fetch(msg.channel.id).then(channel =&amp;gt; channel.send(&amp;#39;發生意外錯誤，中斷指令行為，請重新下達指令!&amp;#39;))
        console.log(&amp;#39;addUserFunctionNowError&amp;#39;, err);
    &amp;#125;
&amp;#125;

//用戶舊資料更新
function EditOldUserPower(msg, cmd, haveUserData) &amp;#123;
    //二次確認
    if (DoData[0] == haveUserData.userID) &amp;#123;
        DoData[2] = haveUserData.Joins + &amp;#39;;&amp;#39; + DoData[2];
        DoData[3] = haveUserData.IsAdmin;
        return true;
    &amp;#125; else return false;
&amp;#125;
//#endregion
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smilin.net/2020/09/27/12thDay27/</guid>
            <title>Day27 - tag控管 - 續行方法解說</title>
            <link>https://smilin.net/2020/09/27/12thDay27/</link>
            <category>node.js</category>
            <category>bot</category>
            <category>discord</category>
            <category>discord.js</category>
            <category>教學</category>
            <category>12th鐵人賽</category>
            <pubDate>Sun, 27 Sep 2020 15:59:10 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;昨天我們實作了tag身份組功能&lt;br&gt;使用者透過機器人tag一整個身份組的功能&lt;br&gt;我們希望還可以有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;創建身分組的指令&lt;/li&gt;
&lt;li&gt;將使用者加入身份組指令&lt;/li&gt;
&lt;li&gt;刪除身分組的指令&lt;/li&gt;
&lt;li&gt;將使用者從某個身份組中刪除的指令&lt;/li&gt;
&lt;/ul&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;這些功能與以往的做法不同&lt;br&gt;API會從原本的Get改成使用Post方法&lt;br&gt;bot程序會需要用到續行方法，來彌補當前機器人框架無法實現的功能&lt;/p&gt;
&lt;h1 id=&#34;續行方法&#34;&gt;&lt;a href=&#34;#續行方法&#34; class=&#34;headerlink&#34; title=&#34;續行方法&#34;&gt;&lt;/a&gt;續行方法&lt;/h1&gt;&lt;p&gt;程式上並沒有這種寫法的稱呼，只是在當前框架下，我給這個寫法的一種叫法而已&lt;/p&gt;
&lt;p&gt;目前我們機器人指令的呼叫方式基本模式是&lt;/p&gt;
&lt;p&gt;前綴字 + 指令 + 間隔符 + 參數(如果有)&lt;/p&gt;
&lt;p&gt;如果前綴字沒有匹配，就對資料庫做判斷，是否有相同觸發字來自動回應(卡米狗模式)&lt;/p&gt;
&lt;p&gt;這種做法會面臨到一個問題，指令都是在一行內完成的&lt;/p&gt;
&lt;p&gt;如果希望先下達指令，等待機器人給予回饋，再繼續輸入指令呢?&lt;/p&gt;
&lt;p&gt;沒錯，使用者的操作會變得相對複雜&lt;br&gt;假設一個指令叫做 !AFK ，然後要輸入三次且三次的參數都正確，機器人才會醒來&lt;br&gt;那使用者就要連續輸入三次&lt;/p&gt;
&lt;p&gt;!AFK 1&lt;br&gt;!AFK 2&lt;br&gt;!AFK 3&lt;/p&gt;
&lt;p&gt;而不是&lt;/p&gt;
&lt;p&gt;!AFK&lt;br&gt;1&lt;br&gt;2&lt;br&gt;3&lt;/p&gt;
&lt;p&gt;讓使用者不斷重複的輸入指令顯然不是我們希望的&lt;/p&gt;
&lt;p&gt;因此我們會需要使用續行，讓BOT觸發到特定指令後，綁定此用戶進行接下來的行為&lt;/p&gt;
&lt;p&gt;明天我們會實作postAPI，以及將 將使用者加入特定身分組的功能 寫好&lt;br&gt;如果篇幅足夠會再講 將使用者從某個身份組中刪除&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smilin.net/2020/09/26/12thDay26/</guid>
            <title>Day26 - tag控管機制(1)</title>
            <link>https://smilin.net/2020/09/26/12thDay26/</link>
            <category>node.js</category>
            <category>bot</category>
            <category>discord</category>
            <category>discord.js</category>
            <category>教學</category>
            <category>12th鐵人賽</category>
            <pubDate>Sat, 26 Sep 2020 09:54:26 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;昨天我們描繪了權限系統的架構，今天來建立身份組環境&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;打開我們之前的試算表，新增兩個table&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/uoHRTQ9.png&#34; alt=&#34;26-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;UserPower&lt;br&gt;代表成員table&lt;/p&gt;
&lt;p&gt;userID&lt;br&gt;discord的userID，主要用來辨識訊息方是否是此用戶&lt;/p&gt;
&lt;p&gt;userName&lt;br&gt;用處一樣不大，給人看的&lt;/p&gt;
&lt;p&gt;Joins&lt;br&gt;表示此用戶有哪些身份組的權限，筆者打算之後把所有身份都寫在這欄，用分號來做區隔&lt;/p&gt;
&lt;p&gt;IsAdmin&lt;br&gt;管理員開關，開啟後不做任何身份組判斷，可以使用任何功能&lt;/p&gt;
&lt;p&gt;下圖中，筆者的userID有E有+的，這是Excel自動給予的格式，可以在左上角看到實際數值，讀取時仍然是讀取165753385385984000，不用修改&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/2ilbHq9.png&#34; alt=&#34;26-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;PartyPower&lt;br&gt;代表身份組table&lt;/p&gt;
&lt;p&gt;ID&lt;br&gt;該身份組的ID，使用者透過這個ID來判斷自己有哪些權限&lt;/p&gt;
&lt;p&gt;type&lt;br&gt;代表這個身份組的類型&lt;br&gt;目前暫定1是禁言類身份組，2是tag權限身份組&lt;/p&gt;
&lt;p&gt;Power&lt;br&gt;代表實際可行駛的權限，會根據type的不同有不同的含意&lt;br&gt;在tag權限下，Power帶入tagID，代表可以行使此tag&lt;br&gt;這邊帶入Power的是身份組ID&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/uNgxfC1.png&#34; alt=&#34;26-3&#34;&gt;&lt;/p&gt;
&lt;p&gt;教一下手動獲取身份組ID&lt;/p&gt;
&lt;p&gt;把人點開，對身份組右鍵&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Z2t6akk.png&#34; alt=&#34;26-4&#34;&gt;&lt;/p&gt;
&lt;p&gt;或是先拉出tag，然後在tag前方加上一個反斜線&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/vtlv8pE.png&#34; alt=&#34;26-5&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/tlpvlge.png&#34; alt=&#34;26-6&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果以上操作遇到問題，甚至是UserID也抓不到&lt;br&gt;可以看一下&lt;a href=&#34;https://support.discord.com/hc/zh-tw/articles/206346498-%E6%88%91%E5%9C%A8%E5%93%AA%E8%A3%A1%E5%8F%AF%E4%BB%A5%E6%89%BE%E5%88%B0%E6%88%91%E7%9A%84%E7%94%A8%E6%88%B6-%E6%9C%8D%E5%8B%99%E5%99%A8-%E6%B6%88%E6%81%AFID-&#34;&gt;這篇文章&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;或是找找怎麼開啟Discord的開發者模式&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;再來我們要新增兩個GAS檔案&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/L7WOiyD.png&#34; alt=&#34;26-7&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function doGet(e) &amp;#123;
  var id = &amp;#39;你的ID&amp;#39;; //抓取表單
  var spreadsheet = SpreadsheetApp.openById(id); // Sheet id
  var sheet = spreadsheet.getSheetByName(&amp;quot;UserPower&amp;quot;); // 根據表格名稱取表
  var rowLength = sheet.getLastRow()-1; //取行長度
  var columnLength = sheet.getLastColumn(); //取列長度
  var data = sheet.getRange(2,1,rowLength,columnLength).getValues(); // 取得的資料
  
  var dataExport = [];
  
  for(i in data)&amp;#123;
    if(data[i][0] != &amp;quot;&amp;quot;)&amp;#123;
    dataExport[i] = &amp;#123;
      userID:     data[i][0],
      userName:   data[i][1],
      Joins:   data[i][2],
      IsAdmin: data[i][3]
      &amp;#125;
    &amp;#125;
  &amp;#125;
  
  
  var dataExportFormat = JSON.stringify(dataExport);
  return ContentService.createTextOutput(dataExportFormat).setMimeType(ContentService.MimeType.JSON);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/7P09NvS.png&#34; alt=&#34;26-8&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function doGet(e) &amp;#123;
  var id = &amp;#39;你的ID&amp;#39;; //抓取表單
  var spreadsheet = SpreadsheetApp.openById(id); // Sheet id
  var sheet = spreadsheet.getSheetByName(&amp;quot;PartyPower&amp;quot;); // 根據表格名稱取表
  var rowLength = sheet.getLastRow()-1; //取行長度
  var columnLength = sheet.getLastColumn(); //取列長度
  var data = sheet.getRange(2,1,rowLength,columnLength).getValues(); // 取得的資料
  
  var dataExport = [];
  
  for(i in data)&amp;#123;
    if(data[i][0] != &amp;quot;&amp;quot;)&amp;#123;
    dataExport[i] = &amp;#123;
      ID:     data[i][0],
      type:   data[i][1],
      Power:   data[i][2]
      &amp;#125;
    &amp;#125;
  &amp;#125;
  
  
  var dataExportFormat = JSON.stringify(dataExport);
  return ContentService.createTextOutput(dataExportFormat).setMimeType(ContentService.MimeType.JSON);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;記得都要存檔後，發佈成網路應用，獲取URL&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/iohSLWG.png&#34; alt=&#34;26-9&#34;&gt;&lt;/p&gt;
&lt;p&gt;(之前示範JSONArray的[]，可以拿掉)&lt;br&gt;跟baseExcel一樣，我們會希望bot在啟動時就把表都讀取進來，從雲端下載成本地db的感覺，順便做資料二次處理&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/s3bibHM.png&#34; alt=&#34;26-10&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const userPower = &amp;#123;
    &amp;#39;method&amp;#39;: &amp;#39;GET&amp;#39;,
    &amp;#39;url&amp;#39;: auth.Gas.Get[0].UserPower,
    &amp;#39;headers&amp;#39;: &amp;#123;&amp;#125;
&amp;#125;;

const partyPower = &amp;#123;
    &amp;#39;method&amp;#39;: &amp;#39;GET&amp;#39;,
    &amp;#39;url&amp;#39;: auth.Gas.Get[0].PartyPower,
    &amp;#39;headers&amp;#39;: &amp;#123;&amp;#125;
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/hykI0wE.png&#34; alt=&#34;26-11&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/2K8yobJ.png&#34; alt=&#34;26-12&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;exports.getUserPower = function(callback) &amp;#123;
    let backValue = new Array;
    request(userPower, function(error, response) &amp;#123;
        try &amp;#123;
            if (error) &amp;#123;
                console.log(&amp;#39;getUserPowerError1&amp;#39;, error);
                callback(false);
            &amp;#125; else &amp;#123;
                const data = JSON.parse(response.body); //接收回傳(response)的body
                for (i in data) &amp;#123;
                    backValue.push(data[i]);
                    backValue[i].Joins = backValue[i].Joins.split(&amp;#39;;&amp;#39;);
                &amp;#125;
                callback(backValue);
            &amp;#125;
        &amp;#125; catch (err) &amp;#123;
            console.log(&amp;#39;getUserPowerError2&amp;#39;, err);
            callback(false);
        &amp;#125;
    &amp;#125;);
&amp;#125;;

exports.getPartyPower = function(callback) &amp;#123;
    let backValue = new Array;
    request(partyPower, function(error, response) &amp;#123;
        try &amp;#123;
            if (error) &amp;#123;
                console.log(&amp;#39;getPartyPowerError1&amp;#39;, error);
                callback(false);
            &amp;#125; else &amp;#123;
                const data = JSON.parse(response.body); //接收回傳(response)的body
                for (i in data) &amp;#123;
                    backValue.push(data[i]);
                    backValue[i].Power = backValue[i].Power.split(&amp;#39;;&amp;#39;);
                &amp;#125;
                callback(backValue);
            &amp;#125;
        &amp;#125; catch (err) &amp;#123;
            console.log(&amp;#39;getPartyPowerError2&amp;#39;, err);
            callback(false);
        &amp;#125;
    &amp;#125;);
&amp;#125;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/PEI3XAU.png&#34; alt=&#34;26-13&#34;&gt;&lt;/p&gt;
&lt;p&gt;(開始變成callback地獄了)&lt;/p&gt;
&lt;p&gt;資料都接到也處理好了，再來要用這些資料實作功能&lt;/p&gt;
&lt;p&gt;增加指令列表的一個新系統&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/8g2yKAQ.png&#34; alt=&#34;26-14&#34;&gt;&lt;/p&gt;
&lt;p&gt;在message事件新增入口&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/5k6UBOp.png&#34; alt=&#34;26-15&#34;&gt;&lt;/p&gt;
&lt;p&gt;然後做出實際功能&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/f4FEeTh.png&#34; alt=&#34;26-16&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//#region tag系統
function TagFunction(msg, tempPrefix) &amp;#123;
    const cmd = msg.content.substring(prefix[tempPrefix].Value.length).split(&amp;#39; &amp;#39;); //以空白分割前綴以後的字串

    switch (cmd[0]) &amp;#123;
        case &amp;#39;其餘指令&amp;#39;:
            break;
        default: //身份組ID
            CheckID(msg, cmd, CheckParty);
            break;
    &amp;#125;
&amp;#125;

//判斷此人有沒有登記資料
function CheckID(msg, cmd, OtherFunction) &amp;#123;
    const haveUserData = UserPowerData.find(element =&amp;gt; &amp;#123;
        return element.userID == msg.author.id;
    &amp;#125;)

    if (haveUserData !== undefined) &amp;#123;
        //有資料
        if (haveUserData.IsAdmin) &amp;#123;
            //是管理員，直接做後續事情
            return SendTagMessage(msg, `&amp;lt;@&amp;amp;$&amp;#123;cmd[1]&amp;#125;&amp;gt;\n來自管理員&amp;lt;@$&amp;#123;msg.author.id&amp;#125;&amp;gt;的指令呼叫`);
        &amp;#125; else &amp;#123;
            //不是管理員，先看有甚麼群組
            return OtherFunction(msg, cmd, haveUserData);
        &amp;#125;
    &amp;#125;
&amp;#125;

//根據UserPower獲得Party
function CheckParty(msg, cmd, haveUserData) &amp;#123;
    let havePartyPower;
    havePartyPower = PartyPowerData.filter(element =&amp;gt; &amp;#123;
        if (haveUserData.Joins[i].indexOf(element.ID) != -1) &amp;#123;
            return element.Power.indexOf(cmd[1]) != -1
        &amp;#125;
    &amp;#125;)

    if (isEmptyObject(havePartyPower)) &amp;#123;
        SendTagMessage(msg, &amp;#39;無權限，請確認參數是否正確&amp;#39;);
    &amp;#125; else &amp;#123;
        SendTagMessage(msg, `&amp;lt;@&amp;amp;$&amp;#123;cmd[1]&amp;#125;&amp;gt;\n來自&amp;lt;@$&amp;#123;msg.author.id&amp;#125;&amp;gt;的指令呼叫`);
    &amp;#125;
&amp;#125;

//傳送訊息單獨實例
function SendTagMessage(msg, data) &amp;#123;
    msg.channel.send(data);
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最後補個判斷Array是不是空集合的小function&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/LWubzzI.png&#34; alt=&#34;26-17&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;大致解說一下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/I4egiAN.png&#34; alt=&#34;26-18&#34;&gt;&lt;/p&gt;
&lt;p&gt;Tag系統的入口function&lt;br&gt;跟其他系統一樣，判斷要使用甚麼指令&lt;br&gt;今天先把預設(default)指令，也就是tag身分組做出來&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/leRaRUt.png&#34; alt=&#34;26-19&#34;&gt;&lt;/p&gt;
&lt;p&gt;檢查UserPower中是否有此人資料，以及是否是管理員&lt;br&gt;如果有資料且不是管理員，繼續檢查其所屬身份組權限&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/5u8N8DC.png&#34; alt=&#34;26-20&#34;&gt;&lt;/p&gt;
&lt;p&gt;檢查身份組中是否有權限符合這次要tag的對象id，有的話代表此次指令滿足權限，給予tag&lt;/p&gt;
&lt;p&gt;我們跑看看&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/R4VEGBa.png&#34; alt=&#34;26-21&#34;&gt;&lt;/p&gt;
&lt;p&gt;成功&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smilin.net/2020/09/25/12thDay25/</guid>
            <title>Day25 - 權限系統規格</title>
            <link>https://smilin.net/2020/09/25/12thDay25/</link>
            <category>node.js</category>
            <category>bot</category>
            <category>discord</category>
            <category>discord.js</category>
            <category>教學</category>
            <category>12th鐵人賽</category>
            <pubDate>Fri, 25 Sep 2020 09:42:13 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;最近在編寫群組權限相關的功能，就說說這個吧&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;先說明此功能需求情境:&lt;/p&gt;
&lt;p&gt;群組人數過多，管理層不希望群組人員可以使用 every 或 身分組 或 頻道等會群體呼叫的tag&lt;/p&gt;
&lt;p&gt;但又希望在必要的時候，其他人可以使用此功能&lt;/p&gt;
&lt;p&gt;因此希望將此權限關閉，並且給予機器人此權限&lt;br&gt;透過機器人做二次權限管理，並且對使用人與時間等進行紀錄&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;為了完成需求，我們假設機器人權限是admin，我們需要…&lt;/p&gt;
&lt;p&gt;三層身份組&lt;br&gt;群主-&amp;gt;管理員-&amp;gt;自定義身份&lt;br&gt;不是dc的身份組，是寫在機器人內的身份組&lt;br&gt;身分組內有此人id-&amp;gt;可以行使此身份組下所開通的功能&lt;br&gt;例如管理員身份組下的人可以指派新的身份組，此身份組可以使用哪幾種tag&lt;br&gt;要把誰加入身份組等&lt;/p&gt;
&lt;p&gt;指派管理員&lt;br&gt;可以將指定人員加入管理員身份組&lt;br&gt;此指令只有群主身份組可以行使&lt;/p&gt;
&lt;p&gt;創建新身份組&lt;br&gt;創建自定義的身份組，會給予一組id，後續此id代表身份組&lt;/p&gt;
&lt;p&gt;修改身份組名稱&lt;br&gt;修改身份組名稱，便於管理，參數需帶入身份組id&lt;/p&gt;
&lt;p&gt;新增身份組可tag內容&lt;br&gt;新增身份組內可以tag的類型，參數需帶入身份組id與要tag內容的id&lt;/p&gt;
&lt;p&gt;刪除身分組可tag內容&lt;br&gt;同上&lt;/p&gt;
&lt;p&gt;新增身份組成員&lt;br&gt;將群組成員加入身份組，參數帶入身份組id與成員id&lt;/p&gt;
&lt;p&gt;刪除身份組成員&lt;br&gt;同上&lt;/p&gt;
&lt;p&gt;使用tag&lt;br&gt;透過bot tag指定id，參數需帶入tagID，可額外帶入要說的話&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smilin.net/2020/09/24/12thDay24/</guid>
            <title>Day24 - 愛麗絲安靜!</title>
            <link>https://smilin.net/2020/09/24/12thDay24/</link>
            <category>node.js</category>
            <category>bot</category>
            <category>discord</category>
            <category>discord.js</category>
            <category>教學</category>
            <category>12th鐵人賽</category>
            <pubDate>Thu, 24 Sep 2020 10:58:46 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;今天想教怎麼讓機器人安靜&amp;#x2F;啟動&lt;br&gt;這樣才能說之後想教的東西&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h1 id=&#34;情境描述&#34;&gt;&lt;a href=&#34;#情境描述&#34; class=&#34;headerlink&#34; title=&#34;情境描述&#34;&gt;&lt;/a&gt;情境描述&lt;/h1&gt;&lt;p&gt;機器人需要有個控制是否啟動的開關&lt;br&gt;可設定在該群組 or 頻道是否可以接收指令&lt;/p&gt;
&lt;p&gt;因為我們的機器人會有多組系統(文字回答&amp;amp;音樂系統)&lt;br&gt;會希望再額外設定可以在指定的群組 or 頻道是否可以接收特定系統的指令&lt;/p&gt;
&lt;h1 id=&#34;實作開始&#34;&gt;&lt;a href=&#34;#實作開始&#34; class=&#34;headerlink&#34; title=&#34;實作開始&#34;&gt;&lt;/a&gt;實作開始&lt;/h1&gt;&lt;p&gt;首先請先幫我新建一個JSON檔案，叫做shup.json…或是你喜歡的名字xD&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/A3FgZSp.png&#34; alt=&#34;24-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;記得JSON檔案都要放在JSONHome喔&lt;/p&gt;
&lt;p&gt;type&lt;br&gt;型態，代表這一筆JSONObject是甚麼類型&lt;br&gt;目前還用不到，都設1就好&lt;/p&gt;
&lt;p&gt;GroupID&lt;br&gt;群組ID，主要給後續判定的部份&lt;/p&gt;
&lt;p&gt;GroupName&lt;br&gt;群組名稱，用處不大、主要給使用者好分辨的&lt;/p&gt;
&lt;p&gt;Power&lt;br&gt;代表不可使用的權限，後面會一邊寫一邊解說&lt;/p&gt;
&lt;p&gt;禁言指令，顧名思義、希望機器人是否被禁言的開關&lt;br&gt;這開關需要放在所有指令之前，這樣才可以判斷出內容是否需要被禁止&lt;/p&gt;
&lt;p&gt;老樣子，我們要先引入json&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/P7TjmyD.png&#34; alt=&#34;24-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;放在message事件的上方，當判斷權限為false，就停止後續行為&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Ijtpyyk.png&#34; alt=&#34;24-3&#34;&gt;&lt;/p&gt;
&lt;p&gt;接著我們實作IsShut&lt;br&gt;IsShut根據shup.json，先判斷訊息群組&amp;amp;訊息有沒有資料，再來判斷資料中存不存在tempPrefix，存在的話就要禁用功能，因為默認不存在時文檔中不會有資料，自然就不該設限&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//禁言系統判斷
function IsShut(msg, tempPrefix) &amp;#123;
    //群組id
    const guildID = msg.guild.id;
    //頻道id
    const channelID = msg.channel.id;
    //當前狀態
    let status = true;

    //先判斷群組，群組判斷完判斷頻道(頻道權限優先於群組)
    const guildIF = shup.Group.find(element =&amp;gt; &amp;#123;
        if (element.GroupID == guildID) &amp;#123;
            return element.Power.indexOf(tempPrefix) !== -1;
        &amp;#125;
        return false;
    &amp;#125;)

    //找到資料 = 此群組存在Group中且Power存在此次指令代碼
    if (guildIF !== undefined) &amp;#123;
        status = false;
    &amp;#125;

    //頻道
    const channelIF = shup.Channel.find(element =&amp;gt; &amp;#123;
        if (element.ChannelID == channelID) &amp;#123;
            return true;
        &amp;#125;
        return false;
    &amp;#125;)

    //找到資料 = 此頻道存在Channel中
    if (channelIF !== undefined) &amp;#123;
        //Power有此資料=&amp;gt;禁用功能 無資料=&amp;gt;不設限
        if (channelIF.Power.indexOf(tempPrefix) !== -1) &amp;#123;
            status = false;
        &amp;#125; else &amp;#123;
            status = true;
        &amp;#125;
    &amp;#125;

    return status;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接著我們將資料實際key入shup.json看看&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/r2YX14O.png&#34; alt=&#34;24-4&#34;&gt;&lt;/p&gt;
&lt;p&gt;不知道同學有沒有看出Power的判斷依據了?&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/IQw9uKQ.png&#34; alt=&#34;24-5&#34;&gt;&lt;/p&gt;
&lt;p&gt;沒錯，就是依據prefix時設置的各系統代表ID&lt;/p&gt;
&lt;p&gt;我們試著跑看看&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/fPPlTwE.png&#34; alt=&#34;24-6&#34;&gt;&lt;/p&gt;
&lt;p&gt;另一個頻道&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/uV9zJ4q.png&#34; alt=&#34;24-7&#34;&gt;&lt;/p&gt;
&lt;p&gt;大成功~&lt;br&gt;這樣就做到各頻道各功能權限設置了&lt;/p&gt;
&lt;p&gt;不過存在一些問題&lt;br&gt;例如放在預設(default)的資料庫文字比對功能要怎麼判，應該是預設的-1吧&lt;br&gt;如果是-1要怎麼判斷呢?&lt;/p&gt;
&lt;p&gt;以及目前這樣的做法只做到判斷禁言功能的實作，還沒有辦法在前台讓使用者手動新增&lt;/p&gt;
&lt;p&gt;這部份筆者先賣個關子，各位可以嘗試寫看看，明天我們繼續做別的功能，之後再繞回來&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smilin.net/2020/09/23/12thDay23/</guid>
            <title>Day23 - 音樂系統的歌單批量載入(額外)</title>
            <link>https://smilin.net/2020/09/23/12thDay23/</link>
            <category>node.js</category>
            <category>bot</category>
            <category>discord</category>
            <category>discord.js</category>
            <category>教學</category>
            <category>12th鐵人賽</category>
            <pubDate>Wed, 23 Sep 2020 15:04:44 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;昨天我們把音樂系統的多群組支援做好了&lt;br&gt;今天想講一下怎麼直接導入歌單&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;首先請在專案目錄下的終端機安裝&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm install ytpl
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Ugc2fg4.png&#34; alt=&#34;23-1&#34;&gt; &lt;/p&gt;
&lt;p&gt;安裝完成後，我們打開看package.json&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/BZIUj5U.png&#34; alt=&#34;23-2&#34;&gt; &lt;/p&gt;
&lt;p&gt;最後一行出現了ytpl&lt;br&gt;請到這個網站比對ytpl的版本，如果像筆者一樣版本過低的話，請將package.json內的ytpl版本拉高，然後更新一次ytpl&lt;br&gt;&lt;a href=&#34;https://www.npmjs.com/package/ytpl&#34;&gt;https://www.npmjs.com/package/ytpl&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/prueQ8r.png&#34; alt=&#34;23-3&#34;&gt; &lt;/p&gt;
&lt;p&gt;官方文檔版本1.0.1&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/zDoQ0ox.png&#34; alt=&#34;23-4&#34;&gt; &lt;/p&gt;
&lt;p&gt;手動把0.3.0改成1.0.1然後下指令&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/XAAeYn1.png&#34; alt=&#34;23-5&#34;&gt; &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm update ytpl
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;這樣就會更新你的ytpl函式庫&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;一安裝完就去確認版本是否最新，是因為舊版本的ytpl在抓取歌單資料時十分不穩，甚至有可能直接被yt擋下&lt;/p&gt;
&lt;p&gt;原因不明，但這道理可以套到ytdl-core上，之後同學們有任何問題都可以先更新版本看看&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;更新好後，我們在bot.js引用ytpl&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/saOcdBI.png&#34; alt=&#34;23-6&#34;&gt; &lt;/p&gt;
&lt;p&gt;在音樂指令底下加入歌單載入功能&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/r8rRLh7.png&#34; alt=&#34;23-7&#34;&gt;  &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//?playList
async function playListMusic(guildID, msg) &amp;#123;
    try &amp;#123;
        //沒在音樂廳不能使用此功能
        if (!client.voice.connections.get(guildID)) &amp;#123;
            msg.channel.send(`請先正常啟用音樂指令後，再使用歌單載入喔`);
            return false;
        &amp;#125;
        //網址
        const valueED = msg.content.split(&amp;#39; &amp;#39;);
        //先用library自帶的方式檢查一次能不能用
        const canPlay = await ytpl.validateID(valueED[1]);
        //讀取到幾首歌，上限默認100首
        let a = 0;
        //幾首成功放入歌單
        let b = 0;
        if (canPlay) &amp;#123;
            const listED = await ytpl(valueED[1]);
            await listED.items.forEach(async function(element) &amp;#123;
                a = a + 1;
                if (element.title !== &amp;#39;[Deleted video]&amp;#39;) &amp;#123;
                    canPlay2 = await ytdl.validateURL(element.url_simple);
                    if (canPlay2) &amp;#123;
                        b = b + 1;
                        musicList.get(guildID).push(element.url_simple);
                    &amp;#125;
                &amp;#125;
            &amp;#125;);
            //回傳統計資訊
            msg.channel.send(`歌單 $&amp;#123;listED.title&amp;#125;\n共載入$&amp;#123;b&amp;#125;首歌曲\n$&amp;#123;a-b&amp;#125;首載入失敗`);
        &amp;#125; else &amp;#123;
            msg.channel.send(`This Url isn&amp;#39;t working in function.`);
        &amp;#125;
    &amp;#125; catch (err) &amp;#123;
        console.log(err, &amp;#39;playListMusicError&amp;#39;);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;由上而下依序說明…&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/06WUq7e.png&#34; alt=&#34;23-8&#34;&gt; &lt;/p&gt;
&lt;p&gt;因為歌單功能僅提供將yt歌單放入bot歌單的功能&lt;br&gt;正常使用play指令，不在語音廳的情況下是會直接進入語音廳並開始播放歌曲&lt;br&gt;筆者這邊寫成不能從歌單指令開始播歌&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/v9gRPGn.png&#34; alt=&#34;23-9&#34;&gt; &lt;/p&gt;
&lt;p&gt;宣告了四份參數&lt;/p&gt;
&lt;p&gt;valueED&lt;br&gt;第一個單純是使用空白做字串分割，valueED[0]是前綴字+playList&lt;br&gt;valueED[1]則是一格空白後加上網址&lt;/p&gt;
&lt;p&gt;canPlay&lt;br&gt;使用ytpl自帶的檢查語法，會根據帶入的url回傳布林&lt;/p&gt;
&lt;p&gt;a&lt;br&gt;載入迴圈的每一次都會+1，代表著載入幾首歌&lt;/p&gt;
&lt;p&gt;b&lt;br&gt;載入迴圈的每一次，當成功將歌曲加入歌單時+1，表示成功抓取幾首歌&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/dBhEpU2.png&#34; alt=&#34;23-10&#34;&gt; &lt;/p&gt;
&lt;p&gt;當canPlay等於ture後，正式查詢歌單並且將資料回傳給listED&lt;br&gt;listED底下有一items為JSONArray，他就是歌單的集合&lt;br&gt;對他使用迴圈，並在迴圈內用ytdl驗證一次網址是否可用&lt;br&gt;驗證全部通過後將歌曲加入該群組歌單&lt;br&gt;最後統計數字&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;因為加入批量歌曲載入的緣故，當機器人在列出queueShow時，極有可能回傳大量文字&lt;br&gt;discord單封文字的上限數是2000，我們取1900就好&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/fdzjXHy.png&#34; alt=&#34;23-11&#34;&gt; &lt;/p&gt;
&lt;p&gt;都好了後，試著運行看看&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/G0vZbae.png&#34; alt=&#34;23-12&#34;&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/06dEnP9.png&#34; alt=&#34;23-13&#34;&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/qSyICGj.png&#34; alt=&#34;23-14&#34;&gt; &lt;/p&gt;
&lt;p&gt;這樣音樂系統也能做到批量載入音樂了&lt;br&gt;其餘還剩一些瑕疵，如歌單功能有限制，歌曲詳細資訊載入偏慢，沒有過濾私人影片還有更多可能的問題等…就讓各位自己嘗試看看吧&lt;/p&gt;
&lt;p&gt;那音樂系統就教到這，我們明天見&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smilin.net/2020/09/22/12thDay22/</guid>
            <title>Day22 - 音樂系統的多群組化(額外)</title>
            <link>https://smilin.net/2020/09/22/12thDay22/</link>
            <category>node.js</category>
            <category>bot</category>
            <category>discord</category>
            <category>discord.js</category>
            <category>教學</category>
            <category>12th鐵人賽</category>
            <pubDate>Tue, 22 Sep 2020 10:10:05 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;這兩天來把音樂系統教完好了&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;目前為止的音樂系統只支援一隻機器人 for 一個群組的模式&lt;br&gt;如果有多群組同時要使用音樂系統，會導致歌單列表共用&lt;/p&gt;
&lt;p&gt;這是因為機器人的系統中，並沒有將群組納入判斷&lt;br&gt;要改起來並不難，但邏輯要清晰&lt;/p&gt;
&lt;p&gt;不知道當時有沒有小夥伴自己搞定這一塊的?我們今天會再帶過&lt;/p&gt;
&lt;p&gt;程式碼是依照之前的進度，不會重頭開始，如果需要但沒有基礎程式碼的話可以回去看音樂系統的教學&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;MusicFunction&#34;&gt;&lt;a href=&#34;#MusicFunction&#34; class=&#34;headerlink&#34; title=&#34;MusicFunction&#34;&gt;&lt;/a&gt;MusicFunction&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/sKuhlfp.png&#34; alt=&#34;22-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;首先請把宣告成全域變數的兩個參數，初始化都設為Map()&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/KSRmbTG.png&#34; alt=&#34;22-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;再來我們在音樂指令的入口提取guildID，並且放入每一個function內&lt;/p&gt;
&lt;h1 id=&#34;playMusic&#34;&gt;&lt;a href=&#34;#playMusic&#34; class=&#34;headerlink&#34; title=&#34;playMusic&#34;&gt;&lt;/a&gt;playMusic&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/gax5Dun.png&#34; alt=&#34;22-3&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改了151,155跟171行&lt;br&gt;(可以根據左側顏色判斷)&lt;/p&gt;
&lt;p&gt;第一次進入語音廳的群組需要先以群組ID宣告一個歌曲列表&lt;br&gt;原本歌曲列表放入資料的方法是這樣&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;musicList.push(網址)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;現在變成&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;music.get(群組id).push(網址)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;也就是根據群組id提取歌曲列表&lt;/p&gt;
&lt;h1 id=&#34;playMusic2&#34;&gt;&lt;a href=&#34;#playMusic2&#34; class=&#34;headerlink&#34; title=&#34;playMusic2&#34;&gt;&lt;/a&gt;playMusic2&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/MpGvBiu.png&#34; alt=&#34;22-4&#34;&gt;&lt;/p&gt;
&lt;p&gt;改了185,195,202,204跟206行&lt;br&gt;(可以根據左側顏色判斷)&lt;/p&gt;
&lt;p&gt;原則上都跟剛剛一樣，注意歌曲清單跟播放遙控器應該是一個群組一個而已&lt;/p&gt;
&lt;h1 id=&#34;disconnectMusic&#34;&gt;&lt;a href=&#34;#disconnectMusic&#34; class=&#34;headerlink&#34; title=&#34;disconnectMusic&#34;&gt;&lt;/a&gt;disconnectMusic&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/GHYrwdz.png&#34; alt=&#34;22-5&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改了222行&lt;br&gt;(可以根據左側顏色判斷)&lt;/p&gt;
&lt;h1 id=&#34;replayMusic&#34;&gt;&lt;a href=&#34;#replayMusic&#34; class=&#34;headerlink&#34; title=&#34;replayMusic&#34;&gt;&lt;/a&gt;replayMusic&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/0noksiD.png&#34; alt=&#34;22-6&#34;&gt;&lt;/p&gt;
&lt;p&gt;改了235,237與240行&lt;br&gt;(可以根據左側顏色判斷)&lt;/p&gt;
&lt;h1 id=&#34;skipMusic&#34;&gt;&lt;a href=&#34;#skipMusic&#34; class=&#34;headerlink&#34; title=&#34;skipMusic&#34;&gt;&lt;/a&gt;skipMusic&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/j3vClrt.png&#34; alt=&#34;22-7&#34;&gt;&lt;/p&gt;
&lt;p&gt;只有一行&lt;/p&gt;
&lt;h1 id=&#34;nowPlayMusic&#34;&gt;&lt;a href=&#34;#nowPlayMusic&#34; class=&#34;headerlink&#34; title=&#34;nowPlayMusic&#34;&gt;&lt;/a&gt;nowPlayMusic&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/0mjB6g9.png&#34; alt=&#34;22-8&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改了253,255跟261行&lt;br&gt;(可以根據左側顏色判斷)&lt;/p&gt;
&lt;p&gt;字串串接部分拿的是已經處理好的參數，所以不用修改streamString&lt;/p&gt;
&lt;h1 id=&#34;queueShow&#34;&gt;&lt;a href=&#34;#queueShow&#34; class=&#34;headerlink&#34; title=&#34;queueShow&#34;&gt;&lt;/a&gt;queueShow&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/6ekTspK.png&#34; alt=&#34;22-9&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改了291,294跟296行&lt;br&gt;(可以根據左側顏色判斷)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;這樣基本就都改好了，我們試著運行看看&lt;/p&gt;
&lt;p&gt;運行前，因為之前我們已經上傳機器人到heroku上，理論上現在機器人是在運行狀態的&lt;br&gt;這時候如果我們使用node bot，雖然不會有bug，但會造成bot裡面同時有兩隻程序登入，會造成很有趣的現象，各位有興趣可以試試&lt;/p&gt;
&lt;p&gt;那這邊筆者為了繞過這問題，想直接上傳至heroku，這樣就可以只跑一個程序，也剛好介紹怎麼用heroku瀏覽程序歷程&lt;/p&gt;
&lt;h1 id=&#34;測試&#34;&gt;&lt;a href=&#34;#測試&#34; class=&#34;headerlink&#34; title=&#34;測試&#34;&gt;&lt;/a&gt;測試&lt;/h1&gt;&lt;p&gt;我們先回到專案資料夾底下，將.git改名gitHub，然後將gitHeroku改回.git&lt;/p&gt;
&lt;p&gt;回到vsCode，將專案推上heroku&lt;/p&gt;
&lt;p&gt;推完看到Build succeeded後幫我下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;heroku log -t
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;之前應該有提到&lt;br&gt;這是觀察專案在heroku上的託管狀態&lt;br&gt;如果我們要透過heroku來直接跑程序，或是之後出問題都是來這邊看error訊息&lt;/p&gt;
&lt;p&gt;開好訊息後，我們試著測試看看機器人是不是真的可以分群播音樂了&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/BMVGiLi.png&#34; alt=&#34;22-10&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/5dS1Qmq.png&#34; alt=&#34;22-11&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/7rysBLk.png&#34; alt=&#34;22-12&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/GdOBJIn.png&#34; alt=&#34;22-13&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Eu0wFM2.png&#34; alt=&#34;22-14&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/FgMco0X.png&#34; alt=&#34;22-15&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/3J61doA.png&#34; alt=&#34;22-16&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;大致如此，我們可以看到，機器人確實在兩個群組收到指令時，不會影響到對方了&lt;/p&gt;
&lt;p&gt;音樂系統的多群組支援教到這&lt;br&gt;明天看看要不要教一些額外的功能，我們明天見&lt;/p&gt;
&lt;h1 id=&#34;主程序&#34;&gt;&lt;a href=&#34;#主程序&#34; class=&#34;headerlink&#34; title=&#34;主程序&#34;&gt;&lt;/a&gt;主程序&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;//#region 音樂系統
//歌曲控制器
let dispatcher = new Map();
//歌曲清單
let musicList = new Map();

function MusicFunction(msg) &amp;#123;
    //將訊息內的前綴字截斷，後面的字是我們要的
    const content = msg.content.substring(prefix[1].Value.length);
    //指定我們的間隔符號
    const splitText = &amp;#39; &amp;#39;;
    //用間隔符號隔開訊息 contents[0] = 指令,contents[1] = 參數
    const contents = content.split(splitText);
    //因為會持續使用到，將群組ID獨立成參數
    const guildID = msg.guild.id;

    switch (contents[0]) &amp;#123;
        case &amp;#39;play&amp;#39;:
            //點歌&amp;amp;播放歌曲功能
            playMusic(guildID, msg, contents);
            break;
        case &amp;#39;replay&amp;#39;:
            //重播當前歌曲
            replayMusic(guildID);
            break;
        case &amp;#39;np&amp;#39;:
            //當前歌曲資訊
            nowPlayMusic(guildID, msg.channel.id);
            break;
        case &amp;#39;queue&amp;#39;:
            //歌曲清單
            queueShow(guildID, msg.channel.id);
            break;
        case &amp;#39;skip&amp;#39;:
            //中斷歌曲
            skipMusic(guildID);
            break;
        case &amp;#39;disconnect&amp;#39;:
            //退出語音頻道並且清空歌曲清單
            disconnectMusic(guildID, msg.channel.id);
            break;
    &amp;#125;
&amp;#125;

//?play
async function playMusic(guildID, msg, contents) &amp;#123;
    //定義我們的第一個參數必需是網址
    const urlED = contents[1];
    try &amp;#123;
        //第一個參數不是連結就要篩選掉
        if (urlED.substring(0, 4) !== &amp;#39;http&amp;#39;) return msg.reply(&amp;#39;The link is not working.1&amp;#39;);

        //透過library判斷連結是否可運行
        const validate = await ytdl.validateURL(urlED);
        if (!validate) return msg.reply(&amp;#39;The link is not working.2&amp;#39;);

        //獲取歌曲資訊
        const info = await ytdl.getInfo(urlED);
        //判斷資訊是否正常
        if (info.videoDetails) &amp;#123;
            //指令下達者是否在語音頻道
            if (msg.member.voice.channel) &amp;#123;
                //判斷bot是否已經連到語音頻道 是:將歌曲加入歌單 不是:進入語音頻道並且播放歌曲
                if (!client.voice.connections.get(msg.guild.id)) &amp;#123;
                    //因為是第一次加入，宣告新的歌曲列表
                    musicList.set(guildID, new Array());

                    //將歌曲加入歌單
                    musicList.get(guildID).push(urlED);
                    //進入語音頻道
                    msg.member.voice.channel.join()
                        .then(connection =&amp;gt; &amp;#123;
                            msg.reply(&amp;#39;來了~&amp;#39;);
                            //const guildID = msg.guild.id;
                            const channelID = msg.channel.id;
                            //播放歌曲
                            playMusic2(connection, guildID, channelID);
                        &amp;#125;)
                        .catch(err =&amp;gt; &amp;#123;
                            msg.reply(&amp;#39;bot進入語音頻道時發生錯誤，請再試一次&amp;#39;);
                            console.log(err, &amp;#39;playMusicError2&amp;#39;);
                        &amp;#125;)
                &amp;#125; else &amp;#123;
                    //將歌曲加入歌單
                    musicList.get(guildID).push(urlED);
                    msg.reply(&amp;#39;已將歌曲加入歌單!&amp;#39;);
                &amp;#125;
            &amp;#125; else return msg.reply(&amp;#39;請先進入頻道:3...&amp;#39;);
        &amp;#125; else return msg.reply(&amp;#39;The link is not working.3&amp;#39;);
    &amp;#125; catch (err) &amp;#123;
        console.log(err, &amp;#39;playMusicError&amp;#39;);
    &amp;#125;
&amp;#125;

//?play 遞迴函式
async function playMusic2(connection, guildID, channelID) &amp;#123;
    try &amp;#123;
        //播放前歌曲清單不能沒有網址
        if (musicList.get(guildID).length &amp;gt; 0) &amp;#123;
            //設定音樂相關參數
            const streamOptions = &amp;#123;
                seek: 0,
                volume: 0.5,
                Bitrate: 192000,
                Passes: 1,
                highWaterMark: 1
            &amp;#125;;
            //讀取清單第一位網址
            const stream = await ytdl(musicList.get(guildID)[0], &amp;#123;
                filter: &amp;#39;audioonly&amp;#39;,
                quality: &amp;#39;highestaudio&amp;#39;,
                highWaterMark: 26214400 //25ms
            &amp;#125;)

            //播放歌曲，並且存入dispatcher
            dispatcher.set(guildID, connection.play(stream, streamOptions));
            //監聽歌曲播放結束事件
            dispatcher.get(guildID).on(&amp;quot;finish&amp;quot;, finish =&amp;gt; &amp;#123;
                //將清單中第一首歌清除
                if (musicList.get(guildID).length &amp;gt; 0) musicList.get(guildID).shift();
                //播放歌曲
                playMusic2(connection, guildID, channelID);
            &amp;#125;)
        &amp;#125; else disconnectMusic(guildID, channelID); //清空歌單並且退出語音頻道
    &amp;#125; catch (err) &amp;#123;
        console.log(err, &amp;#39;playMusic2Error&amp;#39;);
    &amp;#125;
&amp;#125;

//?disconnect
function disconnectMusic(guildID, channelID) &amp;#123;
    try &amp;#123;
        //判斷bot是否在此群組的語音頻道
        if (client.voice.connections.get(guildID)) &amp;#123;
            //清空歌曲清單
            musicList.set(guildID, new Array());
            //退出語音頻道
            client.voice.connections.get(guildID).disconnect();

            client.channels.fetch(channelID).then(channel =&amp;gt; channel.send(&amp;#39;晚安~&amp;#39;));
        &amp;#125; else client.channels.fetch(channelID).then(channel =&amp;gt; channel.send(&amp;#39;可是..我還沒進來:3&amp;#39;))
    &amp;#125; catch (err) &amp;#123;
        console.log(err, &amp;#39;disconnectMusicError&amp;#39;);
    &amp;#125;
&amp;#125;

//?replay
function replayMusic(guildID) &amp;#123;
    if (musicList.get(guildID).length &amp;gt; 0) &amp;#123;
        //把當前曲目再推一個到最前面
        musicList.get(guildID).unshift(musicList[0]);
        //將歌曲關閉，觸發finish事件
        //finish事件將清單第一首歌排出，然後繼續播放下一首
        if (dispatcher.get(guildID) !== undefined) dispatcher.get(guildID).end();
    &amp;#125;
&amp;#125;

//?skip
function skipMusic(guildID) &amp;#123;
    //將歌曲關閉，觸發finish事件
    if (dispatcher.get(guildID) !== undefined) dispatcher.get(guildID).end();
&amp;#125;

//?np
async function nowPlayMusic(guildID, channelID) &amp;#123;
    try &amp;#123;
        if (dispatcher.get(guildID) !== undefined &amp;amp;&amp;amp; musicList.get(guildID).length &amp;gt; 0) &amp;#123;
            //從連結中獲取歌曲資訊 標題 總長度等
            const info = await ytdl.getInfo(musicList.get(guildID)[0]);
            //歌曲標題
            const title = info.videoDetails.title;
            //歌曲全長(s)
            const songLength = info.videoDetails.lengthSeconds;
            //當前播放時間(ms)
            const nowSongLength = Math.floor(dispatcher.get(guildID).streamTime / 1000);
            //串字串
            const message = `$&amp;#123;title&amp;#125;\n$&amp;#123;streamString(songLength,nowSongLength)&amp;#125;`;
            client.channels.fetch(channelID).then(channel =&amp;gt; channel.send(message))
        &amp;#125;
    &amp;#125; catch (err) &amp;#123;
        console.log(err, &amp;#39;nowPlayMusicError&amp;#39;);
    &amp;#125;
&amp;#125;

//▬▬▬▬▬▬▬▬▬?▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬▬
function streamString(songLength, nowSongLength) &amp;#123;
    let mainText = &amp;#39;?&amp;#39;;
    const secondText = &amp;#39;▬&amp;#39;;
    const whereMain = Math.floor((nowSongLength / songLength) * 100);
    let message = &amp;#39;&amp;#39;;
    for (i = 1; i &amp;lt;= 30; i++) &amp;#123;
        if (i * 3.3 + 1 &amp;gt;= whereMain) &amp;#123;
            message = message + mainText;
            mainText = secondText;
        &amp;#125; else &amp;#123;
            message = message + secondText;
        &amp;#125;
    &amp;#125;
    return message;
&amp;#125;

//?queue
async function queueShow(guildID, channelID) &amp;#123;
    try &amp;#123;
        if (musicList.get(guildID).length &amp;gt; 0) &amp;#123;
            let info;
            let message = &amp;#39;&amp;#39;;
            for (i = 0; i &amp;lt; musicList.get(guildID).length; i++) &amp;#123;
                //從連結中獲取歌曲資訊 標題 總長度等
                info = await ytdl.getInfo(musicList.get(guildID)[i]);
                //歌曲標題
                title = info.videoDetails.title;
                //串字串
                message = message + `\n$&amp;#123;i+1&amp;#125;. $&amp;#123;title&amp;#125;`;
            &amp;#125;
            //把最前面的\n拿掉
            message = message.substring(1, message.length);
            client.channels.fetch(channelID).then(channel =&amp;gt; channel.send(message))
        &amp;#125;
    &amp;#125; catch (err) &amp;#123;
        console.log(err, &amp;#39;queueShowError&amp;#39;);
    &amp;#125;
&amp;#125;
//#endregion
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smilin.net/2020/09/21/12thDay21/</guid>
            <title>Day21 - 認識GitHub</title>
            <link>https://smilin.net/2020/09/21/12thDay21/</link>
            <category>node.js</category>
            <category>bot</category>
            <category>discord</category>
            <category>discord.js</category>
            <category>教學</category>
            <category>12th鐵人賽</category>
            <pubDate>Mon, 21 Sep 2020 09:27:40 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;今天想先說該怎麼把專案推上github，可以順便複習與heroku配套的git指令&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;heroku會用到git是因為heroku推程序這個動作跟github一樣，都是將專案推到網路上某個地方，推到github或heroku的差別而已&lt;/p&gt;
&lt;p&gt;既然如此，heroku理所當然也可以做到跟github一樣的事情&lt;br&gt;那又為什麼還要額外放在github呢?&lt;/p&gt;
&lt;h1 id=&#34;GitHub&#34;&gt;&lt;a href=&#34;#GitHub&#34; class=&#34;headerlink&#34; title=&#34;GitHub&#34;&gt;&lt;/a&gt;GitHub&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/J0tiaEH.png&#34; alt=&#34;21-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;GitHub是基於Git語言的開源專案庫&lt;br&gt;他提供任何人將自己的程序打包成專案，透過Git推上GitHub進行開發&amp;amp;版本紀錄&lt;br&gt;GitHub對開源有著良好的圖形介面支持，所有人都可以在GitHub上看到對方的專案，並且提出協作要求、讓多位工程師來協同完成一件專案&lt;/p&gt;
&lt;p&gt;一言以蔽之、將我們的機器人推上GitHub就像是展示你自己的作品，讓所有人都看的到你做過哪些東西，又是何時更新、更新了甚麼，是資訊人要讓人了解自己最快速的一步&lt;/p&gt;
&lt;p&gt;推GitHub專案雖然也要使用Git語言，但因為GitHub是圍繞著Git開發的網站，其對Git語言的支援十分強大，除了網站本身按一按就能把專案推上去以外，他還推出了專案管理的圖形使用者介面&lt;/p&gt;
&lt;h1 id=&#34;GitHub-Desktop&#34;&gt;&lt;a href=&#34;#GitHub-Desktop&#34; class=&#34;headerlink&#34; title=&#34;GitHub Desktop&#34;&gt;&lt;/a&gt;GitHub Desktop&lt;/h1&gt;&lt;p&gt;&lt;a href=&#34;https://desktop.github.com/&#34;&gt;https://desktop.github.com/&lt;/a&gt;&lt;br&gt;請點擊連結並且下載GitHub Desktop&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/rIGrdAg.png&#34; alt=&#34;21-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;安裝完開啟後會要求你登入，請直接登入&lt;br&gt;可以選擇亮或暗主題&lt;br&gt;一開始會問你要不要直接新增專案，請拒絕，想辦法進到這個畫面 &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/1YNrkrT.png&#34; alt=&#34;21-3&#34;&gt;&lt;/p&gt;
&lt;p&gt;點擊左上角，拉出Add下拉框，點開後有個Create new repository&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/ZAwEqcQ.png&#34; alt=&#34;21-4&#34;&gt;&lt;/p&gt;
&lt;p&gt;這是新增一個新專案，點下去後他會先要你選擇本機上的路徑&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/bj3clLV.png&#34; alt=&#34;21-5&#34;&gt;&lt;/p&gt;
&lt;p&gt;第一個是資料夾名稱，我們取DiscordBot&lt;br&gt;第二個是專案簡介，可以隨便寫、但注意不要太多，一行就好&lt;br&gt;第三個是路徑，請放在原專案外面&lt;br&gt;Initialize this repository with a README記得打勾&lt;br&gt;下面兩個是使用語言之類的，這部份GitHub上傳後會自動判斷，可以不管&lt;/p&gt;
&lt;p&gt;都好了之後我們按…..不對!還不能按Create repository!&lt;br&gt;我們先進到專案資料夾&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/G02dXTW.png&#34; alt=&#34;21-6&#34;&gt;&lt;/p&gt;
&lt;p&gt;我們把.git資料夾改名成Herokugit&lt;br&gt;如果看不到.git資料夾請上網查一下怎麼看到隱藏資料夾&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/g4EsJIR.png&#34; alt=&#34;21-7&#34;&gt;&lt;/p&gt;
&lt;p&gt;好了之後我們回去按Create repository&lt;br&gt;按完會發現資料夾內多了&lt;/p&gt;
&lt;p&gt;README.md&lt;br&gt;.gitattributes&lt;br&gt;.git&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/r8bUU7S.png&#34; alt=&#34;21-8&#34;&gt;&lt;/p&gt;
&lt;p&gt;記得我們一開始建Heroku有提到嗎，只要是Git專案都會有.git檔案&lt;br&gt;因為使用Heroku的同時，他就是屬於Heroku的專案了，我們如果也要推上GitHub的話，就要先讓他不是Heroku的專案，不然會覆蓋掉!&lt;/p&gt;
&lt;p&gt;然後我們新增一個.gitignore，注意沒有副檔名喔&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/HWtBE6s.png&#34; alt=&#34;21-9&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/JbUJatt.png&#34; alt=&#34;21-10&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;auth.json
.gitignore
Herokugit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;這是給GitHub看的文件，可以讓GitHub在將專案commit前，選擇要忽略哪些檔案&lt;br&gt;我們的私密資料都在auth.json，所以auth.json自然不能推到任何人都能看得GitHub上&lt;br&gt;Herokugit是讓GitHub不會上傳到Heroku的.git檔案&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/CeXOZni.png&#34; alt=&#34;21-11&#34;&gt;&lt;/p&gt;
&lt;p&gt;這時我們回到GitHubDesktop，可以看到左下角告訴你，專案commit好了，並且版號是init(初始化)&lt;/p&gt;
&lt;p&gt;在宣告一個新專案庫時，相當於他幫你下了&lt;/p&gt;
&lt;p&gt;git add .&lt;br&gt;git commit init&lt;/p&gt;
&lt;p&gt;這兩個指令，我們可以點左上角的history看到我們有哪些檔案被commit，只要等等再下push就會被推上網際網路&lt;/p&gt;
&lt;p&gt;那我們點一下右上角的Publish repository&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/8oMDTIu.png&#34; alt=&#34;21-12&#34;&gt;&lt;/p&gt;
&lt;p&gt;第一次push時會有像這樣的提示框，他會二次確認你在GitHub上的專案要叫甚麼名字&lt;/p&gt;
&lt;p&gt;Keep this code private打勾的話，這個專案就會是私人的，只有你登錄帳號時看的見&lt;br&gt;我們希望程序是可以被人看見的，所以我們要把打勾取消掉&lt;/p&gt;
&lt;p&gt;好了之後我們點Publish repository，他就會開始上傳專案，第一次比較久，我們等一下，可以去到杯水再回來看看&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/2UQueAh.png&#34; alt=&#34;21-13&#34;&gt;&lt;/p&gt;
&lt;p&gt;畫面長這樣就是成功了，左下角的commit消失(被推上去)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/RZ42yiU.png&#34; alt=&#34;21-14&#34;&gt;&lt;/p&gt;
&lt;p&gt;History可以看到我們的歷史版本，以及做了那些變動&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smilin.net/2020/09/20/12thDay20/</guid>
            <title>Day20 - GAS抓表(4)</title>
            <link>https://smilin.net/2020/09/20/12thDay20/</link>
            <category>node.js</category>
            <category>bot</category>
            <category>discord</category>
            <category>discord.js</category>
            <category>教學</category>
            <category>12th鐵人賽</category>
            <pubDate>Sun, 20 Sep 2020 10:26:24 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;昨天我們成功把API跟程式做了連結，並且可以在dc使用&lt;/p&gt;
&lt;p&gt;但從GAS到程序寫法都存在問題，今天筆者會一一修正&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/fR5A15o.png&#34; alt=&#34;20-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;首先請開啟GAS，這是我們目前的樣子&lt;/p&gt;
&lt;p&gt;為了讓搜尋方式從JSONObject轉成JSONArray，第9~19行請改寫如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/T9RPJMS.png&#34; alt=&#34;20-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;重點在於宣告dataExport的時候，從{}變成了[]&lt;br&gt;這就是JSONObject跟JSONArray的差別了&lt;br&gt;{}表示JSONObject，而[]表示JSONArray&lt;/p&gt;
&lt;p&gt;做好後我們跟上次一樣發布成網頁應用程式&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/ilA3YVL.png&#34; alt=&#34;20-3&#34;&gt;&lt;/p&gt;
&lt;p&gt;以後要記得，只要想修改GAS，修改完就一定要發布，然後版本一定要+1&lt;br&gt;版本只會越來越高，如果選擇舊的版號的話，API是抓不到你最新的修改的喔!&lt;/p&gt;
&lt;p&gt;成功改成JSONArray後，原本的寫法就不適用了，不過我們也不打算繼續使用舊的邏輯&lt;br&gt;先來整理目前程序接收到API後的邏輯&lt;/p&gt;
&lt;p&gt;discord訊息事件觸發 -&amp;gt; 沒有前綴字，進入API字串比對 -&amp;gt; 比對完成，反饋結果 -&amp;gt; 將結果反饋回discord&lt;/p&gt;
&lt;p&gt;這樣做最明顯的問題就是每有一個訊息事件，bot就要打一次API上去&lt;br&gt;花費的時間過長，容易增加bot錯誤&lt;br&gt;且沒有考量過GAS每日免費額度問題&lt;/p&gt;
&lt;p&gt;那麼該怎麼解決這問題呢?其實也很簡單，只要讓抓取API的行為只要執行一次就好&lt;/p&gt;
&lt;p&gt;整個DiscordBot，唯一只會執行一次的地方就在ready事件&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/XBnoUg1.png&#34; alt=&#34;20-4&#34;&gt;&lt;/p&gt;
&lt;p&gt;當程序啟動，程序自動執行login方法，login成功就會收到唯一一次的ready&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/xRZkc3k.png&#34; alt=&#34;20-5&#34;&gt;&lt;/p&gt;
&lt;p&gt;將原本在下面的API事件拉上ready，並且將messageED改成dataED&lt;br&gt;我們之後就不讓GetGas做字串比對了，只要幫我們打API並且整理好資料後反饋就好&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Tcb5HJq.png&#34; alt=&#34;20-6&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/lif9ZJN.png&#34; alt=&#34;20-7&#34;&gt;&lt;/p&gt;
&lt;p&gt;處理好上面後，做字串比對&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/xSzaxE8.png&#34; alt=&#34;20-8&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//BaseExcel字串比對
function GetBaseExcelData(msg) &amp;#123;
    try &amp;#123;
        if (BaseExcelData) &amp;#123;
            const userMessage = msg.content;

            e = BaseExcelData.filter(element =&amp;gt; &amp;#123;
                return element.NAME === userMessage;
            &amp;#125;)

            if (e) return e[0].VALUE;
            else return false;
        &amp;#125;
    &amp;#125; catch (err) &amp;#123;
        console.log(&amp;#39;GetBaseExcelDataError&amp;#39;, err);
    &amp;#125;
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然後將字串比對的function拉到原本請求API的地方&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/jnV3w2k.png&#34; alt=&#34;20-9&#34;&gt;&lt;/p&gt;
&lt;p&gt;都完成後，我們試著執行看看&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Y4k84C8.png&#34; alt=&#34;20-10&#34;&gt;&lt;/p&gt;
&lt;p&gt;成了!&lt;br&gt;這樣我們的bot只在執行時會去取API&lt;br&gt;解決了GAS限制的問題，並且每次的讀寫速度也提升許多&lt;/p&gt;
&lt;p&gt;到此，DiscordBot後台0負擔這個主題的基本設置大致說完了&lt;br&gt;這邊附上完整的教學專案&lt;br&gt;&lt;a href=&#34;https://supr.link/MePIY&#34;&gt;https://supr.link/MePIY&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;剩下十天會教一些額外的內容，例如昨天提到GAS的訊息應該是分群組的，音樂系統如何分群使用等，以及GitHub使用….如果讀者有想看的也可以留言給筆者知道，筆者會的話再做安排&lt;/p&gt;
&lt;p&gt;最後我們將檔案推上Heroku，記得怎麼推嗎?&lt;/p&gt;
&lt;p&gt;git add .&lt;br&gt;git commit -m ‘版本說明’&lt;br&gt;git push heroku master&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smilin.net/2020/09/19/12thDay19/</guid>
            <title>Day19 - GAS抓表(3)</title>
            <link>https://smilin.net/2020/09/19/12thDay19/</link>
            <category>node.js</category>
            <category>bot</category>
            <category>discord</category>
            <category>discord.js</category>
            <category>教學</category>
            <category>12th鐵人賽</category>
            <pubDate>Sat, 19 Sep 2020 20:00:43 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;昨天我們的程式成功抓到API的資料並且對他做分析了&lt;br&gt;現在要串回主程序(bot.js)上&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/lLXAqcN.png&#34; alt=&#34;19-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;請幫我在bot.js引用GetGas.js&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/mwE3NRg.png&#34; alt=&#34;19-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/xMGI9Fa.png&#34; alt=&#34;19-3&#34;&gt; &lt;/p&gt;
&lt;p&gt;然後之前的文字回應系統，跟音樂系統一樣用一個function包起來，比較好看&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/uvfVZ2Q.png&#34; alt=&#34;19-4&#34;&gt;&lt;/p&gt;
&lt;p&gt;我們希望當訊息不符合任一前綴系統的情況，就要拿字串跟資料庫比對&lt;br&gt;所以我們把function放在default(默認)，只要前面的case都沒進去就會到default&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/N0R0NAW.png&#34; alt=&#34;19-5&#34;&gt; &lt;/p&gt;
&lt;p&gt;之後新增BaseExcelFunction方法&lt;br&gt;內容是執行GetGas底下的getBaseExcel元素&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/lg1t1wq.png&#34; alt=&#34;19-6&#34;&gt;&lt;/p&gt;
&lt;p&gt;回來看GetGas的getBaseExcel&lt;br&gt;getBaseExcel元素指向一callback方法&lt;br&gt;帶了一個參數userTalk，callback方法使用callback代表方法的結束，呼叫方會在callback欄位宣告function，其帶回參數(messageED)就是getBaseExcel的方法中callback的值&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/XXBAW5u.png&#34; alt=&#34;19-7&#34;&gt;&lt;/p&gt;
&lt;p&gt;這樣寫完，機器人就能做簡單的回話了!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;雖然功能做好了，但有許多問題&lt;/p&gt;
&lt;p&gt;依嚴重性依序列舉的話&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;   bot每從discord收到一則訊息就會使用一次API&lt;/li&gt;
&lt;li&gt;   使用JsonObject做迴圈查詢十分沒有效率&lt;/li&gt;
&lt;li&gt;   缺乏防呆&amp;amp;參數替換&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;理論上，機器人對對應的詞句回話這個動作是即時的，透過這個寫法，我們每次查詢API都必須等待2~3秒的時間，API才會將結果反饋給bot&lt;br&gt;而且多次傳送API不僅降低了程序的穩定，也要考慮GAS提供的每日配額&lt;br&gt;如果bot所在的群組一天訊息超過2萬筆，API就一定會被花光，而一天兩萬筆訊息、對於一個支援多群組的bot來說其實並不困難&lt;/p&gt;
&lt;p&gt;GetGas中對於data的處理方式也是極其低效的，雖然在捨棄SQL這種專為優化資料存取的系統時，就難以追求最高效的方法，但目前的做法也仍是相對低效的&lt;/p&gt;
&lt;p&gt;以及程序目前只是簡單的判A給B，功能十分單一&lt;br&gt;我沒辦法針對特定群組，有該群組專屬的詞彙，或是對特定回應帶tag等&lt;/p&gt;
&lt;p&gt;明天我們會將程序做一次翻新&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smilin.net/2020/09/18/12thDay18/</guid>
            <title>Day18 - GAS抓表(2)</title>
            <link>https://smilin.net/2020/09/18/12thDay18/</link>
            <category>node.js</category>
            <category>bot</category>
            <category>discord</category>
            <category>discord.js</category>
            <category>教學</category>
            <category>12th鐵人賽</category>
            <pubDate>Fri, 18 Sep 2020 09:17:51 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;昨天我們在雲端上建好了試算表&lt;br&gt;將GAS發布成API的GET方法，只要我們訪問就能成功獲取試算表資料&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;今天我們來寫點程式&lt;/p&gt;
&lt;p&gt;我們來回顧一下，目前機器人在Message下可以做到的事情&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文字回應&lt;/li&gt;
&lt;li&gt;音樂系統&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我們希望增加一個可以針對表格內容，動態觸發回應的功能&lt;br&gt;這種功能因為不會直接知道有哪些指令，應該要是沒有前綴字的，只要字串符合就會觸發&lt;/p&gt;
&lt;p&gt;由此可知，我們應該要將這個方法添加在所有功能的最底層&lt;br&gt;只有當前綴字都不符合時，才會來辨識表格資料&lt;/p&gt;
&lt;p&gt;觀念大致帶過，我們開始動手&lt;/p&gt;
&lt;p&gt;先幫我在專案目錄下建立一個Script資料夾，在裡面放一個GetGas.js&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/OJB3z4l.png&#34; alt=&#34;18-1&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//#region 全域引用
const auth = require(&amp;#39;../JSONHome/auth.json&amp;#39;);
const request = require(&amp;#39;request&amp;#39;);

//#endregion
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;裡面請先幫我引用auth.json跟request&lt;/p&gt;
&lt;p&gt;auth目前只有存放機器人的key，跟key一樣，我們不希望自己與GAS串接的API暴露&amp;amp;寫死在程式裡面，所以之後要把連結寫在auth，之後透過auth來讀取連結&lt;br&gt;務必注意引用auth的路徑比bot.js多了一個點，這是因為GetGas.js要先從Script路徑出來才找的到JSONHome。&lt;/p&gt;
&lt;p&gt;request是提供給js的網路請求library，我們之後都會透過他來傳遞Get方法&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/pwcJ7OJ.png&#34; alt=&#34;18-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;auth.json目前的樣子&lt;/p&gt;
&lt;p&gt;在原本的Key後面加上一個逗號，然後新增Gas參數，內涵一個JsonObject{}&lt;br&gt;{}裡面再包一個Get參數，內涵一個JsonArray[]&lt;br&gt;第一個JsonObject內包一個baseExcel參數&lt;br&gt;baseExcel參數會帶回我們昨天做的API連結&lt;/p&gt;
&lt;p&gt;包三層是為了增加程式含意，方便之後閱讀&lt;br&gt;跟Get同一層之後可以再添加post等&lt;br&gt;不過Get原本是包JsonObject就好，這邊為了多介紹JsonArray所以用了，原本就會的同學可以少包Array&lt;/p&gt;
&lt;p&gt;這種架構下，如果我們要獲取Url就會是&lt;br&gt;auth.Gas.Get[0].baseExcel&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/YcsHJpa.png&#34; alt=&#34;18-3&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//#region 宣告請求
const baseExcel = &amp;#123;
    &amp;#39;method&amp;#39;: &amp;#39;GET&amp;#39;,
    &amp;#39;url&amp;#39;: auth.Gas.Get[0].baseExcel,
    &amp;#39;headers&amp;#39;: &amp;#123;&amp;#125;
&amp;#125;;

//#endregion
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;再來我們宣告一個baseExcel常數，將http請求需要的參數帶給他&lt;br&gt;method表示我們使用的是Get方法&lt;br&gt;url就帶我們剛剛寫好的url&lt;br&gt;headers是傳送時的表頭，這邊放空值就好&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/8v4kmCE.png&#34; alt=&#34;18-4&#34;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//#region 傳送請求
exports.getBaseExcel = function(userTalk, callback) &amp;#123;
    let backValue = new Array;
    request(baseExcel, function(error, response) &amp;#123;
        try &amp;#123;
            if (error) &amp;#123;
                callback(error);
            &amp;#125; else &amp;#123;
                const data = JSON.parse(response.body); //接收回傳(response)的body
                const keysValue = Object.keys(data); //將JsonObject的key值輸出成Array
                //迴圈判斷是否符合
                for (let i = 0; i &amp;lt; keysValue.length; i++) &amp;#123;
                    if (data[keysValue[i]].NAME === userTalk) &amp;#123;
                        callback(data[keysValue[i]].VALUE); //正確回傳結果
                    &amp;#125;
                &amp;#125;
                callback(false);
            &amp;#125;
        &amp;#125; catch (err) &amp;#123;
            console.log(&amp;#39;getBaseExcelError&amp;#39;, err);
            callback(&amp;#39;getBaseExcelError&amp;#39;);
        &amp;#125;
    &amp;#125;);
&amp;#125;;

//#endregion
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最後我們實際創建一個callback方法，供外部調用&lt;br&gt;http請求後，將回傳值定義為JSON給data&lt;br&gt;之後讓data跑迴圈，判斷message是否與表格的NAME欄相符&lt;br&gt;叫到名字的話，機器人就要回傳VALUE值&lt;/p&gt;
&lt;p&gt;這樣我們就把GetGas.js做好了，剩下bot.js呼叫與傳送訊息的部分&lt;br&gt;我們明天繼續&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smilin.net/2020/09/17/12thDay17/</guid>
            <title>Day17 - GAS抓表(1)</title>
            <link>https://smilin.net/2020/09/17/12thDay17/</link>
            <category>node.js</category>
            <category>bot</category>
            <category>discord</category>
            <category>discord.js</category>
            <category>教學</category>
            <category>12th鐵人賽</category>
            <pubDate>Thu, 17 Sep 2020 09:48:31 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;今天我們來寫GAS&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h2 id=&#34;文件創建&#34;&gt;&lt;a href=&#34;#文件創建&#34; class=&#34;headerlink&#34; title=&#34;文件創建&#34;&gt;&lt;/a&gt;文件創建&lt;/h2&gt;&lt;p&gt;首先請打開google，登入你自己的google雲端，並且在喜歡的地方創建一個資料夾，取名為DiscordDataBaseApi&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/rczINQm.png&#34; alt=&#34;17-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;右鍵分別創建一個試算表跟一個GAS&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/gGDTERM.png&#34; alt=&#34;17-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/EIbdgPE.png&#34; alt=&#34;17-3&#34;&gt;&lt;/p&gt;
&lt;p&gt;兩個文件創立後都會直接開一個新視窗&lt;br&gt;Excel取名為MyData，像我們一樣隨便輸入一些資料&lt;br&gt;然後複製網址上面d&amp;#x2F; 到 &amp;#x2F;edit 中間的亂碼，我的是&lt;br&gt;1mQ6qTJfOs3Gv5–K9r87w56wmDc3hUcpHm5hF1YKTms&lt;/p&gt;
&lt;p&gt;這串英數是我們Excel的ID，只要把這串亂碼給Google看，他就知道你找的是這張表&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/EPVxxkb.png&#34; alt=&#34;17-4&#34;&gt;&lt;/p&gt;
&lt;p&gt;我們回到 GAS ，填入以下程式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var id = &amp;#39;你的表格ID&amp;#39;; //抓取表單
  var spreadsheet = SpreadsheetApp.openById(id); // Sheet id
  var sheet = spreadsheet.getSheets()[0]; // 要第幾個sheet？ 0 就是第一個
  var rowLength = sheet.getLastRow()-1; //取行長度
  var columnLength = sheet.getLastColumn(); //取列長度
  var data = sheet.getRange(2,1,rowLength,columnLength).getValues(); // 取得的資料
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;把剛剛的id給GAS抓表，抓到表後讀取行列範圍，然後從範圍中抓取資料&lt;br&gt;那一長串程式碼全都是google提供的function，雖然好像有library可以看，筆者是建議記下來就好&lt;/p&gt;
&lt;p&gt;我們範圍是從第2行開始抓取資料到最底，這是因為我們表格的第一行屬於標題行，給使用者看的，我們就不抓取這行資料&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/YGdSESn.png&#34; alt=&#34;17-5&#34;&gt;&lt;/p&gt;
&lt;p&gt;再來幫我新增這幾行資料&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  var dataExport = &amp;#123;&amp;#125;;
  
  for(i in data)&amp;#123;
    if(data[i][0] != &amp;quot;&amp;quot;)&amp;#123;
    dataExport[data[i][0]] = &amp;#123;
      DATE:   data[i][1],
      NAME:   data[i][2],
      VALUE:  data[i][3]
      &amp;#125;
    &amp;#125;
  &amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果對json操作有一點經驗的同學，對這幾行應該不陌生&lt;br&gt;把data中的資料一個個串成json，這樣才方便我們做後續處理&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/mewJW4N.png&#34; alt=&#34;17-6&#34;&gt;&lt;/p&gt;
&lt;p&gt;最後加上這行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  var dataExportFormat = JSON.stringify(dataExport);
  return ContentService.createTextOutput(dataExportFormat).setMimeType(ContentService.MimeType.JSON);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;把整理好的資料return回去&lt;br&gt;GAS回傳需要先經手過他們的方法，API接收到的資料才是正常的&lt;br&gt;這部份當成return dataExport就可以了。&lt;/p&gt;
&lt;h2 id=&#34;發布&#34;&gt;&lt;a href=&#34;#發布&#34; class=&#34;headerlink&#34; title=&#34;發布&#34;&gt;&lt;/a&gt;發布&lt;/h2&gt;&lt;p&gt;表格都填完，GAS都寫好後，我們就能抓取到表格資料了&lt;br&gt;但是程式該怎麼訪問GAS呢?&lt;br&gt;為了讓程式可以訪問到GAS，我們需要將GAS做成API&lt;br&gt;確認程式存檔後，幫我點左上角發布-&amp;gt;部屬為網頁應用程式&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/jR2dTYm.png&#34; alt=&#34;17-7&#34;&gt;&lt;/p&gt;
&lt;p&gt;會有三個下拉框出現&lt;br&gt;1.	是版本號&lt;br&gt;2.	發布者&lt;br&gt;3.	存取權限&lt;/p&gt;
&lt;p&gt;因為是第一次發布，版本一定是1&lt;br&gt;發布者是你就好不要動&lt;br&gt;這邊要注意第三點，務必設定成Anyone,even anonymous&lt;br&gt;確定無誤後我們點擊Deploy，他會要你核對權限，一路允許就好&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/HD5slmK.png&#34; alt=&#34;17-8&#34;&gt;&lt;/p&gt;
&lt;p&gt;都完成後，我們最後會拿到一組連結，我們試著將連結放在瀏覽器上&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/mZh9b3a.png&#34; alt=&#34;17-9&#34;&gt;&lt;/p&gt;
&lt;p&gt;如果成功就會像筆者這樣拿到表格上的檔案了!&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smilin.net/2020/09/16/12thDay16/</guid>
            <title>Day16 - 選擇你的資料庫</title>
            <link>https://smilin.net/2020/09/16/12thDay16/</link>
            <category>node.js</category>
            <category>bot</category>
            <category>discord</category>
            <category>discord.js</category>
            <category>教學</category>
            <category>12th鐵人賽</category>
            <pubDate>Wed, 16 Sep 2020 09:10:15 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;昨天我們成功把機器人丟到雲端託管，現在機器人可以..&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;ul&gt;
&lt;li&gt;24小時不關機的回應大家的文字&lt;/li&gt;
&lt;li&gt;24小時不關機的播放音樂&lt;/li&gt;
&lt;li&gt;24小時不關機的做任何你已經自己寫好的原創功能!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也就是說，原本機器人是前端(Discord)與後端(你的電腦)&lt;/p&gt;
&lt;p&gt;現在是前端(Discord)與後端(Heroku)了，儼然是一個自成循環的軟體，自行運作&lt;br&gt;只要不是要更新以及沒有重大bug的話，便可以減少維護，只要當一個使用者就好&lt;/p&gt;
&lt;p&gt;不過這樣的架構實際上是不夠完整的，Day14我們有帶到，關於面向使用者的軟體，通常會有&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前端&lt;/li&gt;
&lt;li&gt;後端&lt;/li&gt;
&lt;li&gt;與資料庫&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目前我們還缺乏一個資料庫，如果是之前在本機的情況，本文章只要教各位怎麼安裝MySQL就好；但是現在機器人已經被推上Heroku了，我們對對方的主機又沒有完全的控制權限，這又該怎麼辦呢?&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;Heroku的資料庫&#34;&gt;&lt;a href=&#34;#Heroku的資料庫&#34; class=&#34;headerlink&#34; title=&#34;Heroku的資料庫&#34;&gt;&lt;/a&gt;Heroku的資料庫&lt;/h2&gt;&lt;p&gt;我們來介紹Heroku的資料庫吧&lt;br&gt;因為這東西筆者的了解也不深，只是有必要提到&lt;br&gt;如果介紹有錯還望各位指正，以免誤導到人，感謝^^”&lt;/p&gt;
&lt;p&gt;Heroku不只提供軟體&amp;amp;網站的上傳發佈，同時也支援這些程式在Heroku專案的主機上建立專屬的本地資料庫&lt;br&gt;其主要使用PostgreSQL，是一種關聯性資料庫&lt;br&gt;關聯性資料庫是甚麼?你當成MySQL就好，總之就是相對嚴謹(麻煩)的一種資料庫語言&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/COzboBR.png&#34; alt=&#34;16-1&#34;&gt; &lt;/p&gt;
&lt;p&gt;免費的Heroku Postgre提供1萬則的資料容量，只要你創建的DB總資料量超過這個數字後便無法寫入，並且會跟你收費以提高額度來支援更多的資料寫入量&lt;/p&gt;
&lt;p&gt;1萬這個數字說大不大說小不小，雖然說對於個人戶是夠用了，但如果長久維運，缺乏資料管理、造成資料堆積&lt;br&gt;又或是資料儲存的方式比較複雜，紀錄一次可能就會占用許多空間的話…實際上筆者覺得1萬行是完全不夠Bot使用的&lt;/p&gt;
&lt;p&gt;而且因為Heroku的操作都必須透過指令，只是程式的操作可能還好，在處理資料庫這種複雜的系統時，不自己寫一個圖形介面真的很難管理&lt;/p&gt;
&lt;h2 id=&#34;替代方案&#34;&gt;&lt;a href=&#34;#替代方案&#34; class=&#34;headerlink&#34; title=&#34;替代方案&#34;&gt;&lt;/a&gt;替代方案&lt;/h2&gt;&lt;p&gt;結合上述，我們整理出Heroku 原生資料庫的兩大問題&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;免費容量低&lt;/li&gt;
&lt;li&gt;管理困難&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;筆者Bot的製作訴求是自動、便利、好維護&lt;br&gt;如果使用Heroku資料庫的話還要擔心或許哪天Heroku會忽然想不開，去更新他們的資料庫語法…這與筆者的需求是完全背道而馳的&lt;/p&gt;
&lt;p&gt;因此，我們需要一個替代方案，這個做法就是GoogleAppsScript !&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/w7gmbo5.jpg&#34; alt=&#34;16-2&#34;&gt; &lt;/p&gt;
&lt;p&gt;GoogleAppsScript，簡稱GAS，不是容易爆炸的那個&lt;/p&gt;
&lt;p&gt;GAS是Google提供的一種程式檔，他使用JavaScript語言，並且自動引用Google提供的函式庫&lt;/p&gt;
&lt;p&gt;因為是Google自家產品，理所當然的，GAS可以輕鬆的調用Google旗下產品的資訊(例如Google文件，試算表等)&lt;/p&gt;
&lt;p&gt;並且GAS是一種存於Google雲端的程式，只要他正式發佈便也會是24小時自動運作的程序，不會消耗到筆者一毛錢!(重點)&lt;/p&gt;
&lt;h2 id=&#34;GAS的規格&#34;&gt;&lt;a href=&#34;#GAS的規格&#34; class=&#34;headerlink&#34; title=&#34;GAS的規格&#34;&gt;&lt;/a&gt;GAS的規格&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/wLtCjIq.png&#34; alt=&#34;16-3&#34;&gt; &lt;/p&gt;
&lt;p&gt;在本主題，我們將用試算表來儲存資料&lt;br&gt;藉由GAS來編寫API，供Bot調用&amp;amp;獲取資料&lt;/p&gt;
&lt;p&gt;上圖是GAS提供給使用者做各種操作的具體上限，我們看第一行的基本使用者(gmail.com)即可&lt;/p&gt;
&lt;p&gt;Properties read&amp;#x2F;write(屬性讀寫)&lt;br&gt;上限50000筆&amp;#x2F;天&lt;/p&gt;
&lt;p&gt;URL Fetch calls(URL調用)&lt;br&gt;上限20000筆&amp;#x2F;天&lt;/p&gt;
&lt;p&gt;先看URL Fetch calls，這句的意思是關於Bot一天內調用API的上限次數&lt;br&gt;如果Bot一天內對API的請求超過2萬次，Google就會中斷你的請求、並且給你一個大大的Error&lt;/p&gt;
&lt;p&gt;Properties read&amp;#x2F;write代表的是你的程序對試算表讀寫的次數上限&lt;br&gt;如果我的API被呼叫一次，程序就會對試算表做50000次的讀取，那這個API只要調用一次，今天的扣打就用完了(x&lt;/p&gt;
&lt;p&gt;這樣，我們得出一個結論&lt;br&gt;理論上，只要我的每個API內讀寫資料的次數平均介於2~3次&lt;br&gt;那我們一天的資料請求上限就會足足有2萬筆，直接是Heroku總上限的兩倍!&lt;/p&gt;
&lt;p&gt;當然這種做法也有他的弊端，Heroku的上限是總儲存上限，而我們的GAS上限是總調用上限&lt;br&gt;雖然隔天次數就會給你加滿，但只要我調用的次數足夠頻繁，理論上每天都會面臨資料無法再調用的問題，對於如何減少機器人的資料調用會需要做些功夫&lt;/p&gt;
&lt;p&gt;遠水救不了近火，試算表資料的調用途中經過GAS，再從住在Heroku的bot程序發送API跟GAS要資料&lt;br&gt;速度理所當然沒有像使用Heroku Postgre一樣即時&lt;/p&gt;
&lt;p&gt;因為試算表非正統SQL，SQL是一種專門為讀&amp;#x2F;寫資料做優化的體系；當資料量大到一個程度時，效能一定沒有SQL好&lt;/p&gt;
&lt;p&gt;但同時GAS的好處也很明顯&lt;/p&gt;
&lt;p&gt;資料的儲存幾乎是無上限的&lt;br&gt;Google自帶的使用者介面讓管理十分容易，相對不用擔心資料備份等問題&lt;br&gt;新增刪除資料的方式都會比Heroku Postgre來的更加直觀&lt;br&gt;不用擔心未來因為GoogleAppsScript改版，資料會很難帶走，替代方案也多的是&lt;/p&gt;
&lt;p&gt;以上，便是筆者針對資料庫方案取捨的介紹&lt;br&gt;明天我們著手開始編寫基本的試算表資料跟GAS&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smilin.net/2020/09/15/12thDay15/</guid>
            <title>Day15 - Heroku架設&amp;細部設定</title>
            <link>https://smilin.net/2020/09/15/12thDay15/</link>
            <category>node.js</category>
            <category>bot</category>
            <category>discord</category>
            <category>discord.js</category>
            <category>教學</category>
            <category>12th鐵人賽</category>
            <pubDate>Tue, 15 Sep 2020 18:20:11 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;早安&lt;br&gt;昨天我們把Heroku跟Git都安裝好了，今天我們要將我們的專案變成Git專案&lt;br&gt;並且推上Heroku&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;h1 id=&#34;第一次推送專案&#34;&gt;&lt;a href=&#34;#第一次推送專案&#34; class=&#34;headerlink&#34; title=&#34;第一次推送專案&#34;&gt;&lt;/a&gt;第一次推送專案&lt;/h1&gt;&lt;p&gt;首先，跟之前一樣&lt;br&gt;我們先用VSCode開啟專案資料夾&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/ACltFP5.png&#34; alt=&#34;15-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;確定終端機路徑正確後，輸入&lt;br&gt;git init&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/7aVXFF2.png&#34; alt=&#34;15-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;左側的檔案都變得綠綠的&lt;br&gt;如果你有看的到隱藏資料夾的話，在專案底下還會看到一個.git的隱藏資料夾&lt;br&gt;那就是用來識別git專案的檔案，也是執行git語言時的依據&lt;/p&gt;
&lt;p&gt;這樣專案就轉換成git專案了，然後我們接下來要在heroku上創建一個專案庫&lt;br&gt;專案名稱的命名方式大多為 aaa-bbb-ccc&lt;br&gt;第一個字必須為小寫，且不能與其他在heroku上的專案撞名，所以越獨特越好&lt;br&gt;這邊筆者的專案名稱取做 the-bot-alice-on-heroku&lt;br&gt;我們輸入&lt;br&gt;heroku create 你的專案名稱&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/rpv8elG.png&#34; alt=&#34;15-3&#34;&gt;&lt;/p&gt;
&lt;p&gt;這時候如果到這裡看，成功的話就會看到剛剛創建的專案了&lt;br&gt;&lt;a href=&#34;https://dashboard.heroku.com/&#34;&gt;https://dashboard.heroku.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/KXLt0MO.png&#34; alt=&#34;15-4&#34;&gt;&lt;/p&gt;
&lt;p&gt;我們繼續輸入&lt;/p&gt;
&lt;p&gt;git add .&lt;br&gt;git commit -m init&lt;br&gt;git push heroku master&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/FJAbH1V.png&#34; alt=&#34;15-5&#34;&gt;&lt;/p&gt;
&lt;p&gt;最後有看到Build succeeded就是成功了!&lt;br&gt;這三個指令的意思依序是&lt;/p&gt;
&lt;p&gt;git add .&lt;br&gt;將目錄下的所有檔案加入git控管&lt;/p&gt;
&lt;p&gt;git commit -m init&lt;br&gt;將git控管下的檔案全部加入本次要推送的版本，因為是第一次推送所以是init，之後第n次推送的話程式碼要改成 git commit -m ‘版本說明’&lt;/p&gt;
&lt;p&gt;git push heroku master&lt;br&gt;將commit起來的版本推送(上傳)到heroku的主分支，總之就是上傳檔案&lt;/p&gt;
&lt;p&gt;所以之後如果要更新程式，都是依序使用這三個命令來上傳機器人&lt;/p&gt;
&lt;p&gt;接著我們運行看看&lt;br&gt;heroku logs –t&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/BezAjQn.png&#34; alt=&#34;15-6&#34;&gt;&lt;/p&gt;
&lt;p&gt;這是呼叫heroku的控制後台，相當於在看遠端主機運行程序時的終端機&lt;br&gt;要退出時按ctrl+c退出&lt;/p&gt;
&lt;p&gt;可以看到對方也接收到我們上傳的檔案，有一個Build succeeded&lt;br&gt;但是後面都是npm ERR&lt;br&gt;以及可以看到他嘗試使用 npm start 來運行我們的專案&lt;br&gt;還記得我們的程序啟動試透過甚麼方式嗎?&lt;br&gt;沒錯，node bot!&lt;/p&gt;
&lt;h1 id=&#34;平台設定&#34;&gt;&lt;a href=&#34;#平台設定&#34; class=&#34;headerlink&#34; title=&#34;平台設定&#34;&gt;&lt;/a&gt;平台設定&lt;/h1&gt;&lt;p&gt;我們在專案的根目錄新增一個檔案，取名叫做Procfile&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/4Xl8BEd.png&#34; alt=&#34;15-7&#34;&gt;&lt;/p&gt;
&lt;p&gt;裡面只有一行，寫上&lt;br&gt;worker: node bot&lt;/p&gt;
&lt;p&gt;可以看到，檔案在取名為Procfile後，icon會變成Heroku的標誌&lt;br&gt;這是Heroku可以辨識的檔案，作用是指定Heroku的啟動命令&lt;br&gt;worker是代表我們要運行的啟動命令是worker(程序)&lt;br&gt;heroku預設的啟動命令屬於web(網頁)&lt;/p&gt;
&lt;p&gt;寫好後，我們再做一次推送&lt;br&gt;git add .&lt;br&gt;git commit -m ‘npm bot’&lt;br&gt;git push heroku master&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/foAIKIR.png&#34; alt=&#34;15-8&#34;&gt;&lt;/p&gt;
&lt;p&gt;push完，我們打開網頁，回到heroku控制台，進入我們的專案&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/gLPqwGs.png&#34; alt=&#34;15-9&#34;&gt;&lt;/p&gt;
&lt;p&gt;會看到，紅框處是我們的推送日誌，這也是用git來控管程式時的日誌檔&lt;/p&gt;
&lt;p&gt;藍框就顯示了我們程序的啟動方式，可以看到node bot已經出現在上面了，但是沒有開啟&lt;/p&gt;
&lt;p&gt;我們點擊紫框的Resources&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/s2C5V61.png&#34; alt=&#34;15-10&#34;&gt;&lt;/p&gt;
&lt;p&gt;將 npm start給關閉，node bot開啟，這樣回去主頁面看node bot也會是開啟的狀態了&lt;/p&gt;
&lt;p&gt;最後我們在終端機輸入 heroku restart&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/10oZqCf.png&#34; alt=&#34;15-11&#34;&gt;&lt;/p&gt;
&lt;p&gt;這是重啟專案的指令，當程序崩潰或是遇到任何問題時，都可以重啟看看&lt;/p&gt;
&lt;p&gt;heroku logs -t&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/ZVirlHw.png&#34; alt=&#34;15-12&#34;&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/SrXdjRa.png&#34; alt=&#34;15-13&#34;&gt;&lt;/p&gt;
&lt;p&gt;成功!&lt;br&gt;到此為止，我們成功將Bot推送到Heroku上，以後不用我們自己運行&lt;br&gt;機器人也會是24小時運行了，給做到這邊的自己一個鼓勵吧^^&lt;/p&gt;
&lt;h1 id=&#34;其他設定&#34;&gt;&lt;a href=&#34;#其他設定&#34; class=&#34;headerlink&#34; title=&#34;其他設定&#34;&gt;&lt;/a&gt;其他設定&lt;/h1&gt;&lt;p&gt;Heroku的免費時數預設是550小時&amp;#x2F;月，如果說是自己幾個朋友使用是沒關係&lt;br&gt;當機器人在一個人數比較多的群組時，550小時是沒辦法支撐1個月的，每到月底、機器人就會想休息幾天&lt;/p&gt;
&lt;p&gt;但是!如果你有在Heroku的帳戶綁定信用卡的話，他會免費再給你450小時，每個月的免費時數會變成1000小時，運行機器人是完全足夠的!不用擔心會扣款&lt;/p&gt;
&lt;p&gt;我們點選右上角的設定&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/84iDGli.png&#34; alt=&#34;15-14&#34;&gt;&lt;/p&gt;
&lt;p&gt;點Billing，然後點Add credit card&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Rqh5IfU.png&#34; alt=&#34;15-15&#34;&gt;&lt;/p&gt;
&lt;p&gt;再來就是綁卡流程，相信這部份不用截圖，各位自己會的&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/A1PkaAG.png&#34; alt=&#34;15-16&#34;&gt;&lt;/p&gt;
&lt;p&gt;綁完後，底下原本的550小時就會變成有1000小時的扣打了~&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smilin.net/2020/09/14/12thDay14/</guid>
            <title>Day14 - Heroku與Git，介紹與安裝</title>
            <link>https://smilin.net/2020/09/14/12thDay14/</link>
            <category>node.js</category>
            <category>bot</category>
            <category>discord</category>
            <category>discord.js</category>
            <category>教學</category>
            <category>12th鐵人賽</category>
            <pubDate>Mon, 14 Sep 2020 14:10:55 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;好勒，上禮拜我們終於把基本的音樂系統做好&lt;br&gt;現在你的機器人支援多種功能，加上你自己做的其他系統，已經是一個強大的機器人了!&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;之後如果我要使用機器人，只要打開cmd運行node bot，然後電腦一直開著就好&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一直開著就好&lt;/li&gt;
&lt;li&gt;自己不在其他人就沒辦法使用bot&lt;/li&gt;
&lt;li&gt;程序如果掛掉要自已重啟&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其實這就是將自己的電腦做為後端主機在運行bot&lt;br&gt;而這方法對於平常沒有長時間開機習慣的使用者來說是略為有些負擔了&lt;br&gt;就算是順便開著也要擔心程式會不會自己崩潰跳閘&lt;/p&gt;
&lt;p&gt;也因此，今天我們就會來解決這個問題，同時也是終於能提到我們的主題啦&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;後端0負擔&#34;&gt;&lt;a href=&#34;#後端0負擔&#34; class=&#34;headerlink&#34; title=&#34;後端0負擔&#34;&gt;&lt;/a&gt;後端0負擔&lt;/h1&gt;&lt;p&gt;一個面向使用者的服務都會有&lt;br&gt;一個前端視覺介面(Discord)&lt;br&gt;一個後端(bot.js)&lt;br&gt;再在後端的後面獨立出一個資料庫主機就更好了(SQL)&lt;/p&gt;
&lt;p&gt;後端0負擔的意思是我們不必再支付運行程序的電費等維護費用&lt;br&gt;那麼該怎麼做才能實現呢?其實也很簡單，我們把程序給其他人的電腦跑，讓他幫你管就好，也就是&lt;/p&gt;
&lt;h3 id=&#34;雲端託管&#34;&gt;&lt;a href=&#34;#雲端託管&#34; class=&#34;headerlink&#34; title=&#34;雲端託管&#34;&gt;&lt;/a&gt;雲端託管&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/7OKEagE.png&#34; alt=&#34;14-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.heroku.com/&#34;&gt;Heroku官方網站&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Heroku是支援多語言的全自動託管平台&lt;br&gt;只要將你的程序放上去並且做好相關設定，程序就會在他們的主機上自動運行&lt;/p&gt;
&lt;h1 id=&#34;註冊Heroku帳號&#34;&gt;&lt;a href=&#34;#註冊Heroku帳號&#34; class=&#34;headerlink&#34; title=&#34;註冊Heroku帳號&#34;&gt;&lt;/a&gt;註冊Heroku帳號&lt;/h1&gt;&lt;p&gt;請先到&lt;a href=&#34;https://signup.heroku.com/login&#34;&gt;這個網址&lt;/a&gt;註冊帳號資訊&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/7PeESWm.png&#34; alt=&#34;14-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;First name姓&lt;br&gt;Last name名&lt;br&gt;Email Address信箱&lt;br&gt;Role職業&lt;br&gt;Primary Development Language開發語言&lt;/p&gt;
&lt;p&gt;基本上只要信箱跟開發語言沒打錯選錯就好，填好後我們直接送出&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/N7yKXIJ.png&#34; alt=&#34;14-3&#34;&gt;&lt;/p&gt;
&lt;p&gt;到這個步驟就代表前面填的資料ok，請去收信&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/GeRJh01.png&#34; alt=&#34;14-4&#34;&gt;&lt;/p&gt;
&lt;p&gt;點擊信中的連結&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/oVhFOKt.png&#34; alt=&#34;14-5&#34;&gt;&lt;/p&gt;
&lt;p&gt;這邊他要你重複輸入密碼，需8碼，由英數符號組成&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/1PBEoJs.png&#34; alt=&#34;14-6&#34;&gt;&lt;/p&gt;
&lt;p&gt;一路確認後就會來到這裡了&lt;br&gt;這裡是heroku的後台，左側是創建我們的應用程序專案，右側是成立小組&lt;/p&gt;
&lt;p&gt;不過我們通常會透過 Heroku CLI 來操作，所以不用管這兩個東東，我們繼續做&lt;/p&gt;
&lt;h1 id=&#34;安裝Heroku-CLI&#34;&gt;&lt;a href=&#34;#安裝Heroku-CLI&#34; class=&#34;headerlink&#34; title=&#34;安裝Heroku CLI&#34;&gt;&lt;/a&gt;安裝Heroku CLI&lt;/h1&gt;&lt;p&gt;點擊&lt;a href=&#34;https://devcenter.heroku.com/articles/heroku-cli#windows&#34;&gt;這個網址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;按照你的作業系統安裝對應的版本，通常是Windows 64-bit&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/j8Nhzgo.jpg&#34; alt=&#34;14-7&#34;&gt;&lt;/p&gt;
&lt;p&gt;一路next就好，最後Close&lt;/p&gt;
&lt;p&gt;最後我們開啟終端機(cmd)，注意必須是重新開啟的cmd，安裝前已經開啟的不行&lt;br&gt;在上面輸入heroku&lt;br&gt;&lt;img src=&#34;https://i.imgur.com/Q5PDR5H.png&#34; alt=&#34;14-8&#34;&gt;&lt;/p&gt;
&lt;p&gt;只要出現類似這樣的畫面就代表安裝成功了&lt;br&gt;如果沒有成功出現，可以先重開機看看，再不然可能是你的安裝版本有錯，電腦不是64位元等&lt;/p&gt;
&lt;p&gt;成功的話我們繼續輸入 heroku login&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/4riBzSS.png&#34; alt=&#34;14-9&#34;&gt;&lt;/p&gt;
&lt;p&gt;在鍵盤上輸入除了q以外的按鍵 &amp;#x3D; 同意他開啟瀏覽器提供登入&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/hIbxrs0.png&#34; alt=&#34;14-10&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/yUICBY3.png&#34; alt=&#34;14-11&#34;&gt;&lt;/p&gt;
&lt;p&gt;chrome會自動打開，因為我們前面剛在heroku註冊，所以網頁還存著登入訊息，直接按Log In，回頭看cmd就會顯示登入成功了!&lt;/p&gt;
&lt;p&gt;這樣Heroku CLI就裝好了，我們再來安裝Git&lt;/p&gt;
&lt;h1 id=&#34;Git安裝&#34;&gt;&lt;a href=&#34;#Git安裝&#34; class=&#34;headerlink&#34; title=&#34;Git安裝&#34;&gt;&lt;/a&gt;Git安裝&lt;/h1&gt;&lt;p&gt;Git是一種提供程式版本控制的語言，最常見的例子是GitHub&lt;br&gt;透過Git語言，我們可以將專案製作成Git專案，然後透過Git將程式推送到雲端，並且保證每個版本間的修改與來源都得到紀錄&lt;/p&gt;
&lt;p&gt;Heroku正是依循Git的規則來上傳下載程式&lt;/p&gt;
&lt;p&gt;點擊&lt;a href=&#34;https://git-scm.com/download/win&#34;&gt;這個網址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一樣選擇對應的版本&lt;br&gt;安裝時的選項很多，請跟我底下的圖片選擇一樣&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/DprmCvj.jpg&#34; alt=&#34;14-12&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Y0z1v5M.jpg&#34; alt=&#34;14-13&#34;&gt;&lt;/p&gt;
&lt;p&gt;路徑跟我不一樣沒關係，總之要照他預設給你的，不要改&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/MqCh8g0.jpg&#34; alt=&#34;14-14&#34;&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/jsvzoZd.jpg&#34; alt=&#34;14-15&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/TlaJ0d8.jpg&#34; alt=&#34;14-16&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/ME0BGhq.jpg&#34; alt=&#34;14-17&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/NnHcvxN.jpg&#34; alt=&#34;14-18&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/EJs2X40.jpg&#34; alt=&#34;14-19&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/aw4G31d.jpg&#34; alt=&#34;14-20&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/ZJTODzR.jpg&#34; alt=&#34;14-21&#34;&gt;&lt;/p&gt;
&lt;p&gt;這樣就安裝好Git了，跟剛剛一樣，我們開一個新的cmd測試是否安裝成功&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/cG2Rs1B.png&#34; alt=&#34;14-22&#34;&gt;&lt;/p&gt;
&lt;p&gt;失敗的話，除了版本問題以外，有可能是PATH檔不正確，可以拿這個keyword去排除問題試試看&lt;/p&gt;
&lt;p&gt;都沒問題的話，我們輸入以下兩個指令&lt;/p&gt;
&lt;p&gt;git config –global user.name “smile”&lt;br&gt;git config –global user.email “&lt;a href=&#34;mailto:&amp;#x61;&amp;#50;&amp;#56;&amp;#56;&amp;#x32;&amp;#54;&amp;#50;&amp;#53;&amp;#x32;&amp;#x32;&amp;#x35;&amp;#x32;&amp;#64;&amp;#x67;&amp;#109;&amp;#97;&amp;#105;&amp;#x6c;&amp;#x2e;&amp;#99;&amp;#111;&amp;#109;&#34;&gt;&amp;#x61;&amp;#50;&amp;#56;&amp;#56;&amp;#x32;&amp;#54;&amp;#50;&amp;#53;&amp;#x32;&amp;#x32;&amp;#x35;&amp;#x32;&amp;#64;&amp;#x67;&amp;#109;&amp;#97;&amp;#105;&amp;#x6c;&amp;#x2e;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;“&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/VMeScbF.png&#34; alt=&#34;14-23&#34;&gt;&lt;/p&gt;
&lt;p&gt;這是設定你的使用者名稱與信箱&lt;br&gt;我的名稱是smile，你要改成你自己的稱呼，信箱與heroku一樣就可以了&lt;/p&gt;
&lt;p&gt;之後透過git推送時，都會以這個稱呼與信箱來識別&lt;br&gt;這樣Heroku跟Git的前置作業都做好了，明天將專案推上Heroku&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smilin.net/2020/09/13/12thDay13/</guid>
            <title>Day13 - 嵌入式訊息embed與 bot 的指令表(額外)</title>
            <link>https://smilin.net/2020/09/13/12thDay13/</link>
            <category>node.js</category>
            <category>bot</category>
            <category>discord</category>
            <category>discord.js</category>
            <category>教學</category>
            <category>12th鐵人賽</category>
            <pubDate>Sun, 13 Sep 2020 21:37:08 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;今天說說Discord的另一種訊息方式，embed&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/6cCIVuN.png&#34; alt=&#34;13-1&#34;&gt;&lt;/p&gt;
&lt;p&gt;在Discord.js中被稱為MessageEmbed，訊息嵌入元素，總之就是嵌入式訊息&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/mw9N4MX.png&#34; alt=&#34;13-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;跟一般傳送訊息的手段一樣是使用 send ，但是傳送的屬性從原本的文字(string)轉成是嵌入元素(Embed)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/kQQYhth.png&#34; alt=&#34;13-3&#34;&gt;&lt;/p&gt;
&lt;p&gt;embed宣告後，透過其文檔底下的各個方法(methods)來賦予嵌入式訊息本身，要放入哪些資訊&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/rDwYLkd.png&#34; alt=&#34;14-4&#34;&gt;&lt;/p&gt;
&lt;p&gt;將一個一個訊息嵌入embed元素後，最後從send方法傳送到discord上，就是一則embed訊息了&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/gRPZpUI.png&#34; alt=&#34;14-5&#34;&gt;&lt;/p&gt;
&lt;p&gt;底下附上標準版的embed，請各位嘗試在最初教學的 ! 方法中新增一則help觸發句，將底下範例套入後，試著替換成自己的指令文檔吧!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;const embed = new Discord.MessageEmbed()
      .setColor(&amp;#39;#0099ff&amp;#39;)
      .setTitle(&amp;#39;Some title&amp;#39;)
      .setURL(&amp;#39;https://discord.js.org/&amp;#39;)
      .setAuthor(&amp;#39;Some name&amp;#39;, &amp;#39;https://i.imgur.com/wSTFkRM.png&amp;#39;, &amp;#39;https://discord.js.org&amp;#39;)
      .setDescription(&amp;#39;Some description here&amp;#39;)
      .setThumbnail(&amp;#39;https://i.imgur.com/wSTFkRM.png&amp;#39;)
      .addField(&amp;#39;Regular field title&amp;#39;, &amp;#39;Some value here&amp;#39;)
      .addField(&amp;#39;\u200B&amp;#39;, &amp;#39;\u200B&amp;#39;)
      .addField(&amp;#39;Inline field title&amp;#39;, &amp;#39;Some value here&amp;#39;, true)
      .addField(&amp;#39;Inline field title&amp;#39;, &amp;#39;Some value here&amp;#39;, true)
      .addField(&amp;#39;Inline field title&amp;#39;, &amp;#39;Some value here&amp;#39;, true)
      .setImage(&amp;#39;https://i.imgur.com/wSTFkRM.png&amp;#39;)
      .setTimestamp()
      .setFooter(&amp;#39;Some footer text here&amp;#39;, &amp;#39;https://i.imgur.com/wSTFkRM.png&amp;#39;);
msg.channel.send(embed);
&lt;/code&gt;&lt;/pre&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://smilin.net/2020/09/12/12thDay12/</guid>
            <title>Day12 - Discord的訊息刪除與更新事件(額外)</title>
            <link>https://smilin.net/2020/09/12/12thDay12/</link>
            <category>node.js</category>
            <category>bot</category>
            <category>discord</category>
            <category>discord.js</category>
            <category>教學</category>
            <category>12th鐵人賽</category>
            <pubDate>Sat, 12 Sep 2020 23:26:32 +0800</pubDate>
            <description><![CDATA[ &lt;p&gt;欸…原本接下來想教後台託管與資料庫的教學的&lt;br&gt;但因為筆者禮拜五把文稿跟圖片還有範例程式全都留在公司了…所以這兩天筆者先教一下其他東西&lt;/p&gt;
&lt;span id=&#34;more&#34;&gt;&lt;/span&gt;

&lt;p&gt;就當作是惡補前面沒講到的Discord.js功能，我們今天來說說Discord.js的其他事件監聽吧&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;刪除與更新事件&#34;&gt;&lt;a href=&#34;#刪除與更新事件&#34; class=&#34;headerlink&#34; title=&#34;刪除與更新事件&#34;&gt;&lt;/a&gt;刪除與更新事件&lt;/h1&gt;&lt;p&gt;目前我們的所有事件都是建立在&lt;br&gt;使用者發送訊息 -&amp;gt; Discord廣播給機器人 -&amp;gt; 機器人的Message事件觸發&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;client.on(&amp;#39;message&amp;#39;, msg =&amp;gt; &amp;#123;&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我們的 bot 是使用登入了 bot 自身 keyValue 的 client 來監聽 message 事件的&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/qXdmhzO.png&#34; alt=&#34;12-1&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://i.imgur.com/hbkivnR.png&#34; alt=&#34;12-2&#34;&gt;&lt;/p&gt;
&lt;p&gt;這樣，我們在Client下的Event分類中，就會找的到message的內容&lt;/p&gt;
&lt;p&gt;在程序中Client代表我們機器人本身，他的Event直接表示了他能對那些事情做出反應&lt;br&gt;也因此，Client的Event功能非常的多&lt;/p&gt;
&lt;p&gt;今天我們來說說MessageDelete跟MessageUpdate事件，也就是當有人刪除訊息跟更新訊息的時要做的事情&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/OZ84Nlj.png&#34; alt=&#34;12-3&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://i.imgur.com/FSfPNZq.png&#34; alt=&#34;12-4&#34;&gt;&lt;/p&gt;
&lt;p&gt;Discord.js的文庫其實也蠻簡單的，不用看那些英文在說甚麼，透過事件名稱跟屬性已經足夠我們知道&lt;br&gt;當有人刪除留言時，Discord會將Message返還給我們&lt;br&gt;當有人更新留言時，Discord會將oldMessage跟newMessage&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/ouPctCU.png&#34; alt=&#34;12-5&#34;&gt;&lt;/p&gt;
&lt;p&gt;請試著用console.log查看Discord分別給了我們甚麼內容吧!&lt;/p&gt;
&lt;p&gt;之後我們把屬性中我們需要的元素拿出來組成字串，發送到原本的頻道去&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;//抓刪 刪除事件
client.on(&amp;#39;messageDelete&amp;#39;, function (message) &amp;#123;
    if (!message.guild) return; //只要是來自群組的訊息
    let mStr = &amp;#39;&amp;#39;;
    try&amp;#123;
        mStr = mStr+
            `事件 刪除\n`+
            `使用者 $&amp;#123;message.member.user.username&amp;#125;\n`+
            `群組 $&amp;#123;message.channel.name&amp;#125;\n`+
            `刪除內容 $&amp;#123;message.content&amp;#125;`;

        client.channels.get(message.channel.id).send(mStr);
    &amp;#125;catch(err)&amp;#123;
        console.log(&amp;quot;messageDeleteError&amp;quot;,err);
    &amp;#125;
&amp;#125;);

//抓刪 更新事件
client.on(&amp;#39;messageUpdate&amp;#39;, function (oldMessage, newMessage) &amp;#123;
    if (!oldMessage.guild || !newMessage.guild) return;
    mStr = &amp;#39;&amp;#39;;
    try &amp;#123;
        mStr = mStr +
            `事件 更新\n` +
            `使用者 $&amp;#123;oldMessage.member.user.username&amp;#125;\n` +
            `群組   $&amp;#123;oldMessage.channel.name&amp;#125;\n` +
            `舊對話 $&amp;#123;oldMessage.content&amp;#125;\n` +
            `新對話 $&amp;#123;newMessage.content&amp;#125;`;

        client.channels.get(oldMessage.channel.id).send(mStr);
    &amp;#125; catch (err) &amp;#123;
        console.log(&amp;#39;messageUpdateError&amp;#39;, err);
    &amp;#125;
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;這樣，你的bot就會在頻道有人刪除訊息時接收訊息，然後把刪除的內容貼出來玩羞恥play了(&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>