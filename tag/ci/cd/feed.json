{
    "version": "https://jsonfeed.org/version/1",
    "title": "貓謎工坊 • All posts by \"ci/cd\" tag",
    "description": "Code · Thinking · ACG",
    "home_page_url": "https://smilin.net",
    "items": [
        {
            "id": "https://smilin.net/2024/04/30/githubAction1/",
            "url": "https://smilin.net/2024/04/30/githubAction1/",
            "title": "Github Action 學習紀錄",
            "date_published": "2024-04-30T07:00:00.000Z",
            "content_html": "<h1 id=\"Auto-Pixai\"><a href=\"#Auto-Pixai\" class=\"headerlink\" title=\"Auto-Pixai\"></a>Auto-Pixai</h1><p><img src=\"https://raw.githubusercontent.com/Mr-Smilin/Auto-Pixai/main/public/pic/logo.png\" alt=\"auto-pixai\"></p>\n<p>之前撰寫的 <a href=\"https://smilin.net/2024/04/13/autoPixai/\">auto-pixai</a><br>經過多次調整，基本修復了大部分的 bug</p>\n<p>該專案透過爬蟲，<br>提供自動在 <a href=\"https://pixai.art/\">pixai</a> 簽到的功能</p>\n<p>考量到便利性，<br>將專案打包成 docker image，<br>實現無狀態的部屬環境，<br>最後透過 github tag 控制版本歷程。</p>\n<br>\n\n<h2 id=\"整合部屬需求\"><a href=\"#整合部屬需求\" class=\"headerlink\" title=\"整合部屬需求\"></a>整合部屬需求</h2><p>雖然 User 用起來是方便了，<br>但每次開發部版都需要進行複雜的手續..</p>\n<p>CI&#x2F;CD …好..好想要 CI&#x2F;CD 阿..<br>就在這麼想著的時候，想起了..</p>\n<p><strong>Github Action!</strong></p>\n<span id=\"more\"></span>\n\n<br>\n\n<h1 id=\"Github-Action\"><a href=\"#Github-Action\" class=\"headerlink\" title=\"Github Action\"></a>Github Action</h1><p><img src=\"/img/post/githubAction1/01.png\" alt=\"Github Action!\"></p>\n<p>Github Action 是 Github 提供的 CI&#x2F;CD 方案</p>\n<p>由 Github 提供整合環境，<br>在統一的無狀態環境下進行整合</p>\n<p>最重要的是，它對於 public repository 完全免費!</p>\n<p><a href=\"https://docs.github.com/zh/actions/quickstart\">Github Action 官方簡中文檔</a><br>在學習 github action 的過程，<br>官方文檔幫助了我許多</p>\n<p>因為有官方翻譯，在專有名詞的學習上也不容易被混淆。</p>\n<br>\n\n<h2 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求?\"></a>需求?</h2><p><img src=\"/img/post/githubAction1/02.jpg\"></p>\n<p>做為 CI&#x2F;CD (自動整合&#x2F;自動部屬) 的角色，<br>我希望他可以在我推送 release 的時候，去做幾件事——</p>\n<ul>\n<li>根據 package.json 檢查版本</li>\n<li>自動創建新版本代號</li>\n<li>根據 Dockerfile 產出 Docker image</li>\n<li>將 image 標上版號，推至 Docker Hub</li>\n</ul>\n<p>並且由於 Github Action 還提供緩存功能，<br>如果將 <code>npm install</code> 拉到 Github Action，<br>搭配緩存可以有效縮短 Dockerfile 的產出時間與大小！</p>\n<p>配上 Github Action 的一些格式後，我們還需要——</p>\n<ul>\n<li>指定 <code>node</code> 版本</li>\n<li>緩存儲存 <code>node_modules</code></li>\n<li>緩存加載 <code>node_modules</code></li>\n</ul>\n<p>根據<a href=\"https://docs.github.com/zh/actions/using-workflows/caching-dependencies-to-speed-up-workflows\">官方文檔</a>所述，<br>7 天沒使用的 cache 會自動回收，<br>並且一個 repository 的所有 cache 加總不可超出 10GB</p>\n<p>除此以外，緩存沒有任何限制</p>\n<pre><code>- name: Cache node modules\n        id: cache-node-modules\n        uses: actions/cache@v3\n        with:\n          path: node_modules\n          key: $&#123;&#123; runner.os &#125;&#125;-node-$&#123;&#123; hashFiles('**/package-lock.json') &#125;&#125;\n          restore-keys: |\n            $&#123;&#123; runner.os &#125;&#125;-node-\n</code></pre>\n<p>根據 package-lock.json 的變動來決定是否新建緩存，<br>否則就取出原本的 node_modules，<br>以此加速 CD 流程。</p>\n<br>\n\n<h2 id=\"過程\"><a href=\"#過程\" class=\"headerlink\" title=\"過程\"></a>過程</h2><p><img src=\"/img/post/githubAction1/03.jpg\"></p>\n<p>搭啷，經過整理後，<br>這是目前的 CI&#x2F;CD 流程</p>\n<p>由於沒有實作測試，<br>僅有 release 被推送時需要 CI&#x2F;CD</p>\n<p>執行首先檢查 tag ，<br>若 package 版號有變動則創建新版本</p>\n<p>同時進行 cache 的載入，<br>若是找不到 cache 則重新 <code>npm install</code></p>\n<p>兩邊都做完後，<br>進行 Dockerfile 的 building 與 pushing。</p>\n<br>\n\n<h2 id=\"結果\"><a href=\"#結果\" class=\"headerlink\" title=\"結果\"></a>結果</h2><p>大功告成！原本繁瑣的整合部屬流程</p>\n<ul>\n<li>Push New Version</li>\n<li>Dockerfile build</li>\n<li>Docker image tag</li>\n<li>Docker push tag</li>\n<li>Docker push latest</li>\n<li>…</li>\n</ul>\n<p>上面列的事情 <strong>通通不用</strong></p>\n<p>只要在 main 寫完代碼，<br>要推送版本的時候合併到 release，<br>最後再用自動產生的 tag 生成 Release 說明即可。</p>\n<br>\n\n<h1 id=\"結語\"><a href=\"#結語\" class=\"headerlink\" title=\"結語\"></a>結語</h1><p>怎麼說呢…好爽</p>\n<p>不過所謂爬蟲簽到甚麼的，<br>說白了只是個小工具</p>\n<p>藉著這次 project，<br>心血來潮地想把 repository 弄得有模有樣</p>\n<p>結果就是，<br>花在打扮(?)外觀的時間遠遠超出了爬蟲本身的開發時間</p>\n<p>感覺對 CICD 有了更深刻的了解；<br>美中不足的大概是爬蟲的測試並不好寫，<br>沒能在這次 action 中寫入自動測試，是比較可惜的。</p>\n",
            "tags": [
                "github",
                "CI/CD"
            ]
        }
    ]
}