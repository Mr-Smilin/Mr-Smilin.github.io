{
    "version": "https://jsonfeed.org/version/1",
    "title": "貓謎工坊 • All posts by \"hexo\" tag",
    "description": "Code · Thinking · ACG",
    "home_page_url": "https://smilin.net",
    "items": [
        {
            "id": "https://smilin.net/2024/04/23/twikoo1/",
            "url": "https://smilin.net/2024/04/23/twikoo1/",
            "title": "最近想更換評論系統",
            "date_published": "2024-04-23T03:00:00.000Z",
            "content_html": "<p><img src=\"/img/post/twikoo1/twikoo-logo-home.png\" alt=\"logo\"></p>\n<p>最近想把 blog 的評論系統換了</p>\n<p>原本的 gittalk 免費，開源<br>巧妙利用 github 的 issue，在靜態網站上也能加入評論系統</p>\n<p>存在些許不方便，仍瑕不掩瑜。</p>\n<p>不過既然存在限制，總有人會想開發更好的工具<br>twikoo 就挺符合 blog 需求的</p>\n<span id=\"more\"></span>\n\n<hr>\n<h1 id=\"gittalk\"><a href=\"#gittalk\" class=\"headerlink\" title=\"gittalk\"></a>gittalk</h1><p>既然原本是用 gittalk，先說說 gittalk 的優點</p>\n<ul>\n<li>與 github page 的高度適配</li>\n<li>基於 issue 特性，綁定 github 帳戶，防止小白</li>\n</ul>\n<p>兩邊都有的優點不提，大概是這些<br>至於缺點</p>\n<ul>\n<li>因為綁在 issue，評論必須先註冊 github</li>\n<li>對中國使用者的支援較差(疑似)</li>\n</ul>\n<p><img src=\"/img/post/twikoo1/01.jpg\" alt=\"01\"></p>\n<p>而且本站基於 gittalk ，魔改了許多功能</p>\n<ul>\n<li>撈取最新留言</li>\n<li>撈取熱門留言</li>\n<li>從外部撈取文章留言數</li>\n</ul>\n<p>替換評論系統，不只是舊有的評論會消失<br>也代表著這些功能都需要重新適配，或是棄用。</p>\n<hr>\n<h1 id=\"twikoo\"><a href=\"#twikoo\" class=\"headerlink\" title=\"twikoo\"></a>twikoo</h1><p><a href=\"https://twikoo.js.org/\">官方文檔</a></p>\n<p>twikoo 與 gittalk 不同，資料存放於 MongoDB<br>意味著我們需要自行架設 DB 跟 API Server</p>\n<p>不過兩者在網路上都有許多免費資源可用，用來支持一個 blog 的運作綽綽有餘</p>\n<p>說說這個評論系統的優點</p>\n<ul>\n<li>無須登入即可留言</li>\n<li>避免騷擾留言，分別配有多種自動偵測垃圾留言的接口，也能開啟人工審核</li>\n<li>暱稱&amp;信箱&amp;網址 的填寫方式，很有幾十年前，傳統 blog 那味，我超愛</li>\n</ul>\n<p>至於缺點</p>\n<ul>\n<li>比起 gittalk，由於個人資料是自由填寫，相對難以得知發文者的背景</li>\n<li>與依附著 github issue 的 gittalk 相比，twikoo 於第三方架設 DB 跟 API Server 環境，長遠來看需要消耗更多的維護成本</li>\n<li>以前的評論會全部消失，嗚嗚嗚</li>\n</ul>\n<hr>\n<p><img src=\"/img/post/twikoo1/02.jpg\" alt=\"02\"></p>\n<p>基本的配置已經做好了，只是還在猶豫是否該使用</p>\n<p>個人 blog 要提高評論數還是比較難的，至少沒辦法跟社群平台競爭<br>在這個前提下，評論門檻相對高的 gittalk，這份缺點也會被不斷放大</p>\n<p>但 gittalk 同樣有著他本身天然的優勢在——</p>\n",
            "tags": [
                "日記",
                "hexo"
            ]
        },
        {
            "id": "https://smilin.net/2021/11/16/fluidThemeShare/",
            "url": "https://smilin.net/2021/11/16/fluidThemeShare/",
            "title": "fluid支持pjax主題源碼分享",
            "date_published": "2021-11-16T04:00:00.000Z",
            "content_html": "<p><img src=\"https://i.imgur.com/yl9bnuZ.png\" alt=\"theme\"></p>\n<h1 id=\"寫在前面\"><a href=\"#寫在前面\" class=\"headerlink\" title=\"寫在前面\"></a>寫在前面</h1><pre><code>本主題基於 fluid 1.8.11 版本製作，在此之上參雜了許多私貨\n又因為本人前端並不熟練，源碼被改得亂七八糟的，因此有任何問題在blog聯繫我詢問即可。\n再此感謝開發 and 維護源碼的所有大大們。\n</code></pre>\n<h2 id=\"fluid-主題主要改動\"><a href=\"#fluid-主題主要改動\" class=\"headerlink\" title=\"fluid 主題主要改動\"></a>fluid 主題主要改動</h2><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> pjax 支持</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 添加本地音樂箱</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 添加右下角 Live2D 妹子</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> pjax JS 回調(解決大部分 fluid 不支持 pjax 之異常)</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 目錄頁次浮動顯示</li>\n<li><input disabled=\"\" type=\"checkbox\"> 文章列表搜出留言數</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> Markdown 介面修改</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 文章底部上下篇連結位置對調(上一篇就該在左邊，下一篇就該在右邊 &#x3D; &#x3D; )</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 修復繁體中文字型</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> rss 功能</li>\n</ul>\n<span id=\"more\"></span>\n\n<h2 id=\"環境配置\"><a href=\"#環境配置\" class=\"headerlink\" title=\"環境配置\"></a>環境配置</h2><pre><code>hexo -v\nINFO  Validating config\nhexo: 5.4.0\nhexo-cli: 4.3.0\n</code></pre>\n<p>主題下載</p>\n<pre><code>https://github.com/Mr-Smilin/hexo-theme-fluid.git\n</code></pre>\n<p>hexo _config 配置請添加以下</p>\n<h3 id=\"rss\"><a href=\"#rss\" class=\"headerlink\" title=\"rss\"></a>rss</h3><pre><code>feed:\n    type: atom # RSS的类型(atom/rss2)\n    path: atom.xml # 文件路径,默认是atom.xml/rss2.xml\n    limit: 20 # 展示文章的数量,使用0或则false代表展示全部\n    hub:\n    content: # 在RSS文件中是否包含内容 ,有3个值 true/false默认不填为false\n    content_limit: # 指定内容的长度作为摘要,仅仅在上面content设置为false和没有自定义的描述出现\n    content_limit_delim: &#39; &#39; # 上面截取描述的分隔符,截取内容是以指定的这个分隔符作为截取结束的标志.在达到规定的内容长度之前最后出现的这个分隔符之前的内容,，防止从中间截断.\n</code></pre>\n<h3 id=\"live-2D\"><a href=\"#live-2D\" class=\"headerlink\" title=\"live 2D\"></a>live 2D</h3><pre><code>live2d:\n    enable: true\n    scriptFrom: local\n    pluginRootPath: live2dw/\n    pluginJsPath: lib/\n    pluginModelPath: assets/\n    tagMode: false\n    log: false\n    model:\n        use: live2d-widget-model-shizuku\n    display:\n        position: right\n        width: 150\n        height: 300\n    mobile:\n        show: false\n    react:\n        opacity: 0.7\n</code></pre>\n<p>更多 live2D 模組可訪問 <code>https://smilin.net/2021/11/16/live2DShareList/</code></p>\n<h3 id=\"音樂箱音樂\"><a href=\"#音樂箱音樂\" class=\"headerlink\" title=\"音樂箱音樂\"></a>音樂箱音樂</h3><p>開啟 <code>source\\dist\\music.js</code></p>\n<pre><code>const ap = new APlayer(&#123;\n    container: document.getElementById(&#39;aplayer&#39;),\n    fixed: true,\n    mini: true,\n    autoplay: false,\n    loop: &#39;all&#39;,\n    volume: 0.7,\n    listFolded: true,\n    listMaxHeight: 60,\n    audio: [\n        &#123;\n            name: &#39;最近在聽的歌&#39;,\n            artist: &#39;星茶会&#39;,\n            url: &#39;/music/星茶会.mp3&#39;,\n            cover: &#39;/img/avatar.png&#39;,\n        &#125;,\n        &#123;\n            name: &#39;最近在聽的歌&#39;,\n            artist: &#39;Fullmetal Alchemist Brotherhood&#39;,\n            url: &#39;/music/Fullmetal-Alchemist-Brotherhood.mp3&#39;,\n            cover: &#39;/img/avatar.png&#39;,\n        &#125;\n    ]\n&#125;);\n</code></pre>\n<p>對應路徑檔案可替換</p>\n<hr>\n<p>配置好後，做 hexo 上傳 sop</p>\n<pre><code>$ npm install #安裝library（僅第一次執行）\n$ hexo clean #清除\n$ hexo g #編譯\n$ hexo d #上傳git\n</code></pre>\n<p>以上就是配置此 theme 的流程，使用上若有遇到問題歡迎在底下詢問</p>\n<hr>\n<h2 id=\"期待這篇文章可以幫助到需要的人\"><a href=\"#期待這篇文章可以幫助到需要的人\" class=\"headerlink\" title=\"期待這篇文章可以幫助到需要的人\"></a>期待這篇文章可以幫助到需要的人</h2><p>fluid 是本 blog 第一個使用的 theme<br>fluid 的設計…非常讚!(詞窮)<br>逛著 blog 的期間，可以從各處巧思中感受到作者對美感的一套見解</p>\n<p>不過 fluid 因為其框架的侷限，其致命傷便是無法支援 pjax(ajax)做局部頁面更新<br>從 issues 上可以看到，對於 pjax 的開發目前是不了了之</p>\n<p>但這並非是 fluid 無法支援 pjax，而是因為引入 pjax 會破壞 fluid 既有框架<br>也因此這些改動要改進正式版本是十分困難的，但如果只是魔改的話，儘管是像筆者對前端並不精熟，也能試著修改(code 不保證好看就是了 xD)</p>\n<p>因為筆者最近可能會試著替換成其他主題，故想記錄下使用版本，算是分享。</p>\n",
            "tags": [
                "教學",
                "hexo",
                "fluid"
            ]
        }
    ]
}